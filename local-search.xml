<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python学习笔记</title>
    <link href="/2023/06/01/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/01/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Python学习笔记摘要"><a href="#Python学习笔记摘要" class="headerlink" title="Python学习笔记摘要"></a>Python学习笔记摘要</h1><h2 id="1-起步"><a href="#1-起步" class="headerlink" title="1.起步"></a>1.起步</h2><h3 id="1-1Python的安装等"><a href="#1-1Python的安装等" class="headerlink" title="1.1Python的安装等"></a>1.1Python的安装等</h3><p>略</p><h3 id="1-2设置代码格式"><a href="#1-2设置代码格式" class="headerlink" title="1.2设置代码格式"></a>1.2设置代码格式</h3><ul><li><p>PEP 8建议每级缩进都使用四个空格，这既可提高可读性，又留下了足够的多级缩进空间。</p></li><li><p>在程序中混合使用制表符和空格可能导致极难解决的问题。如果你混合使用了制表符和空格，可将文件中所有的制表符转换为空格，大多数编辑器都提供了这样的功能。</p></li><li><p>很多Python程序员都建议每行不超过80字符。</p></li><li><p>PEP 8还建议注释的行长都不超过72字符，因为有些工具为大型项目自动生成文档时，会在每行注释开头添加格式化字符。</p></li><li><p>要将程序的不同部分分开，可使用空行，但是也不应该滥用，空行不会影响代码的运行，但会影响代码的可读性。</p></li></ul><p>在vscode中设置80字符参考线：</p><p>设置-文本编辑器-Rulers-在settings.json中编辑加入下列这段代码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;[python]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;editor.rulers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-number">80</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ms-python.python&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="1-3编码风格"><a href="#1-3编码风格" class="headerlink" title="1.3编码风格"></a>1.3编码风格</h3><ul><li><p>类名应采用驼峰命名法，即将类名中的每个单词的首字母都大写，而不使用下划线。</p></li><li><p>实例名和模块名都采用小写格式，并在单词之间加上下划线。</p></li><li><p>对于每个类，都应紧跟在类定义后面包含一个文档字符串</p></li><li><p>可使用空行来组织代码，但不要滥用</p></li><li><p>需要同时导入标准库中的模块和你编写的模块时，先编写导入标准库模块的import语句，再添加一个空行，然后编写导入你自己编写的模块的import语句</p></li></ul><h2 id="2-变量和数据类型"><a href="#2-变量和数据类型" class="headerlink" title="2.变量和数据类型"></a>2.变量和数据类型</h2><h3 id="2-1变量"><a href="#2-1变量" class="headerlink" title="2.1变量"></a>2.1变量</h3><p>变量的命名规则：</p><ul><li>变量名只能包含字母、数字和下划线。变量名可以字母或下划线打头，但不能以数字打头，例如，可将变量命名为message_1，但不能将其命名为1_message</li><li>变量名不能包含空格，但可使用下划线来分隔其中的单词。例如，变量名greeting_message可行，但变量名greeting message会引发错误</li><li>不要将Python关键字和函数名用作变量名，即不要使用Python保留用于特殊用途的单词，如print（大部分编辑器会有提示）</li><li>变量名应既简短又具有描述性。例如，name比n好，student_name比s_n好，name_length比length_of_persons_name好</li><li>慎用小写字母l和大写字母O，因为它们可能被人错看成数字1和0</li></ul><h3 id="2-2字符串"><a href="#2-2字符串" class="headerlink" title="2.2字符串"></a>2.2字符串</h3><p>字符串在python中表示为被引号括起来的，引号可以是单引号也可以是双引号。因此如果一个字符串内是有单引号或者撇号的，外面使用双引号，如果字符串内是要包含双引号的，外面用单引号。</p><p><strong>字符串的一些方法：</strong></p><ul><li><p><code>title()</code>,将每个单词的首字母改为大写</p></li><li><p><code>upper()</code>,将所有字母都改为大写</p></li><li><p><code>lower()</code>,将所有字母都改为小写</p></li><li><p><code>rstrip()</code>,在输出时删除字符串末尾的空白（空白包括空格、制表符<code>\t</code>、换行符<code>\n</code>等），只在输出是去除空白，实际并没有改变字符串的值</p><blockquote><p>&gt;&gt;&gt; <strong>favorite_language &#x3D; ‘python ‘</strong></p><p>&gt;&gt;&gt; <strong>favorite_language</strong> </p><p>‘python ‘ </p><p>&gt;&gt;&gt; <strong>favorite_language.rstrip()</strong></p><p>‘python’ </p><p>&gt;&gt;&gt; <strong>favorite_language</strong></p><p>‘python ‘ </p></blockquote></li><li><p><code>lstrip()</code>,在输出时删除字符串开头的空白</p></li><li><p><code>strip()</code>,在输出时删除字符串前后的空白</p></li></ul><h3 id="2-3数字"><a href="#2-3数字" class="headerlink" title="2.3数字"></a>2.3数字</h3><p><strong>整数</strong></p><p>Python使用两个乘号表示乘方运算，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">3</span> ** <span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p><strong>浮点数</strong></p><p>Python也存在小数位的精度问题，例如存在下面这些情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">0.2</span> + <span class="hljs-number">0.1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">0.30000000000000004</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">3</span>* <span class="hljs-number">0.1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">0.30000000000000004</span><br></code></pre></td></tr></table></figure><p><strong>str()函数</strong></p><p>通过str()函数来避免类型错误，在输出包含字符串及整数的信息时，将整数转换为字符串，从而实现信息的拼接</p><h3 id="2-3注释"><a href="#2-3注释" class="headerlink" title="2.3注释"></a>2.3注释</h3><p>养成写注释的习惯！养成写注释的习惯！养成写注释的习惯！重要的事情说三遍。</p><h2 id="3列表"><a href="#3列表" class="headerlink" title="3列表"></a>3列表</h2><p>列表由一系列按特定顺序排列的元素组成，在Python中，用方括号（[]）来表示列表，并用逗号来分隔其中的元素。</p><h3 id="3-1访问列表"><a href="#3-1访问列表" class="headerlink" title="3.1访问列表"></a>3.1访问列表</h3><p>列表是有序集合，只需要将该元素的位置或索引告诉Python即可，当你请求获取列表元素时，Python只返回该元素，而不包括方括号和引号。</p><ul><li>可以对从列表取出的元素使用字符串方法。</li><li>列表元素的索引从0开始，而不是从 1开始，这点要注意。</li><li>-1表示列表的最后一个元素</li></ul><h3 id="3-2列表的增、删、改"><a href="#3-2列表的增、删、改" class="headerlink" title="3.2列表的增、删、改"></a>3.2列表的增、删、改</h3><ul><li>修改：修改列表元素的语法与访问列表元素的语法类似。要修改列表元素，可指定列表名和要修改的元素的索引，再指定该元素的新值。</li><li>末尾添加元素：使用append()函数,可以在列表的末尾添加元素</li><li>列表中插入元素：使用insert()函数,可以在列表的任何位置添加新元素</li><li>列表中删除元素：使用del语句可以删除列表中的任何元素，前提是你要知道你删除的元素索引</li><li>使用pop()删除元素：pop()函数可删除列表末尾的元素，并允许使得它的值。</li><li>使用pop()删除任何位置元素：只需在括号中指定要删除的元素的索引即可。</li><li>根据值删除元素：不知道要从列表中删除的值所处的位置。如果你只知道要删除的元素的值，可使用方法remove()。<ul><li>注意：remove()只删除第一个指定的值。如果要删除的值可能在列表中出现多次，就需要使用循环来判断是否删除了所有这样的值</li></ul></li></ul><h3 id="3-3组织列表"><a href="#3-3组织列表" class="headerlink" title="3.3组织列表"></a>3.3组织列表</h3><p>创建的列表中，元素的排列顺序常常是无法预测的，因为你并非总能控制用户提供数据的顺序。这虽然在大多数情况下都是不可避免的，但你经常需要以特定的顺序呈现信息。有时候，你希望保留列表元素最初的排列顺序，而有时候又需要调整排列顺序。Python提供了很多组织列表的方式，可根据具体情况选用。</p><p><strong>永久排序</strong></p><p>可以通过sort()函数对列表进行排序，并且是永久性地修改了列表元素的排列顺序。</p><ul><li><code>sort()</code>:按字母顺序进行排列</li><li><code>sort(reverse=True)</code>:按字母顺序相反的顺序排列</li></ul><p><strong>临时排序</strong></p><p>要保留列表元素原来的排列顺序，同时以特定的顺序呈现它们，可使用函数sorted()。</p><p><strong>倒序打印</strong></p><p>要反转列表元素的排列顺序，可使用方法reverse()，永久性地修改列表元素的排列顺序，但可随时恢复到原来的排列顺序，为此只需对列表再次调用reverse()即可。</p><p><strong>确定列表的长度</strong></p><p>使用函数len()可快速获悉列表的长度</p><h2 id="4-操作列表"><a href="#4-操作列表" class="headerlink" title="4.操作列表"></a>4.操作列表</h2><p>如何<strong>遍历</strong>整个列表，这只需要几行代码，无论列表有多长。循环让你能够对列表的每个元素都采取一个或一系列相同的措施，从而高效地处理任何长度的列表，包括包含数千乃至数百万个元素的列表。</p><h3 id="4-1遍历整个列表"><a href="#4-1遍历整个列表" class="headerlink" title="4.1遍历整个列表"></a>4.1遍历整个列表</h3><p><strong>for循环</strong></p><ul><li>通过使用for循环，实现对列表的快速遍历。</li><li>在for循环中，可对每个元素执行任何操作。</li><li>在for循环后面，没有缩进的代码都只执行一次，而不会重复执行。</li></ul><h3 id="4-2避免缩进错误"><a href="#4-2避免缩进错误" class="headerlink" title="4.2避免缩进错误"></a>4.2避免缩进错误</h3><p>Python根据缩进来判断代码行与前一个代码行的关系。</p><h3 id="4-3创建数值列表"><a href="#4-3创建数值列表" class="headerlink" title="4.3创建数值列表"></a>4.3创建数值列表</h3><p>列表非常适合用于存储数字集合，而Python提供了很多工具，可帮助你高效地处理数字列表。</p><p><strong>range()函数</strong></p><p>函数range()让你能够轻松地生成一系列的数字。例如下面的语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(value)<br></code></pre></td></tr></table></figure><p>括号内的参数表示从1开始包括1到5结束但不包括5。</p><p><strong>使用range()创建数字列表</strong></p><p>可使用函数list()将range()的结果直接转换为列表，如果将range()作为list()的参数，输出将是一个数字列表。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">numbers=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>))<br><span class="hljs-built_in">print</span>(nubmers)<br></code></pre></td></tr></table></figure><p>numbers是一个列表，预期结果将会是：</p><blockquote><p>[1, 2, 3, 4, 5] </p></blockquote><p><strong>range()函数指定步长</strong></p><p>range()函数还可以指定步长，例如下面的代码将打印1-10内的偶数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">even_numbers=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">11</span>,<span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p>使用函数range()几乎能够创建任何需要的数字集，例如，如何创建一个列表，其中包含前10个整数（即1~10）的平方呢？在Python中，两个星号（**）表示乘方运算。下面的代码演示了如何将前10个整数的平方加入到一个列表中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">squares = []<br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>):<br>    square = value**<span class="hljs-number">2</span><br>    squares.append(square)<br><span class="hljs-built_in">print</span>(squares)<br></code></pre></td></tr></table></figure><p><strong>对数字列表执行简单的统计计算</strong></p><p>有几个专门用于处理数字列表的Python函数。例如，你可以轻松地找出数字列表的最大值、最小值和总和：</p><ul><li>min()</li><li>max()</li><li>sum()</li><li>···</li></ul><p><strong>列表解析</strong></p><p>列表解析将for循环和创建新元素的代码合并成一行，并自动附加新元素，下面这两段代码的结果是一样的：</p><p>使用for循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">squares=[]<br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>):<br>    squares.append(value**<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(squares)<br></code></pre></td></tr></table></figure><p>使用列表解析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">squares = [value**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>)]<br><span class="hljs-built_in">print</span>(squares)<br></code></pre></td></tr></table></figure><p>要使用这种语法，首先指定一个描述性的列表名，如squares；然后，指定一个左方括号，并定义一个表达式，用于生成你要存储到列表中的值。在这个示例中，表达式为value**2，它计算平方值。接下来，编写一个for循环，用于给表达式提供值，再加上右方括号。在这个示例中，for循环为for value in range(1,11)，它将值1~10提供给表达式value**2。请注意，这里的for语句末尾没有冒号。</p><h3 id="4-4使用列表的一部分"><a href="#4-4使用列表的一部分" class="headerlink" title="4.4使用列表的一部分"></a>4.4使用列表的一部分</h3><p>以处理列表的部分元素——Python称之为切片。</p><p><strong>切片</strong></p><p>要创建切片，可指定要使用的第一个元素和最后一个元素的索引要创建切片，可指定要使用的第一个元素和最后一个元素的索引，下面的范例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">players = [<span class="hljs-string">&#x27;charles&#x27;</span>, <span class="hljs-string">&#x27;martina&#x27;</span>, <span class="hljs-string">&#x27;michael&#x27;</span>, <span class="hljs-string">&#x27;florence&#x27;</span>, <span class="hljs-string">&#x27;eli&#x27;</span>] <br><span class="hljs-built_in">print</span>(players[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><ul><li><p>print(players[0:3])表示打印列表的一个切片，包含1-3名队员，输出的也是一个列表；</p></li><li><p>print(players[１:4])表示提取列表第2-4个元素</p></li><li><p>print(players[:4])表示从列表开头到第4个元素</p></li><li><p>print(players[2:])表示从第3个元素到最后</p></li><li><p>print(players[-3:])表示末尾的3个元素</p></li></ul><p><strong>遍历切片</strong></p><p>如果要遍历列表的部分元素，可在for循环中使用切片。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">players = [<span class="hljs-string">&#x27;charles&#x27;</span>, <span class="hljs-string">&#x27;martina&#x27;</span>, <span class="hljs-string">&#x27;michael&#x27;</span>, <span class="hljs-string">&#x27;florence&#x27;</span>, <span class="hljs-string">&#x27;eli&#x27;</span>] <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Here are the first three players on my team:&quot;</span>) <br><span class="hljs-keyword">for</span> player <span class="hljs-keyword">in</span> players[:<span class="hljs-number">3</span>]:<br>    <span class="hljs-built_in">print</span>(player.title())<br></code></pre></td></tr></table></figure><p><strong>复制列表</strong></p><p>要复制列表，可创建一个包含整个列表的切片，方法是同时省略起始索引和终止索引（[:]）。这让Python创建一个始于第一个元素，终止于最后一个元素的切片，即复制整个列表。</p><p>如果使用“&#x3D;”将一个列表赋给另一个列表，其表示的并非是将列表的内容复制到新的列表，仅是将两个列表指向同一个列表的内容。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">my_foods = [<span class="hljs-string">&#x27;pizza&#x27;</span>, <span class="hljs-string">&#x27;falafel&#x27;</span>, <span class="hljs-string">&#x27;carrot cake&#x27;</span>]<br>friend_foods = my_foods<br></code></pre></td></tr></table></figure><p>这里将my_foods赋给friend_foods，而不是将my_foods的副本存储到friend_foods。这种语法实际上是让Python将新变量friend_foods关联到包含在my_foods中的列表，因此这两个变量都指向同一个列表。鉴于此，当我们将’cannoli’添加到my_foods中时，它也将出现在friend_foods中；同样，虽然’ice cream’好像只被加入到了friend_foods中，但它也将出现在这两个列表中。输出表明，两个列表是相同的。</p><h3 id="4-5元组"><a href="#4-5元组" class="headerlink" title="4.5元组"></a>4.5元组</h3><p>Python将不能修改的值称为不可变的，而不可变的列表被称为元组。</p><p><strong>定义元组</strong></p><p>元组看起来犹如列表，但<strong>使用圆括号而不是方括号来标识</strong>。定义元组后，就可以使用索引来访问其元素，就像访问列表元素一样。</p><p><strong>遍历元组中的所有值</strong></p><p>像列表一样，也可以使用for循环来遍历元组中的所有值。</p><p><strong>修改元组变量</strong></p><p>虽然不能修改元组的元素，但可以给存储元组的变量赋值，从而实现重新定义元组。</p><p>相比于列表，元组是更简单的数据结构。如果需要存储的一组值在程序的整个生命周期内都不变，可使用元组。</p><h2 id="5-if语句"><a href="#5-if语句" class="headerlink" title="5.if语句"></a>5.if语句</h2><h3 id="5-1条件测试"><a href="#5-1条件测试" class="headerlink" title="5.1条件测试"></a>5.1条件测试</h3><p>每条if语句的核心都是一个值为True或False的表达式，这种表达式被称为条件测试。</p><p>Python根据条件测试的值为True还是False来决定是否执行if语句中的代码。如果条件测试的值为True，Python就执行紧跟在if语句后面的代码；如果为False，Python就忽略这些代码。</p><p><strong>检查是否相等</strong></p><p>使用两个等（&#x3D;&#x3D;）来进行相等判断，<code>==</code>运算符两边的值相等时返回True，否则返回False。</p><p><strong>检查是否相等时不考虑大小写</strong></p><p>在Python中检查是否相等时区分大小写，如果在判断时不需要考虑大小写，那我们可使用lower()函数后再进行比较。常见的场景类似如下：</p><blockquote><p>网站采用类似的方式让用户输入的数据符合特定的格式。例如，网站可能使用类似的测试来确保用户名是独一无二的，而并非只是与另一个用户名的大小写不同。用户提交新的用户名时，将把它转换为小写，并与所有既有用户名的小写版本进行比较。执行这种检查时，如果已经有用户名’john’（不管大小写如何），则用户提交用户名’John’时将遭到拒绝。</p></blockquote><p><strong>检查是否不相等</strong></p><p>使用惊叹号和等号(!&#x3D;)来表示不等于。</p><p><strong>比较数字</strong></p><p>条件语句中可包含各种数学比较，如小于、小于等于、大于、大于等于：</p><ul><li>&#x3D;</li><li>&lt;&#x3D;</li><li>&gt;</li><li>&gt;&#x3D;</li><li>!&#x3D;</li></ul><p><strong>检查多个条件</strong></p><p>你可能想同时检查多个条件，例如，有时候你需要在两个条件都为True时才执行相应的操作，而有时候你只要求一个条件为True时就执行相应的操作。在这些情况下，关键字and和or可助你一臂之力。</p><ul><li><code>and</code>:只有两个都为True时才为True</li><li><code>or</code>:只要有一个为True时就为True，两个条件都为False是才返回False</li></ul><p><strong>检查特定值是否包含在列表中</strong></p><p>要判断特定的值是否已包含在列表中，可使用关键字<code>in</code></p><p><strong>检查特定值是否不包含在列表中</strong></p><p>要判断特定的值是否<strong>不包含</strong>在列表中，可使用关键字<code>not in</code></p><p><strong>布尔表达式</strong></p><p>布尔表达式，是条件测试的别名。与条件表达式一样，布尔表达式的结果要么为True，要么为False。</p><h3 id="5-2-if语句"><a href="#5-2-if语句" class="headerlink" title="5.2 if语句"></a>5.2 if语句</h3><p><strong>if</strong></p><p>在if语句中，缩进的作用与for循环中相同。如果测试通过了，将执行if语句后面所有缩进的代码行，否则将忽略它们</p><p><strong>if-else</strong></p><p>if-else语句块类似于简单的if语句，但其中的else语句让你能够指定条件测试未通过时要执行的操作。</p><p>if-else结构非常适合用于要让Python执行两种操作之一的情形。在这种简单的if-else结构中，总是会执行两个操作中的一个。</p><p><strong>if-elif-else</strong></p><p>经常需要检查超过两个的情形，为此可使用Python提供的if-elif-else结构。</p><p>Python只执行if-elif-else结构中的一个代码块，它依次检查每个条件测试，直到遇到通过了的条件测试。</p><p><strong>省略else代码块</strong></p><p>Python并不要求if-elif结构后面必须有else代码块。</p><p>else是一条包罗万象的语句，只要不满足任何if或elif中的条件测试，其中的代码就会执行，这可能会引入无效甚至恶意的数据。</p><p><strong>测试多个条件</strong></p><p>在可能有多个条件为True，且你需要在每个条件为True时都采取相应措施时，适合使用这种方法。</p><h3 id="5-4使用if语句处理列表"><a href="#5-4使用if语句处理列表" class="headerlink" title="5.4使用if语句处理列表"></a>5.4使用if语句处理列表</h3><p>通过结合使用if语句和列表，可完成一些有趣的任务：对列表中特定的值做特殊处理。</p><h3 id="5-5设置if语句的格式"><a href="#5-5设置if语句的格式" class="headerlink" title="5.5设置if语句的格式"></a>5.5设置if语句的格式</h3><p>在条件测试的格式设置方面，PEP 8提供的唯一建议是，在诸如&#x3D;&#x3D;、&gt;&#x3D;和&lt;&#x3D;等比较运算符两边各添加一个空格。</p><h2 id="6-字典"><a href="#6-字典" class="headerlink" title="6.字典"></a>6.字典</h2><p>在Python中，字典是一系列键—值对。每个键都与一个值相关联，你可以使用键来访问与之相关联的值。与键相关联的值可以是数字、字符串、列表乃至字典。事实上，可将任何Python对象用作字典中的值。</p><p><strong>在Python中，字典用放在花括号{}中的一系列键—值对表示</strong></p><p>键—值对是两个相关联的值。指定键时，Python将返回与之相关联的值。键和值之间用冒号分隔，而键—值对之间用逗号分隔。在字典中，你想<strong>存储多少个键—值对都可以</strong>。</p><h3 id="6-1使用字典"><a href="#6-1使用字典" class="headerlink" title="6.1使用字典"></a>6.1使用字典</h3><p><strong>添加键-值对</strong></p><p>字典是一种动态结构，可随时在其中添加键—值对。要添加键—值对，可依次指定字典名、用方括号括起的键和相关联的值。</p><p><strong>修改字典的值</strong></p><p>要修改字典中的值，可依次指定字典名、用方括号括起的键以及与该键相关联的新值。</p><p><strong>删除键-值对</strong></p><p>对于字典中不再需要的信息，可使用del语句将相应的键—值对彻底删除。<strong>使用del语句时，必须指定字典名和要删除的键。</strong></p><p><strong>由类似对象组成的字典</strong></p><p>字典存储的是一个对象的多种信息，但你也可以使用字典来存储众多对象的同一种信息。</p><p>确定需要使用多行来定义字典时，在输入左花括号后按回车键，再在下一行缩进四个空格，指定第一个键—值对，并在它后面加上一个逗号</p><h3 id="6-2遍历字典"><a href="#6-2遍历字典" class="headerlink" title="6.2遍历字典"></a>6.2遍历字典</h3><p>通过for语句结合字典的方法items()，实现对字典的遍历，范例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> xxx.items()<br></code></pre></td></tr></table></figure><p>在不需要使用字典的值时，可以使用方法keys()获取字典中的key，当然在实际应用中，可以不加上keys()方法。</p><p><strong>按顺序遍历字典中的所有键</strong></p><p>字典总是明确地记录键和值之间的关联关系，但获取字典的元素时，获取顺序是不可预测的。要以特定的顺序返回元素，一种办法是在for循环中对返回的键进行排序，为此，可使用函数sorted()来获得按特定顺序排列的键列表的副本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(dictionary.keys()):<br></code></pre></td></tr></table></figure><p><strong>遍历字典中的所有值</strong></p><p>如果你感兴趣的主要是字典包含的值，可使用方法values()，它返回一个值列表，而不包含任何键。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> dictionary.values():<br></code></pre></td></tr></table></figure><p>这种做法提取字典中所有的值，而没有考虑是否重复。涉及的值很少时，这也许不是问题，但如果被调查者很多，最终的列表可能包含大量的重复项。为剔除重复项，可使用集合（set）。</p><p>集合类似于列表，但每个元素都必须是独一无二的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span>(dictionary.values()):<br></code></pre></td></tr></table></figure><p>通过对包含重复元素的列表调用set()，可让Python找出列表中独一无二的元素，并使用这些元素来创建一个集合.</p><h3 id="6-4嵌套"><a href="#6-4嵌套" class="headerlink" title="6.4嵌套"></a>6.4嵌套</h3><p>有时候，需要将一系列字典存储在列表中，或将列表作为值存储在字典中，这称为嵌套。你可以在列表中嵌套字典、在字典中嵌套列表甚至在字典中嵌套字典。</p><p><strong>字典列表</strong></p><p>经常需要在列表中包含大量的字典，而其中每个字典都包含特定对象的众多信息。例如，你可能需要为网站的每个用户创建一个字典，并将这些字典存储在一个名为users的列表中。在这个列表中，所有字典的结构都相同，因此你可以遍历这个列表，并以相同的方式处理其中的每个字典。</p><p><strong>在字典中存储列表</strong></p><p>有时候，需要将列表存储在字典中，而不是将字典存储在列表中。</p><p>每当需要在字典中将一个键关联到多个值时，都可以在字典中嵌套一个列表</p><p><strong>在字典中存储字典</strong></p><p>可在字典中嵌套字典，但这样做时，代码可能很快复杂起来。</p><h2 id="7-用户输入和while循环"><a href="#7-用户输入和while循环" class="headerlink" title="7.用户输入和while循环"></a>7.用户输入和while循环</h2><h3 id="7-1函数input-的工作原理"><a href="#7-1函数input-的工作原理" class="headerlink" title="7.1函数input()的工作原理"></a>7.1函数input()的工作原理</h3><p>函数input()让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其存储在一个变量中，以方便你使用。</p><p><strong>编写清晰的程序</strong></p><p>每当你使用函数input()时，都应指定清晰而易于明白的提示，准确地指出你希望用户提供什么样的信息——指出用户该输入任何信息的提示都行。</p><p>有时候，提示可能超过一行，例如，你可能需要指出获取特定输入的原因。在这种情况下，可将提示存储在一个变量中，再将该变量传递给函数input()，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">prompt = <span class="hljs-string">&quot;If you tell us who you are, we can personalize the messages you see.&quot;</span> <br>prompt += <span class="hljs-string">&quot;\nWhat is your first name? &quot;</span><br>name = <span class="hljs-built_in">input</span>(prompt)<br></code></pre></td></tr></table></figure><p><strong>使用int()来获取数值输入</strong></p><p>使用函数input()时，Python将用户输入解读为字符串，如何输入的数字需要进行后续的计算时，可使用函数int()，它让Python将输入视为数值。</p><p>函数int()将数字的字符串表示转换为数值表示。</p><p><strong>求模运算符</strong></p><p>处理数值信息时，求模运算符（%）是一个很有用的工具，它将两个数相除并返回余数。</p><p>求模运算符不会指出一个数是另一个数的多少倍，而只指出余数是多少。</p><h3 id="7-2while循环"><a href="#7-2while循环" class="headerlink" title="7.2while循环"></a>7.2while循环</h3><p>for循环用于针对集合中的每个元素都执行一个代码块，而while循环不断地运行，直到指定的条件不满足为止。</p><p>在要求很多条件都满足才继续运行的程序中，可定义一个变量，用于判断整个程序是否处于</p><p>活动状态。这个变量被称为标志，充当了程序的交通信号灯。你可让程序在标志为True时继续运行，并在任何事件导致标志的值为False时让程序停止运行。这样，在while语句中就只需检查一个条件——标志的当前值是否为True，并将所有测试（是否发生了应将标志设置为False的事件）都放在其他地方，从而让程序变得更为整洁。</p><p><strong>使用break退出循环</strong></p><p>要立即退出while循环，不再运行循环中余下的代码，也不管条件测试的结果如何，可使用break语句。break语句用于控制程序流程，可使用它来控制哪些代码行将执行，哪些代码行不执行，从而让程序按你的要求执行你要执行的代码。</p><p><strong>注意</strong> 在任何Python循环中都可使用break语句。例如，可使用break语句来退出遍历列表或字典的for循环。</p><p><strong>在循环中使用 continue</strong></p><p>要返回到循环开头，并根据条件测试结果决定是否继续执行循环，可使用continue语句，它不像break语句那样不再执行余下的代码并退出整个循环，而是退出当前循环，并继续执行下一个循环</p><p><strong>避免无限循环</strong></p><p>每个while循环都必须有停止运行的途径，这样才不会没完没了地执行下去</p><h3 id="7-3使用while循环来处理列表和字典"><a href="#7-3使用while循环来处理列表和字典" class="headerlink" title="7.3使用while循环来处理列表和字典"></a>7.3使用while循环来处理列表和字典</h3><p>for循环是一种遍历列表的有效方式，但在for循环中不应修改列表，否则将导致Python难以跟踪其中的元素。要在遍历列表的同时对其进行修改，可使用while循环。通过将while循环同列表和字典结合起来使用，可收集、存储并组织大量输入，供以后查看和显示。</p><p><strong>在列表之间移动元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 首先，创建一个待验证用户列表</span><br><span class="hljs-comment"># 和一个用于存储已验证用户的空列表</span><br>unconfirmed_users = [<span class="hljs-string">&#x27;alice&#x27;</span>, <span class="hljs-string">&#x27;brian&#x27;</span>, <span class="hljs-string">&#x27;candace&#x27;</span>] <br>confirmed_users = [] <br><span class="hljs-comment"># 验证每个用户，直到没有未验证用户为止</span><br><span class="hljs-comment"># 将每个经过验证的列表都移到已验证用户列表中</span><br><span class="hljs-keyword">while</span> unconfirmed_users: <br>current_user = unconfirmed_users.pop()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Verifying user: &quot;</span> + current_user.title()) <br>confirmed_users.append(current_user) <br><span class="hljs-comment"># 显示所有已验证的用户</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nThe following users have been confirmed:&quot;</span>) <br><span class="hljs-keyword">for</span> confirmed_user <span class="hljs-keyword">in</span> confirmed_users: <br><span class="hljs-built_in">print</span>(confirmed_user.title())<br></code></pre></td></tr></table></figure><p><strong>删除包含特定值的所有列表元素</strong></p><p>我们使用函数remove()来删除列表中的特定值，这之所以可行，是因为要删除的值在列表中只出现了一次。如果要删除列表中所有包含特定值的元素，该怎么办呢？</p><p>假设你有一个宠物列表，其中包含多个值为’cat’的元素。要删除所有这些元素，可不断运行一个while循环，直到列表中不再包含值’cat’，如下所示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">pets = [<span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;goldfish&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;rabbit&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>] <br><span class="hljs-built_in">print</span>(pets) <br><span class="hljs-keyword">while</span> <span class="hljs-string">&#x27;cat&#x27;</span> <span class="hljs-keyword">in</span> pets: <br>    pets.remove(<span class="hljs-string">&#x27;cat&#x27;</span>) <br> <br><span class="hljs-built_in">print</span>(pets)<br></code></pre></td></tr></table></figure><p><strong>使用用户输入来填充字典</strong></p><p>看范例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">responses = &#123;&#125; <br><span class="hljs-comment"># 设置一个标志，指出调查是否继续</span><br>polling_active = <span class="hljs-literal">True</span> <br><span class="hljs-keyword">while</span> polling_active: <br> <span class="hljs-comment"># 提示输入被调查者的名字和回答</span><br>    name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\nWhat is your name? &quot;</span>) <br>    response = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Which mountain would you like to climb someday? &quot;</span>) <br> <br> <span class="hljs-comment"># 将答卷存储在字典中</span><br>    responses[name] = response <br> <br> <span class="hljs-comment"># 看看是否还有人要参与调查</span><br>    repeat = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Would you like to let another person respond? (yes/ no) &quot;</span>) <br>    <span class="hljs-keyword">if</span> repeat == <span class="hljs-string">&#x27;no&#x27;</span>: <br>        polling_active = <span class="hljs-literal">False</span> <br> <br><span class="hljs-comment"># 调查结束，显示结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n--- Poll Results ---&quot;</span>) <br><span class="hljs-keyword">for</span> name, response <span class="hljs-keyword">in</span> responses.items(): <br>    <span class="hljs-built_in">print</span>(name + <span class="hljs-string">&quot; would like to climb &quot;</span> + response + <span class="hljs-string">&quot;.&quot;</span>)<br></code></pre></td></tr></table></figure><p>这个程序首先定义了一个空字典（responses），并设置了一个标志（polling_active），用于指出调查是否继续。只要polling_active为True，Python就运行while循环中的代码。</p><h2 id="8-函数"><a href="#8-函数" class="headerlink" title="8.函数"></a>8.函数</h2><p>函数让你能够将程序分成多个很小的部分，其中每部分都负责完成一项具体任务。你可以根据需要调用同一个函数任意次，还可将函数存储在独立的文件中。</p><p>使用函数可让你编写的代码效率更高，更容易维护和排除故障，还可在众多不同的程序中重用。</p><h3 id="8-1定义函数"><a href="#8-1定义函数" class="headerlink" title="8.1定义函数"></a>8.1定义函数</h3><p>文档字符串用三引号括起（”””这是函数的说明”””），Python使用它们来生成有关程序中函数的文档。</p><ul><li>形参——函数完成其工作所需的一项信息</li><li>实参——是调用函数时传递给函数的信息</li></ul><h3 id="8-2传递参数"><a href="#8-2传递参数" class="headerlink" title="8.2传递参数"></a>8.2传递参数</h3><p>鉴于函数定义中可能包含多个形参，因此函数调用中也可能包含多个实参。向函数传递实参的方式很多，可使用位置实参，这要求实参的顺序与形参的顺序相同；也可使用关键字实参，其中每个实参都由变量名和值组成；还可使用列表和字典。</p><p><strong>位置实参</strong></p><p>你调用函数时，Python必须将函数调用中的每个实参都关联到函数定义中的一个形参。为此，最简单的关联方式是基于实参的顺序。这种关联方式被称为位置实参。</p><p><strong>关键字实参</strong></p><p>关键字实参是传递给函数的名称—值对。你直接在实参中将名称和值关联起来了，因此向函数传递实参时不会混淆（不会得到名为Hamster的harry这样的结果）。关键字实参让你无需考虑函数调用中的实参顺序，还清楚地指出了函数调用中各个值的用途。</p><p>关键字实参的顺序无关紧要，因为Python知道各个值该存储到哪个形参中。</p><p><strong>默认值</strong></p><p>编写函数时，可给每个形参指定默认值。在调用函数中给形参提供了实参时，Python将使用指定的实参值；否则，将使用形参的默认值。因此，给形参指定默认值后，可在函数调用中省略相应的实参。使用默认值可简化函数调用，还可清楚地指出函数的典型用法。</p><h3 id="8-3返回值"><a href="#8-3返回值" class="headerlink" title="8.3返回值"></a>8.3返回值</h3><p>函数并非总是直接显示输出，相反，它可以处理一些数据，并返回一个或一组值。函数返回的值被称为返回值。</p><p>在函数中，可使用return语句将值返回到调用函数的代码行。返回值让你能够将程序的大部分繁重工作移到函数中去完成，从而简化主程序。</p><p>有时候，需要让实参变成可选的，这样使用函数的人就只需在必要时才提供额外的信息。可使用默认值来让实参变成可选的。</p><p>函数可返回任何类型的值，包括列表和字典等较复杂的数据结构。</p><h3 id="8-4传递列表"><a href="#8-4传递列表" class="headerlink" title="8.4传递列表"></a>8.4传递列表</h3><p>向函数传递列表很有用，这种列表包含的可能是名字、数字或更复杂的对象（如字典）。将列表传递给函数后，函数就能直接访问其内容。</p><p><strong>在函数中修改列表</strong></p><p>将列表传递给函数后，函数就可对其进行修改。在函数中对这个列表所做的任何修改都是永久性的，这让你能够高效地处理大量的数据。</p><ul><li><strong>每个函数都应只负责一项具体的工作</strong></li></ul><p><strong>禁止函数修改列表</strong></p><p>可向函数传递列表的副本而不是原件；这样函数所做的任何修改都只影响副本，而丝毫不影响原件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">function_name(list_name[:])<br></code></pre></td></tr></table></figure><h3 id="8-5传递任意数量的实参"><a href="#8-5传递任意数量的实参" class="headerlink" title="8.5传递任意数量的实参"></a>8.5传递任意数量的实参</h3><p>有时候，你预先不知道函数需要接受多少个实参，好在Python允许函数从调用语句中收集任意数量的实参</p><p>用<code>*形参名</code>的形参表示可以接收任意数量的实参，并装到元组中。注意，Python将实参封装到一个元组中，即便函数只收到一个值也如此。范例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_pizza</span>(<span class="hljs-params">*toppings</span>): <br> <span class="hljs-string">&quot;&quot;&quot;概述要制作的比萨&quot;&quot;&quot;</span> <br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nMaking a pizza with the following toppings:&quot;</span>) <br>     <span class="hljs-keyword">for</span> topping <span class="hljs-keyword">in</span> toppings: <br>         <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;- &quot;</span> + topping) <br> <br>make_pizza(<span class="hljs-string">&#x27;pepperoni&#x27;</span>) <br>make_pizza(<span class="hljs-string">&#x27;mushrooms&#x27;</span>, <span class="hljs-string">&#x27;green peppers&#x27;</span>, <span class="hljs-string">&#x27;extra cheese&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>如果要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后</strong>。Python先匹配位置实参和关键字实参，再将余下的实参都收集到最后一个形参中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_pizza</span>(<span class="hljs-params">size, *toppings</span>): <br> <span class="hljs-string">&quot;&quot;&quot;概述要制作的比萨&quot;&quot;&quot;</span> <br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nMaking a &quot;</span> + <span class="hljs-built_in">str</span>(size) + <br>         <span class="hljs-string">&quot;-inch pizza with the following toppings:&quot;</span>) <br>     <span class="hljs-keyword">for</span> topping <span class="hljs-keyword">in</span> toppings: <br>         <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;- &quot;</span> + topping) <br> <br>make_pizza(<span class="hljs-number">16</span>, <span class="hljs-string">&#x27;pepperoni&#x27;</span>) <br>make_pizza(<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;mushrooms&#x27;</span>, <span class="hljs-string">&#x27;green peppers&#x27;</span>, <span class="hljs-string">&#x27;extra cheese&#x27;</span>)<br></code></pre></td></tr></table></figure><p>有时候，需要接受任意数量的实参，但预先不知道传递给函数的会是什么样的信息。在这种情况下，可将函数编写成能够接受任意数量的键—值对——调用语句提供了多少就接受多少。</p><p><strong>用<code>**形参</code>接收任意数量的关键字实参</strong>,范例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_profile</span>(<span class="hljs-params">first, last, **user_info</span>): <br>    <span class="hljs-string">&quot;&quot;&quot;创建一个字典，其中包含我们知道的有关用户的一切&quot;&quot;&quot;</span> <br>    profile = &#123;&#125; <br>    profile[<span class="hljs-string">&#x27;first_name&#x27;</span>] = first <br>    profile[<span class="hljs-string">&#x27;last_name&#x27;</span>] = last <br>    <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> user_info.items():<br>        profile[key] = value <br>    <span class="hljs-keyword">return</span> profile <br>user_profile = build_profile(<span class="hljs-string">&#x27;albert&#x27;</span>, <span class="hljs-string">&#x27;einstein&#x27;</span>, location=<span class="hljs-string">&#x27;princeton&#x27;</span>, field=<span class="hljs-string">&#x27;physics&#x27;</span>) <br><span class="hljs-built_in">print</span>(user_profile)<br></code></pre></td></tr></table></figure><p>形参**user_info中的两个星号让Python创建一个名为user_info的空字典，并将收到的所有名称—值对都封装到这个字典中</p><h3 id="8-6将函数存储在模块中"><a href="#8-6将函数存储在模块中" class="headerlink" title="8.6将函数存储在模块中"></a>8.6将函数存储在模块中</h3><p>函数的优点之一是，使用它们可将代码块与主程序分离。通过给函数指定描述性名称，可让主程序容易理解得多。你还可以更进一步，将函数存储在被称为模块的独立文件中，再将模块导入到主程序中。import语句允许在当前运行的程序文件中使用模块中的代码。</p><p><strong>导入整体模块</strong></p><p>要让函数是可导入的，得先创建模块。模块是扩展名为.py的文件，包含要导入到程序中的代码。</p><p>只需编写一条import语句并在其中指定模块名，就可在程序中使用该模块中的所有函数。如果你使用这种import语句导入了名为module_name.py的整个模块，就可使用下面的语法来使用其中任何一个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">module_name.fuction_name()<br></code></pre></td></tr></table></figure><p><strong>导入特定的函数</strong></p><p>还可以导入模块中的特定函数，语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> module_name <span class="hljs-keyword">import</span> fuction_name<br></code></pre></td></tr></table></figure><p>若使用这种语法，调用函数时就无需使用句点，与使用主体程序中的函数是一样的用法。</p><p><strong>使用as给函数指定别名</strong></p><p>如果要导入的函数的名称可能与程序中现有的名称冲突，或者函数的名称太长，可指定简短而独一无二的别名——函数的另一个名称，类似于外号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> module_name <span class="hljs-keyword">import</span> fuction_name <span class="hljs-keyword">as</span> fn<br></code></pre></td></tr></table></figure><p><strong>使用as给模块指定别名</strong></p><p>还可以给模块指定别名。通过给模块指定简短的别名（如给模块pizza指定别名p），让你能够更轻松地调用模块中的函数。引用模块内的函数的名称还是没有变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> module_name <span class="hljs-keyword">as</span> mn<br></code></pre></td></tr></table></figure><p><strong>导入模块中的所有函数</strong></p><p>使用星号（*）运算符可让Python导入模块中的所有函数。</p><p>import语句中的星号让Python将模块pizza中的每个函数都复制到这个程序文件中。由于导入了每个函数，可通过名称来调用每个函数，而无需使用句点表示法。但是强烈不建议这么做。</p><p><em>最佳的做法是，要么只导入你需要使用的函数，要么导入整个模块并使用句点表示法</em></p><h3 id="8-7函数编写指南"><a href="#8-7函数编写指南" class="headerlink" title="8.7函数编写指南"></a>8.7函数编写指南</h3><ul><li>编写函数时，需要牢记几个细节。应给函数指定描述性名称，且只在其中使用小写字母和下划线。</li><li>每个函数都应包含简要地阐述其功能的注释，该注释应紧跟在函数定义后面，并采用文档字符串格式。</li><li>给形参指定默认值时，等号两边不要有空格。</li><li>如果程序或模块包含多个函数，可使用两个空行将相邻的函数分开，这样将更容易知道前一个函数在什么地方结束，下一个函数从什么地方开始。</li><li>所有的import语句都应放在文件开头，唯一例外的情形是，在文件开头使用了注释来描述整个程序。</li></ul><h2 id="9-类"><a href="#9-类" class="headerlink" title="9.类"></a>9.类</h2><p>Python 中的类（Class）是一种面向对象编程（Object-Oriented Programming，简称 OOP）的概念，它允许我们通过创建对象来组织和管理代码。类是一种抽象的数据类型，用于封装数据和行为。</p><p>类定义了一组属性和方法，描述了对象的特征和行为。对象是类的实例，通过实例化类可以创建具体的对象。</p><p>下面是一个简单的类的示例，以便更好地理解：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># 定义一个简单的类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-comment"># 类属性</span><br>    species = <span class="hljs-string">&#x27;Human&#x27;</span><br><br>    <span class="hljs-comment"># 初始化方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, name, age</span>):<br>        <span class="hljs-comment"># 实例属性</span><br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br><br>    <span class="hljs-comment"># 实例方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        print(f<span class="hljs-string">&quot;Hello, my name is &#123;self.name&#125; and I&#x27;m &#123;self.age&#125; years old.&quot;</span>)<br><br><span class="hljs-comment"># 创建对象</span><br>person1 = <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">25</span>)<br>person2 = <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">30</span>)<br><br><span class="hljs-comment"># 调用对象的方法</span><br>person1.greet()  <span class="hljs-comment"># 输出: Hello, my name is Alice and I&#x27;m 25 years old.</span><br>person2.greet()  <span class="hljs-comment"># 输出: Hello, my name is Bob and I&#x27;m 30 years old.</span><br></code></pre></td></tr></table></figure><p>在上面的示例中，我们定义了一个名为 <code>Person</code> 的类。它具有类属性 <code>species</code>，表示人类这个类别的物种。类还定义了一个初始化方法 <code>__init__()</code>，它在创建对象时被调用，用于设置对象的初始状态。<code>__init__()</code> 方法的第一个参数是 <code>self</code>，它表示类的实例本身。通过 <code>self</code> 可以访问和设置对象的属性。</p><p>类还定义了一个实例方法 <code>greet()</code>，用于打印个人信息。在调用实例方法时，不需要显式传递 <code>self</code> 参数，Python 会自动将对象实例作为第一个参数传递给方法。</p><p>通过创建类的实例，我们可以创建具体的对象。在上面的示例中，我们创建了两个 <code>Person</code> 类的对象 <code>person1</code> 和 <code>person2</code>。每个对象都具有自己的属性值，可以调用对象的方法来执行特定的操作。</p><p>类是面向对象编程中的核心概念之一，它提供了一种组织和封装代码的方式，使得代码更具可维护性、可扩展性和复用性。通过定义类和创建对象，我们可以按照面向对象的思想来编写更优雅和灵活的代码。</p><h3 id="9-1创建和使用类"><a href="#9-1创建和使用类" class="headerlink" title="9.1创建和使用类"></a>9.1创建和使用类</h3><ul><li>根据约定，在Python中，首字母大写的名称指的是类。</li><li>类中的函数称为方法；你前面学到的有关函数的一切都适用于方法，就目前而言，唯一重要的差别是调用方法的方式</li><li>_<em>init</em>_()是一个特殊的方法，创建新实例时，Python都会自动运行它</li><li>_<em>init</em>_()的形参self必不可少，还必须位于其他形参的前面</li><li>每个与类相关联的方法调用都自动传递实参self，它是一个指向实例本身的引用，让实例能够访问类中的属性和方法</li><li>以self为前缀的变量都可供类中的所有方法使用，我们还可以通过类的任何实例来访问这些变量</li><li>可将类视为有关如何创建实例的说明</li><li>首字母大写的名称指的是类，而小写的名称指的是根据类创建的实例</li></ul><h3 id="9-2使用类和实例"><a href="#9-2使用类和实例" class="headerlink" title="9.2使用类和实例"></a>9.2使用类和实例</h3><p>类中的每个属性都必须有初始值，哪怕这个值是0或空字符串。在有些情况下，如设置默认值时，在方法__init__()内指定这种初始值是可行的；如果你对某个属性这样做了，就无需包含为它提供初始值的形参。</p><p>可以以三种不同的方式修改属性的值：直接通过实例进行修改；通过方法进行设置；通过方法进行递增（增加特定的值）。</p><p><strong>直接修改属性的值</strong></p><p>要修改属性的值，最简单的方式是通过实例直接访问它。</p><p><strong>通过方法修改属性的值</strong></p><p><strong>通过方法对属性的值进行递增</strong></p><p>有时候需要将属性值递增特定的量，而不是将其设置为全新的值</p><h3 id="9-3继承"><a href="#9-3继承" class="headerlink" title="9.3继承"></a>9.3继承</h3><p>编写类时，并非总是要从空白开始。如果你要编写的类是另一个现成类的特殊版本，可使用继承。一个类继承另一个类时，它将自动获得另一个类的所有属性和方法；原有的类称为父类，而新类称为子类。子类继承了其父类的所有属性和方法，同时还可以定义自己的属性和方法。</p><p><strong>子类的方法_<em>init</em>_()</strong></p><p>创建子类的实例时，Python首先需要完成的任务是给父类的所有属性赋值。为此，子类的方法__init__()需要父类施以援手。</p><p>看下面这个范例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        self.make = make<br>        self.model = model<br>        self.year = year<br>        self.odometer_reading = <span class="hljs-number">0</span><br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_descriptive_name</span>(<span class="hljs-params">self</span>):<br>        long_name = <span class="hljs-built_in">str</span>(self.year) + <span class="hljs-string">&#x27; &#x27;</span> + self.make + <span class="hljs-string">&#x27; &#x27;</span> + self.model<br>        <span class="hljs-keyword">return</span> long_name.title()<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_odometer</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This car has &quot;</span> + <span class="hljs-built_in">str</span>(self.odometer_reading) + <span class="hljs-string">&quot; miles on it.&quot;</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_odometer</span>(<span class="hljs-params">self, mileage</span>):<br>        <span class="hljs-keyword">if</span> mileage &gt;= self.odometer_reading:<br>            self.odometer_reading = mileage<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">increment_odometer</span>(<span class="hljs-params">self, miles</span>):<br>        self.odometer_reading += miles<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElectricCar</span>(<span class="hljs-title class_ inherited__">Car</span>): <br>    <span class="hljs-string">&quot;&quot;&quot;电动汽车的独特之处&quot;&quot;&quot;</span> <br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>): <br>        <span class="hljs-string">&quot;&quot;&quot;初始化父类的属性&quot;&quot;&quot;</span> <br>        <span class="hljs-built_in">super</span>().__init__(make, model, year)<br></code></pre></td></tr></table></figure><ul><li>创建子类时，父类必须包含在当前文件中，且位于子类前面</li><li>定义子类时，必须在括号内指定父类的名称</li><li>方法__init__()接受创建Car实例所需的信息</li><li>super()是一个特殊函数，帮助Python将父类和子类关联起来。这行代码让Python调用ElectricCar的父类的方法__init__()，让ElectricCar实例包含父类的所有属性。父类也称为超类（superclass），名称super因此而得名</li></ul><p><strong>给子类定义属性和方法</strong></p><p>让一个类继承另一个类后，可添加区分子类和父类所需的新属性和方法。</p><p><strong>重写父类的方法</strong></p><p>对于父类的方法，只要它不符合子类模拟的实物的行为，都可对其进行重写。为此，可在子类中定义一个这样的方法，即它与要重写的父类方法同名。这样，Python将不会考虑这个父类方法，而只关注你在子类中定义的相应方法。</p><p><em>使用继承时，可让子类保留从父类那里继承而来的精华，并剔除不需要的糟粕</em></p><p><strong>将实例用作属性</strong></p><p>使用代码模拟实物时，你可能会发现自己给类添加的细节越来越多：属性和方法清单以及文件都越来越长。在这种情况下，可能需要将类的一部分作为一个独立的类提取出来。你可以将大型类拆分成多个协同工作的小类。</p><p>例如，不断给ElectricCar类添加细节时，我们可能会发现其中包含很多专门针对汽车电瓶的属性和方法。在这种情况下，我们可将这些属性和方法提取出来，放到另一个名为Battery的类中，并将一个Battery实例用作ElectricCar类的一个属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        self.make = make<br>        self.model = model<br>        self.year = year<br>        self.odometer_reading = <span class="hljs-number">0</span><br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_descriptive_name</span>(<span class="hljs-params">self</span>):<br>        long_name = <span class="hljs-built_in">str</span>(self.year) + <span class="hljs-string">&#x27; &#x27;</span> + self.make + <span class="hljs-string">&#x27; &#x27;</span> + self.model<br>        <span class="hljs-keyword">return</span> long_name.title()<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_odometer</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This car has &quot;</span> + <span class="hljs-built_in">str</span>(self.odometer_reading) + <span class="hljs-string">&quot; miles on it.&quot;</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_odometer</span>(<span class="hljs-params">self, mileage</span>):<br>        <span class="hljs-keyword">if</span> mileage &gt;= self.odometer_reading:<br>            self.odometer_reading = mileage<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">increment_odometer</span>(<span class="hljs-params">self, miles</span>):<br>        self.odometer_reading += miles<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Battery</span>(): <br>    <span class="hljs-string">&quot;&quot;&quot;一次模拟电动汽车电瓶的简单尝试&quot;&quot;&quot;</span> <br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, battery_size=<span class="hljs-number">70</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化电瓶的属性&quot;&quot;&quot;</span> <br>        self.battery_size = battery_size <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">describe_battery</span>(<span class="hljs-params">self</span>): <br>        <span class="hljs-string">&quot;&quot;&quot;打印一条描述电瓶容量的消息&quot;&quot;&quot;</span> <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This car has a &quot;</span> + <span class="hljs-built_in">str</span>(self.battery_size) + <span class="hljs-string">&quot;-kWh battery.&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElectricCar</span>(<span class="hljs-title class_ inherited__">Car</span>): <br>    <span class="hljs-string">&quot;&quot;&quot;电动汽车的独特之处&quot;&quot;&quot;</span> <br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>): <br>        <span class="hljs-string">&quot;&quot;&quot;初始化父类的属性&quot;&quot;&quot;</span> <br>        <span class="hljs-built_in">super</span>().__init__(make, model, year)<br>        self.battery = Battery()<br><br>my_tesla = ElectricCar(<span class="hljs-string">&#x27;tesla&#x27;</span>, <span class="hljs-string">&#x27;model s&#x27;</span>, <span class="hljs-number">2016</span>) <br><span class="hljs-built_in">print</span>(my_tesla.get_descriptive_name()) <br>my_tesla.battery.describe_battery()<br></code></pre></td></tr></table></figure><ul><li>我们定义了一个名为Battery的新类，它没有继承任何类</li><li>法__init__()除self外，还有另一个形参battery_size</li><li>方法describe_battery()也移到了这个类中</li><li>在ElectricCar类中，我们添加了一个名为self.battery的属性。这行代码让Python创建一个新的Battery实例（由于没有指定尺寸，因此为默认值70），并将该实例存储在属性self.battery中</li></ul><h3 id="9-4导入类"><a href="#9-4导入类" class="headerlink" title="9.4导入类"></a>9.4导入类</h3><p>Python允许你将类存储在模块中，然后在主程序中导入所需的模块。</p><ul><li>导入单个类；<code>import module_name import class_name</code></li><li>在一个模块中存储多个类</li><li>从一个模块中导入多个类，从一个模块中导入多个类时，用逗号分隔了各个类;<code>import module_name import class_name1,class_name2</code></li><li>还可以导入整个模块，再使用句点表示法访问需要的类；使用语法<em>module_name.class_name</em>访问需要的类<code>import module_name</code></li><li>导入模块中的所有类；<code>from module_name import *</code> ，强烈不推荐使用这种方式导入类</li><li>在一个模块中导入另一个模块</li></ul><h3 id="9-5Python标准库"><a href="#9-5Python标准库" class="headerlink" title="9.5Python标准库"></a>9.5Python标准库</h3><p>Python标准库是一组模块，安装的Python都包含它。</p><p>可使用标准库中的任何函数和类，为此只需在程序开头包含一条简单的import语句</p><h2 id="10-文件和异常"><a href="#10-文件和异常" class="headerlink" title="10.文件和异常"></a>10.文件和异常</h2><p>学习处理文件和保存数据可让你的程序使用起来更容易：用户将能够选择输入什么样的数据，以及在什么时候输入；用户使用你的程序做一些工作后，可将程序关闭，以后再接着往下做。</p><p>学习处理异常可帮助你应对文件不存在的情形，以及处理其他可能导致程序崩溃的问题。这让你的程序在面对错误的数据时更健壮——不管这些错误数据源自无意的错误，还是源自破坏程序的恶意企图。</p><p>打开文件时，可指定读取模式（’r’）、写入模式（’w’）、附加模式（’a’）或让你能够读取和写入文件的模式（’r+’）。如果你省略了模式实参，Python将以默认的只读模式打开文件。</p><h3 id="10-1从文件中读取数据"><a href="#10-1从文件中读取数据" class="headerlink" title="10.1从文件中读取数据"></a>10.1从文件中读取数据</h3><p><strong>读取整个文件</strong></p><p>函数open()接受一个参数：要打开的文件的名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;pi_digits.txt&#x27;</span>) <span class="hljs-keyword">as</span> file_object: <br>contents = file_object.read() <br><span class="hljs-built_in">print</span>(contents)<br></code></pre></td></tr></table></figure><p>关键字with在不再需要访问文件后将其关闭。在这个程序中，注意到我们调用了open()，但没有调用close()；你也可以调用open()和close()来打开和关闭文件，但这样做时，如果程序存在bug，导致close()语句未执行，文件将不会关闭。</p><p>read()到达文件末尾时返回一个空字符串，而将这个空字符串显示出来时就是一个空行。要删除多出来的空行，可在print语句中使用rstrip()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;pi_digits.txt&#x27;</span>) <span class="hljs-keyword">as</span> file_object: <br>contents = file_object.read() <br><span class="hljs-built_in">print</span>(contents.rstrip())<br></code></pre></td></tr></table></figure><p>要让Python打开不与程序文件位于同一个目录中的文件，需要提供文件路径，它让Python到系统的特定位置去查找。</p><p><strong>逐行读取</strong></p><p>要以每次一行的方式检查文件，可对文件对象使用for循环:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">filename = <span class="hljs-string">&#x27;pi_digits.txt&#x27;</span> <br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> file_object: <br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file_object: <br>            <span class="hljs-built_in">print</span>(line)<br></code></pre></td></tr></table></figure><p>使用关键字with时，open()返回的文件对象只在with代码块内可用。如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行存储在一个列表中，并在with代码块外使用该列表：你可以立即处理文件的各个部分，也可推迟到程序后面再处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">filename = <span class="hljs-string">&#x27;pi_digits.txt&#x27;</span> <br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> file_object: <br>     lines = file_object.readlines() <br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines: <br>     <span class="hljs-built_in">print</span>(line.rstrip())<br></code></pre></td></tr></table></figure><p><strong>使用文件的内容</strong></p><p>strip()可以删除空格</p><p>读取文本文件时，Python将其中的所有文本都解读为字符串。如果你读取的是数字，并要将其作为数值使用，就必须使用函数int()将其转换为整数，或使用函数float()将其转换为浮点数。</p><p>对于你可处理的数据量，Python没有任何限制；只要系统的内存足够多，你想处理多少数据都可以</p><h3 id="10-2写入文件"><a href="#10-2写入文件" class="headerlink" title="10.2写入文件"></a>10.2写入文件</h3><p>保存数据的最简单的方式之一是将其写入到文件中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">filename = <span class="hljs-string">&#x27;programming.txt&#x27;</span> <br> <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file_object: <br> file_object.write(<span class="hljs-string">&quot;I love programming.&quot;</span>)<br></code></pre></td></tr></table></figure><p>如果你要写入的文件不存在，函数open()将自动创建它。然而，以写入（’w’）模式打开文件时千万要小心，因为如果指定的文件已经存在，Python将在返回文件对象前清空该文件。</p><p>函数write()不会在你写入的文本末尾添加换行符，因此如果你写入多行时没有指定换行符，像显示到终端的输出一样，还可以使用空格、制表符和空行来设置这些输出的格式</p><p>如果你要给文件添加内容，而不是覆盖原有的内容，可以附加模式打开文件。你以附加模式打开文件时，Python不会在返回文件对象前清空文件，而你写入到文件的行都将添加到文件末尾。如果指定的文件不存在，Python将为你创建一个空文件。</p><h3 id="10-3异常"><a href="#10-3异常" class="headerlink" title="10.3异常"></a>10.3异常</h3><p>Python使用被称为异常的特殊对象来管理程序执行期间发生的错误。每当发生让Python不知所措的错误时，它都会创建一个异常对象。如果你编写了处理该异常的代码，程序将继续运行；如果你未对异常进行处理，程序将停止，并显示一个traceback，其中包含有关异常的报告。</p><p>异常是使用try-except代码块处理的。try-except代码块让Python执行指定的操作，同时告诉Python发生异常时怎么办。使用了try-except代码块时，即便出现异常，程序也将继续运行：显示你编写的友好的错误消息，而不是令用户迷惑的traceback。</p><p>通过将可能引发错误的代码放在try-except代码块中，可提高这个程序抵御错误的能力</p><p>try-except-else代码块的工作原理大致如下：Python尝试执行try代码块中的代码；只有可能引发异常的代码才需要放在try语句中。有时候，有一些仅在try代码块成功执行时才需要运行的代码；这些代码应放在else代码块中。except代码块告诉Python，如果它尝试运行try代码块中的代码时引发了指定的异常，该怎么办。</p><p><strong>处理 FileNotFoundError 异常</strong></p><p>使用文件时，一种常见的问题是找不到文件：你要查找的文件可能在其他地方、文件名可能不正确或者这个文件根本就不存在。对于所有这些情形，都可使用try-except代码块以直观的方式进行处理。</p><p><strong>分析文本</strong></p><p>使用try-except代码块提供了两个重要的优点：避免让用户看到traceback；让程序能够继续分析能够找到的其他文件。</p><p><strong>失败时一声不吭</strong></p><p>有时候你希望程序在发生异常时一声不吭，就像什么都没有发生一样继续运行。要让程序在失败时一声不吭，可像通常那样编写try代码块，但在except代码块中明确地告诉Python什么都不要做。Python有一个pass语句，可在代码块中使用它来让Python什么都不要做。</p><p>pass语句还充当了占位符，它提醒你在程序的某个地方什么都没有做，并且以后也许要在这里做些什么</p><p>编写得很好且经过详尽测试的代码不容易出现内部错误，如语法或逻辑错误，但只要程序依赖于外部因素，如用户输入、存在指定的文件、有网络链接，就有可能出现异常。凭借经验可判断该在程序的什么地方包含异常处理块，以及出现错误时该向用户提供多少相关的信息。</p><h3 id="10-4存储数据"><a href="#10-4存储数据" class="headerlink" title="10.4存储数据"></a>10.4存储数据</h3><p>模块json让你能够将简单的Python数据结构转储到文件中，并在程序再次运行时加载该文件中的数据。你还可以使用json在Python程序之间分享数据。更重要的是，JSON数据格式并非Python专用的，这让你能够将以JSON格式存储的数据与使用其他编程语言的人分享。这是一种轻便格式，很有用，也易于学习。</p><p><strong>使用json.dump()和json.load()</strong></p><p>函数json.dump()接受两个实参：要存储的数据以及可用于存储数据的文件对象。</p><p><strong>重构</strong></p><p>你经常会遇到这样的情况：代码能够正确地运行，但可做进一步的改进——将代码划分为一系列完成具体工作的函数。这样的过程被称为重构。重构让代码更清晰、更易于理解、更容易扩展。</p><h2 id="11-测试"><a href="#11-测试" class="headerlink" title="11.测试"></a>11.测试</h2><h3 id="11-1测试函数"><a href="#11-1测试函数" class="headerlink" title="11.1测试函数"></a>11.1测试函数</h3><p>编写函数或类时，还可为其编写测试。通过测试，可确定代码面对各种输入都能够按要求的那样工作。</p><ul><li><p>Python标准库中的模块unittest提供了代码测试工具。单元测试用于核实函数的某个方面没有问题；</p></li><li><p>测试用例是一组单元测试，这些单元测试一起核实函数在各种情形下的行为都符合要求。</p></li><li><p>全覆盖式测试用例包含一整套单元测试，涵盖了各种可能的函数使用方式。</p></li><li><p>创建测试用例的语法需要一段时间才能习惯，但测试用例创建后，再添加针对函数的单元测试就很简单了</p></li><li><p>要为函数编写测试用例，可先导入模块unittest以及要测试的函数，再创建一个继承unittest.TestCase的类，并编写一系列方法对函数行为的不同方面进行测试</p></li><li><p>使用unittest类最有用的功能之一：一个断言方法。断言方法用来核实得到的结果是否与期望的结果一致</p></li><li><p>测试未通过时，不要修改测试，而应修复导致测试不能通过的代码：检查刚对函数所做的修改，找出导致函数行为不符合预期的修改</p></li></ul><p>范例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> unittest <br><span class="hljs-keyword">from</span> name_function <span class="hljs-keyword">import</span> get_formatted_name<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NamesTestCase</span>(unittest.TestCase): <br>     <span class="hljs-string">&quot;&quot;&quot;测试name_function.py&quot;&quot;&quot;</span> <br> <br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_first_last_name</span>(<span class="hljs-params">self</span>): <br>         <span class="hljs-string">&quot;&quot;&quot;能够正确地处理像Janis Joplin这样的姓名吗？&quot;&quot;&quot;</span> <br>         formatted_name = get_formatted_name(<span class="hljs-string">&#x27;janis&#x27;</span>, <span class="hljs-string">&#x27;joplin&#x27;</span>) <br>         self.assertEqual(formatted_name, <span class="hljs-string">&#x27;Janis Joplin&#x27;</span>) <br>        <br>unittest.main()<br></code></pre></td></tr></table></figure><p>Python在unittest.TestCase类中提供了很多断言方法:</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>assertEqual(a, b)</td><td>核实a &#x3D;&#x3D; b</td></tr><tr><td>assertNotEqual(a, b)</td><td>核实a !&#x3D; b</td></tr><tr><td>assertTrue(x)</td><td>核实x为True</td></tr><tr><td>assertFalse(x)</td><td>核实x为False</td></tr><tr><td>assertIn(item, list)</td><td>核实item在list中</td></tr><tr><td>assertNotIn(item, list)</td><td>核实item不在list中</td></tr></tbody></table><h3 id="11-2测试类"><a href="#11-2测试类" class="headerlink" title="11.2测试类"></a>11.2测试类</h3><p>类的测试与函数的测试相似——你所做的大部分工作都是测试类中方法的行为</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黑群晖显示真实CPU信息</title>
    <link href="/2023/05/31/%E9%BB%91%E7%BE%A4%E6%99%96%E6%98%BE%E7%A4%BA%E7%9C%9F%E5%AE%9ECPU%E4%BF%A1%E6%81%AF/"/>
    <url>/2023/05/31/%E9%BB%91%E7%BE%A4%E6%99%96%E6%98%BE%E7%A4%BA%E7%9C%9F%E5%AE%9ECPU%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<p><strong>黑群晖信息中心显示的CPU信息不正确，例如918+对应的CPU为J3455，而不是本机真实的CPU信息，逼死强迫症，可以通过打补丁让其显示真实的CPU信息，操作方法如下：</strong></p><h2 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h2><ol><li><p>通过ssh登录到群晖后台</p></li><li><p>切换到root账号下，并切换到期望存放补丁文件的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -i<br>cd /volumue5/download<br></code></pre></td></tr></table></figure></li><li><p>通过wget命令下载补丁文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://github.com/FOXBI/ch_cpuinfo/releases/download/ch_cpuinfo/ch_cpuinfo.tar<br></code></pre></td></tr></table></figure></li><li><p>解压补丁包文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar xvf ch_cpuinfo.tar<br>chmod +x ch_cpuinfo<br></code></pre></td></tr></table></figure></li><li><p>执行补丁文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./ch_cpuinfo<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305311942781.webp" alt="输入1为首次执行"></p><p>&gt;输入1表示首次执行</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305311942949.webp" alt="输入2为重新执行"></p><p>&gt;输入2表示重新安装</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305311943165.webp" alt="输入3为恢复默认"></p><p>&gt;输入3表示恢复默认</p></li><li><p>执行完毕后，退出账号并重新登录，刷新页面就会看到信息中心已经显示了正确的CPU信息了</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305311955386.webp"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>群晖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>群晖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黑群晖918+ CPU不自动变频</title>
    <link href="/2023/05/30/%E9%BB%91%E7%BE%A4%E6%99%96CPU%E4%B8%8D%E8%87%AA%E5%8A%A8%E5%8F%98%E9%A2%91/"/>
    <url>/2023/05/30/%E9%BB%91%E7%BE%A4%E6%99%96CPU%E4%B8%8D%E8%87%AA%E5%8A%A8%E5%8F%98%E9%A2%91/</url>
    
    <content type="html"><![CDATA[<p><strong>硬件配置：</strong></p><ul><li>CPU：i3-8100</li><li>主板：昂达B365SD4-ITX</li><li>内存：12G</li></ul><p><strong>系统版本：</strong>918+ 7.1.1-42962</p><p>安装黑群晖系统后，发现CPU一直处于最高频率在运行，不会自动变频，并且available cpufreq governors只有<code>powersave</code>,<code>performance</code>, <code>userspace</code>这三个，而不通常的performance 、power save 、user<em>space</em>、conservative 和 ondemand 五种。</p><p>偶然的机会在<a href="https://xpenology.com/forum/topic/19846-cpu-frequency-scaling-for-ds918/">CPU Frequency scaling for DS918+ - Software Modding - XPEnology Community</a>看到了解决方案。</p><blockquote><p>项目地址：<a href="https://github.com/Trauma/cpufreq-userspace-scaler">https://github.com/Trauma/cpufreq-userspace-scaler</a></p><h1 id="cpufreq-userspace-scaler"><a href="#cpufreq-userspace-scaler" class="headerlink" title="cpufreq-userspace-scaler"></a>cpufreq-userspace-scaler</h1><h5 id="Cpu-frequency-scaling-script-for-cpufreq-userspace-governor"><a href="#Cpu-frequency-scaling-script-for-cpufreq-userspace-governor" class="headerlink" title="Cpu frequency scaling script for cpufreq userspace governor"></a>Cpu frequency scaling script for cpufreq userspace governor</h5><h2 id="If-you’re-missing-ondemand-or-conservative-governors-this-script-is-for-you"><a href="#If-you’re-missing-ondemand-or-conservative-governors-this-script-is-for-you" class="headerlink" title="If you’re missing ondemand or conservative governors, this script is for you."></a>If you’re missing ondemand or conservative governors, this script is for you.</h2><p>This script is scaling cpu frequency according to current average load. You can set 2 frequency steps : low, mid. This 2 thresholds will automatically set cpu frequency accordingly :</p><ul><li>the threshold will set the cpu to his minimal frequency, unless you force it to <code>lowload</code> <code>scalingminfreq</code></li><li>the threshold will set the cpu to approximate mid range cpu frequency, if load goes higher it will scale to max <code>midload</code> <code>scalingmaxfreq</code></li></ul><p>If you set and&#x2F;or the cpu will never override those values.<code>scalingmaxfreq</code> <code>scalingminfreq</code></p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage :"></a>Usage :</h3><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters :"></a>Parameters :</h3><table><thead><tr><th>Variable name</th><th>Default</th><th>Type</th><th>Comments</th></tr></thead><tbody><tr><td>lowload</td><td>auto &#x2F; 30%</td><td>integer between 000 and 999</td><td>050 &#x3D; load average : 0.50</td></tr><tr><td>midload</td><td>auto &#x2F; 60%</td><td>integer between 000 and 999</td><td>065 &#x3D; load average : 0.65</td></tr><tr><td>scalingminfreq</td><td>auto</td><td>integer in hertz</td><td>800000 &#x3D; 800 Mhz</td></tr><tr><td>scalingmaxfreq</td><td>auto</td><td>integer in hertz</td><td>2500000 &#x3D; 2,5 Ghz</td></tr></tbody></table><h3 id="Default-commande-line"><a href="#Default-commande-line" class="headerlink" title="Default commande line :"></a>Default commande line :</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">./scaling.sh &amp;</span><br></code></pre></td></tr></table></figure><h3 id="Custom-command-line-example"><a href="#Custom-command-line-example" class="headerlink" title="Custom command line example :"></a>Custom command line example :</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&gt;<span class="hljs-attribute">lowload</span>=100 <span class="hljs-attribute">midload</span>=200 <span class="hljs-attribute">scalingmaxfreq</span>=2000000 <span class="hljs-attribute">scalingminfreq</span>=1500000 ./scaling.sh &amp;<br></code></pre></td></tr></table></figure><h3 id="Systemd-service-installer"><a href="#Systemd-service-installer" class="headerlink" title="Systemd service installer"></a>Systemd service installer</h3><p><em>for DSM 7.0 and above</em></p><ol><li>If needed, set desired lowload and midload values in <code>cpufreq-userspace-scaler.service</code></li><li>Launch the installer <code>./install.sh</code></li></ol></blockquote><p>使用方法：</p><p>1、将上述项目中的三个文件下载到群晖里</p><p>2、SSH登录到服务器</p><p>3、执行.&#x2F;install.sh</p>]]></content>
    
    
    <categories>
      
      <category>群晖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>群晖</tag>
      
      <tag>分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黑群晖引导自动编译</title>
    <link href="/2023/05/30/%E9%BB%91%E7%BE%A4%E6%99%96%E5%BC%95%E5%AF%BC%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91/"/>
    <url>/2023/05/30/%E9%BB%91%E7%BE%A4%E6%99%96%E5%BC%95%E5%AF%BC%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<p>黑群晖的引导盘制作原来一直是个挺复杂的事情，但是自从有了下面这些项目，引导的制作变得非常简单，感谢大神们！</p><ul><li><a href="https://github.com/pocopico/tinycore-redpill">pocopico&#x2F;tinycore-redpill</a></li><li><a href="https://github.com/fbelavenuto/arpl">fbelavenuto&#x2F;arpl: Automated Redpill Loader</a></li><li><a href="https://github.com/wjz304/arpl-i18n">wjz304&#x2F;arpl-i18n: Automated Redpill Loader(i18n)</a> arpl i18n (多语言优化版)</li></ul><h2 id="arpl自动制作引导盘"><a href="#arpl自动制作引导盘" class="headerlink" title="arpl自动制作引导盘"></a>arpl自动制作引导盘</h2><p>下面是基于arpl的操作步骤：</p><p>1、准备一个2G以上的U盘</p><p>2、下载镜像文件</p><p>​原版：<a href="https://github.com/fbelavenuto/arpl/releases">Releases · fbelavenuto&#x2F;arpl</a></p><p>​多语言版：<a href="https://github.com/wjz304/arpl-i18n/releases">Releases · wjz304&#x2F;arpl-i18n</a></p><p>3、通过写盘工具（如<a href="https://etcher.balena.io/">balenaEtcher </a>等）写入到U盘中</p><p>4、将U盘插入到黑群晖机器上，开机设置从U盘启动</p><p>5、启动完成后会在进入如下页面：</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305301944686.webp"></p><p>6、可以通过下面两种方式登录到系统：</p><ul><li>从另一台机器进入同一网络，在浏览器中输入屏幕上提供的地址<code>http://&lt;ip&gt;:7681</code></li><li>从另一台机器进入同一网络，使用ssh客户端，用户名： <code>root</code> 和密码： <code>Redp1lL-1s-4weSomE</code></li></ul><p>7、登录系统后输入<code>munu.sh</code>回车进入配置页面：</p><ul><li>选择型号</li></ul><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305301949724.webp"></p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305301951276.webp"></p><ul><li>选择系统版本</li></ul><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305301951831.webp"></p><ul><li>进入“Serial”菜单，选择“Generate a random Serial number”，也可以选择手动输入。</li><li>选择“Build”选项，等待加载器生成</li></ul><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305301954764.webp"></p><ul><li>选择“Boot”选项，等待DSM启动:</li></ul><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305301956866.webp"></p><p>8、通过以上步骤就完成一个引导盘的制作了。</p><h2 id="wjz304版本的一些命令"><a href="#wjz304版本的一些命令" class="headerlink" title="wjz304版本的一些命令"></a>wjz304版本的一些命令</h2><ul><li><p>arpl各版本间切换(手动方式, 全量) (Any version):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在 shell 中下载需要的版本或者手动上传到/opt/arpl/下</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Download the required version <span class="hljs-keyword">in</span> the shell or manually upload it to/opt/arpl/</span><br>curl -kL -o /opt/arpl/arpl.zip https://github.com/wjz304/arpl-i18n/releases/download/23.4.5/arpl-i18n-23.4.5.img.zip<br><span class="hljs-meta prompt_"># </span><span class="language-bash">卸载挂载的引导盘</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Uninstalling the mounted boot disk</span><br>umount /mnt/p1 /mnt/p2 /mnt/p3<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压 并写入到引导盘</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Decompress and write to the boot disk</span><br>unzip -p arpl.zip | dd of=`blkid | grep &#x27;LABEL=&quot;ARPL3&quot;&#x27; | cut -d3 -f1` bs=1M conv=fsync<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启 reboot</span><br>reboot<br></code></pre></td></tr></table></figure></li><li><p>arpl各版本间切换(菜单更新, 增量)(arpl &#x2F; arpl-zh_CN &#x2F; arpl-i18n(ver &lt; 23.4.5)):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">shell 下输入以下命令修改更新 repo.</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果要切换原版修改第二条命令中的 wjz304/arpl-i18n 为 fbelavenuto/arpl</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果切换中文版修改第二条命令中的 wjz304/arpl-i18n 为 wjz304/arpl-zh_CN</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Enter the following <span class="hljs-built_in">command</span> under the shell to modify and update repo</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">If you want to switch the original version and modify wjz304/arpl-i18n to fbelavenuto/arpl <span class="hljs-keyword">in</span> the second <span class="hljs-built_in">command</span>.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">If you switch to the Chinese version and modify the wjz304/arpl-i18n to wjz304/arpl_zh_CN <span class="hljs-keyword">in</span> the second <span class="hljs-built_in">command</span>.</span><br>CURREPO=`grep &quot;github.com.*update&quot; menu.sh | sed -r &#x27;s/.*com\/(.*)\/releases.*/\1/&#x27;`<br>sed -i &quot;s|$&#123;CURREPO&#125;|wjz304/arpl-i18n|g&quot; /opt/arpl/menu.sh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入设置菜单执行更新arpl操作即可. 更新后请重启.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Simply enter the main menu and perform the update arpl operation. Please restart after the update.</span><br></code></pre></td></tr></table></figure></li><li><p>arpl 备份 (Any version):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">备份为 disk.img.gz, 自行导出.</span><br>dd if=`blkid | grep &#x27;LABEL=&quot;ARPL3&quot;&#x27; | cut -d3 -f1` | gzip &gt; disk.img.gz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">结合 transfer.sh 直接导出链接</span><br>curl -skL --insecure -w &#x27;\n&#x27; --upload-file disk.img.gz https://transfer.sh<br></code></pre></td></tr></table></figure></li><li><p>arpl 持久化 &#x2F;opt&#x2F;arpl 目录的修改 (Any version):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">RDXZ_PATH=/tmp/rdxz_tmp<br>mkdir -p &quot;$&#123;RDXZ_PATH&#125;&quot;<br>(cd &quot;$&#123;RDXZ_PATH&#125;&quot;; xz -dc &lt; &quot;/mnt/p3/initrd-arpl&quot; | cpio -idm) &gt;/dev/null 2&gt;&amp;1 || true<br>rm -rf &quot;$&#123;RDXZ_PATH&#125;/opt/arpl&quot;<br>cp -rf &quot;/opt/arpl&quot; &quot;$&#123;RDXZ_PATH&#125;/opt&quot;<br>(cd &quot;$&#123;RDXZ_PATH&#125;&quot;; find . 2&gt;/dev/null | cpio -o -H newc -R root:root | xz --check=crc32 &gt; &quot;/mnt/p3/initrd-arpl&quot;) || true<br>rm -rf &quot;$&#123;RDXZ_PATH&#125;&quot;<br></code></pre></td></tr></table></figure></li><li><p>arpl 修改所有的pat下载源 (Any version):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -i &#x27;s/global.synologydownload.com/cndl.synology.cn/g&#x27; /opt/arpl/menu.sh `find /opt/arpl/model-configs/ -type f&#x27;`<br>sed -i &#x27;s/global.download.synology.com/cndl.synology.cn/g&#x27; /opt/arpl/menu.sh `find /opt/arpl/model-configs/ -type f&#x27;`<br></code></pre></td></tr></table></figure></li><li><p>arpl 更新慢的解决办法 (arpl-zh_CN &#x2F; arpl):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -i &#x27;s|https://.*/https://|https://|g&#x27; /opt/arpl/menu.sh <br>sed -i &#x27;s|https://github.com|https://ghproxy.homeboyc.cn/&amp;|g&#x27; /opt/arpl/menu.sh <br>sed -i &#x27;s|https://api.github.com|http://ghproxy.homeboyc.cn/&amp;|g&#x27; /opt/arpl/menu.sh<br></code></pre></td></tr></table></figure></li><li><p>arpl 去掉pat的hash校验 (Any version):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -i &#x27;s/HASH&#125;&quot; ]/&amp; \&amp;\&amp; false/g&#x27; /opt/arpl/menu.sh<br></code></pre></td></tr></table></figure></li><li><p>arpl 下获取网卡驱动 (Any version):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in `ls /sys/class/net | grep -v &#x27;lo&#x27;`; do echo $i -- `ethtool -i $i | grep driver`; done<br></code></pre></td></tr></table></figure></li><li><p>arpl 使用自定义的dts文件 (arpl(ver &gt; v1.1-beta2a &#x2F; arpl-zh_CN):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将dts文件放到/mnt/p1下,并重命名为model.dts. <span class="hljs-string">&quot;/mnt/p1/model.dts&quot;</span></span><br>sed -i &#x27;/^.*\/addons\/disks.sh.*$/a [ -f &quot;\/mnt\/p1\/model.dts&quot; ] \&amp;\&amp; cp &quot;\/mnt\/p1\/model.dts&quot; &quot;$&#123;RAMDISK_PATH&#125;\/addons\/model.dts&quot;&#x27; /opt/arpl/ramdisk-patch.sh<br></code></pre></td></tr></table></figure></li><li><p>arpl 离线安装 (arpl_zh_CN(ver &gt; ++-v1.3) &#x2F; arpl-i18n):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">1. arpl 下<br><span class="hljs-meta prompt_"># </span><span class="language-bash">arpl下获取型号版本的pat下载地址 (替换以下命令中的 版本号和型号部分)</span><br>yq eval &#x27;.builds.42218.pat.url&#x27; &quot;/opt/arpl/model-configs/DS3622xs+.yml&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将pat重命名为&lt;型号&gt;-&lt;版本&gt;.pat, 放入 /mnt/p3/dl/ 下</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">例: /mnt/p3/dl/DS3622xs+-42218.pat</span><br><br>2. pc 下<br><span class="hljs-meta prompt_"># </span><span class="language-bash">通过 DG等其他软件打开arpl.img, 将pat重命名为&lt;型号&gt;-&lt;版本&gt;.pat, 放入 第3个分区的 /dl/ 下.</span><br></code></pre></td></tr></table></figure></li><li><p>arpl 增删驱动 (Any version):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1.首先你要有对应平台的驱动 比如 SA6400 7.1.1 增加 r8125</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">略</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2.解包</span><br>mkdir -p /mnt/p3/modules/epyc7002-5.10.55<br>gzip -dc /mnt/p3/modules/epyc7002-5.10.55.tgz | tar xf - -C /mnt/p3/modules/epyc7002-5.10.55<br><span class="hljs-meta prompt_"># </span><span class="language-bash">3.放入或删除驱动</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">略</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">4.打包</span><br>tar -cf /mnt/p3/modules/epyc7002-5.10.55.tar -C /mnt/p3/modules/epyc7002-5.10.55 .<br>gzip -c /mnt/p3/modules/epyc7002-5.10.55.tar &gt; /mnt/p3/modules/epyc7002-5.10.55.tgz<br>rm -rf /mnt/p3/modules/epyc7002-5.10.55.tar /mnt/p3/modules/epyc7002-5.10.55<br></code></pre></td></tr></table></figure></li></ul><h2 id="一些有用的群晖命令"><a href="#一些有用的群晖命令" class="headerlink" title="一些有用的群晖命令"></a>一些有用的群晖命令</h2><ul><li><p>ssh 开启 root 权限:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -i<br>sed -i &#x27;s/^.*PermitRootLogin.*$/PermitRootLogin yes/&#x27; /etc/ssh/sshd_config  <br>synouser --setpw root xxxxxx  # xxxxxx 为你要设置的密码<br>systemctl restart sshd<br></code></pre></td></tr></table></figure></li><li><p>dsm下挂载引导盘:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -i<br>echo 1 &gt; /proc/sys/kernel/syno_install_flag<br>ls /dev/synoboot*    # 正常会有 /dev/synoboot  /dev/synoboot1  /dev/synoboot2  /dev/synoboot3<br><span class="hljs-meta prompt_"># </span><span class="language-bash">挂载第1个分区</span><br>mkdir -p /tmp/synoboot1 <br>mount /dev/synoboot1 /tmp/synoboot1 <br>ls /tmp/synoboot1/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">挂载第2个分区</span><br>mkdir -p /tmp/synoboot2<br>mount /dev/synoboot2 /tmp/synoboot2<br>ls /tmp/synoboot2/<br></code></pre></td></tr></table></figure></li><li><p>dsm下重启到arpl(免键盘) (Any version):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -i  # 输入密码<br>/usr/bin/arpl-reboot.sh &quot;config&quot;<br></code></pre></td></tr></table></figure></li><li><p>dsm下修改sn (Any version):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -i  # 输入密码<br>SN=xxxxxxxxxx   # 输入你要设置的SN<br>echo 1 &gt; /proc/sys/kernel/syno_install_flag<br>[ -b &quot;/dev/synoboot1&quot; ] &amp;&amp; (mkdir -p /tmp/synoboot1; mount /dev/synoboot1 /tmp/synoboot1)<br>[ -f &quot;/tmp/synoboot1/user-config.yml&quot; ] &amp;&amp; OLD_SN=`grep &#x27;^sn:&#x27; /tmp/synoboot1/user-config.yml | sed -r &#x27;s/sn:(.*)/\1/; s/[\&quot; ]//g&#x27;`<br>[ -n &quot;$&#123;OLD_SN&#125;&quot; ] &amp;&amp; sed -i &quot;s/$&#123;OLD_SN&#125;/$&#123;SN&#125;/g&quot; /tmp/synoboot1/user-config.yml<br>reboot<br></code></pre></td></tr></table></figure></li><li><p>群晖 opkg 包管理:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -O - http://bin.entware.net/x64-k3.2/installer/generic.sh | /bin/sh<br>/opt/bin/opkg update<br>/opt/bin/opkg install rename<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>群晖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分享</tag>
      
      <tag>黑群晖</tag>
      
      <tag>引导</tag>
      
      <tag>arpl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>群晖自动切换壁纸</title>
    <link href="/2023/05/30/%E7%BE%A4%E6%99%96%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E5%A3%81%E7%BA%B8/"/>
    <url>/2023/05/30/%E7%BE%A4%E6%99%96%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E5%A3%81%E7%BA%B8/</url>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>每日定时自动获取Bing的每日壁纸图片，自动更换登录界面的背景为bing今日美图，并且替换欢迎信息为美图简介。</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305301718741.webp"></p><h2 id="获取脚本"><a href="#获取脚本" class="headerlink" title="获取脚本"></a>获取脚本</h2><p>原始脚本在<a href="https://github.com/kkkgo/DSM_Login_BingWallpaper">kkkgo&#x2F;DSM_Login_BingWallpaper: 群晖登录壁纸自动换 (github.com)</a>，做了下简单修改，设置为壁纸的图片分辨率为1920x1080，保存的为高清的版本。</p><p>下面是修改过的脚本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设置你的语言</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">set</span> your language(en-US,zh-CN...)</span><br>lang=&quot;zh-CN&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如需收集保存壁纸,请去掉下面注释,设置保存文件夹路径</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在FileStation里面右键文件夹属性可以看到路径</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">If you want to collect and save Wallpapers,</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">please remove the comment below and <span class="hljs-built_in">set</span> the savepath.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Right click the folder property <span class="hljs-keyword">in</span> FileStation to see the path.</span><br><br>savepath=&quot;/volume5/Download/BingPicture/wallpaper_uhd&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如需下载4k分辨率,请设置res=4k</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如需下载体积更大的4k以上分辨率的原始图片,请设置res=raw</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">To download 4K resolution, <span class="hljs-built_in">set</span> res=4K</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">To download a larger original picture, <span class="hljs-built_in">set</span> res=raw</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">res=4k</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改用户桌面壁纸,注释后会替换系统的wallpaper1</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">你需要清空浏览器缓存查看效果，仅在DSM7.x上测试.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Modify user desktop wallpaper.Only <span class="hljs-built_in">test</span> <span class="hljs-keyword">for</span> DMS7.x.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">System <span class="hljs-string">&quot;Wallpaper1&quot;</span> will replaced by remove the comment.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">You need to clear the browser cache to see the effect.</span><br><br>desktop=yes<br><br>echo &quot;[x]Collecting information...&quot;<br>pic=&quot;https://www.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1&quot;<br>if [ &quot;$res&quot; != &quot;&quot; ]<br>then pic=&quot;https://www.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1&amp;uhd=1&amp;uhdwidth=3840&amp;uhdheight=2160&quot;<br>fi<br>pic=$(wget -t 5 --no-check-certificate -qO- $pic --header=&quot;cookie:_EDGE_S=mkt=$lang&quot;)<br>echo $pic|grep -q enddate||exit<br>link=$(echo https://www.bing.com$(echo $pic|sed &#x27;s/.\+&quot;url&quot;[:&quot; ]\+//g&#x27;|sed &#x27;s/&quot;.\+//g&#x27;))<br>if [ &quot;$savepath&quot; != &quot;&quot; ]<br>then linkd=$(echo https://www.bing.com$(echo $pic|sed &#x27;s/.\+&quot;url&quot;[:&quot; ]\+//g&#x27;|sed &#x27;s/&quot;.\+//g&#x27;|sed &#x27;s/1920x1080/UHD/g&#x27;))<br>fi<br>date=$(echo $pic|grep -Eo &#x27;&quot;enddate&quot;:&quot;[0-9]+&#x27;|grep -Eo &#x27;[0-9]+&#x27;|head -1)<br>if [ &quot;$date&quot; == &quot;&quot; ]<br>then date=$(date +%Y%m%d)<br>fi<br>title=$(echo $pic|sed &#x27;s/.\+&quot;title&quot;:&quot;//g&#x27;|sed &#x27;s/&quot;.\+//g&#x27;)<br>copyright=$(echo $pic|sed &#x27;s/.\+&quot;copyright[:&quot; ]\+//g&#x27;|sed &#x27;s/&quot;.\+//g&#x27;)<br>keyword=$(echo $copyright|sed &#x27;s/, /-/g&#x27;|cut -d&quot; &quot; -f1|grep -Eo &#x27;[^()\\/:*?&quot;&lt;&gt;]+&#x27;|head -1)<br>filename=$date&quot;@&quot;$title&quot;-&quot;$keyword&quot;.jpg&quot;<br>echo &quot;Link:&quot;$link<br>echo &quot;Linkd:&quot;$linkd<br>echo &quot;Date:&quot;$date<br>echo &quot;Title:&quot;$title<br>echo &quot;Copyright:&quot;$copyright<br>echo &quot;Keyword:&quot;$keyword<br>echo &quot;Filename:&quot;$filename<br><br>echo &quot;[x]Downloading wallpaper...&quot;<br>tmpfile=/tmp/$filename<br>wget -t 5 --no-check-certificate  $link -qO $tmpfile<br>ls -lah $tmpfile||exit<br><br>echo &quot;[x]Copying wallpaper...&quot;<br>if [ &quot;$savepath&quot; != &quot;&quot; ]<br>then wget -t 5 --no-check-certificate  $linkd -qO $savepath/$filename<br>echo &quot;Save:&quot;$savepath<br>ls -lah &quot;$savepath&quot;|grep $date<br>cd &quot;$savepath&quot;<br>chmod 777 $filename<br>else echo &quot;savepath is not set, skip copy.&quot;<br>fi<br><br>echo &quot;[x]Setting welcome msg...&quot;<br>sed -i s/login_welcome_title=.*//g /etc/synoinfo.conf<br>echo &quot;login_welcome_title=\&quot;$title\&quot;&quot;&gt;&gt;/etc/synoinfo.conf<br>sed -i s/login_welcome_msg=.*//g /etc/synoinfo.conf<br>echo &quot;login_welcome_msg=\&quot;$copyright\&quot;&quot;&gt;&gt;/etc/synoinfo.conf<br><br>echo &quot;[x]Applying login wallpaper...&quot;<br>sed -i s/login_background_customize=.*//g /etc/synoinfo.conf<br>echo &quot;login_background_customize=\&quot;yes\&quot;&quot;&gt;&gt;/etc/synoinfo.conf<br>sed -i s/login_background_type=.*//g /etc/synoinfo.conf<br>echo &quot;login_background_type=\&quot;fromDS\&quot;&quot;&gt;&gt;/etc/synoinfo.conf<br>rm -rf /usr/syno/etc/login_background*.jpg<br>cp -f $tmpfile /usr/syno/etc/login_background.jpg<br>ln -sf /usr/syno/etc/login_background.jpg /usr/syno/etc/login_background_hd.jpg<br><br>echo &quot;[x]Clean...&quot;<br>rm -f /tmp/bing_*.jpg<br><br>if [ &quot;$desktop&quot; == &quot;yes&quot; ]<br>then echo &quot;[x]Applying user desktop wallpaper...&quot;<br>mkdir -p /usr/syno/synoman/webman/resources/images/2x/default_wallpaper/<br>mkdir -p /usr/syno/synoman/webman/resources/images/1x/default_wallpaper/<br>mkdir -p /usr/syno/synoman/webman/resources/images/default/1x/default_wallpaper/<br>mkdir -p /usr/syno/synoman/webman/resources/images/default_wallpaper/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">7.0</span><br>cp -f /usr/syno/etc/login_background.jpg /usr/syno/synoman/webman/resources/images/2x/default_wallpaper/dsm7_01.jpg<br>ln -sf /usr/syno/synoman/webman/resources/images/2x/default_wallpaper/dsm7_01.jpg /usr/syno/synoman/webman/resources/images/1x/default_wallpaper/dsm7_01.jpg<br><span class="hljs-meta prompt_">#</span><span class="language-bash">6.0</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ln</span> -sf /usr/syno/synoman/webman/resources/images/2x/default_wallpaper/dsm7_01.jpg /usr/syno/synoman/webman/resources/images/default/1x/default_wallpaper/default_wallpaper.jpg</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ln</span> -sf /usr/syno/synoman/webman/resources/images/2x/default_wallpaper/dsm7_01.jpg /usr/syno/synoman/webman/resources/images/default/1x/default_wallpaper/dsm6_01.jpg</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ln</span> -sf /usr/syno/synoman/webman/resources/images/2x/default_wallpaper/dsm7_01.jpg /usr/syno/synoman/webman/resources/images/default/1x/default_wallpaper/dsm6_02.jpg</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-comment">#5.2</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ln</span> -sf /usr/syno/synoman/webman/resources/images/2x/default_wallpaper/dsm7_01.jpg /usr/syno/synoman/webman/resources/images/default_wallpaper/default_wallpaper.jpg</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-comment">#5.1</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ln</span> -sf /usr/syno/synoman/webman/resources/images/2x/default_wallpaper/dsm7_01.jpg /usr/syno/synoman/webman/resources/images/default_wallpaper/01.jpg</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ln</span> -sf /usr/syno/synoman/webman/resources/images/2x/default_wallpaper/dsm7_01.jpg /usr/syno/synoman/webman/resources/images/default_wallpaper/02.jpg</span><br>fi<br></code></pre></td></tr></table></figure><h2 id="设置定时任务"><a href="#设置定时任务" class="headerlink" title="设置定时任务"></a>设置定时任务</h2><ol><li>控制面板-任务计划-新增：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305301711860.webp" alt="新增任务"></p><p>​用户账号记得选择root</p><ol start="2"><li>计划里设置每天跑脚本的时间</li></ol><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305301713391.webp" alt="执行时间"></p><ol start="3"><li>任务设置里输入执行脚本的命令</li></ol><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305301715084.webp" alt="任务内容"></p><ol start="4"><li><p>确定就完成任务的设置了，如果想马上看到效果可以选择手动立即执行，然后退出登录账号并<code>Ctrl+F5</code>刷新浏览器即可看到效果了 </p></li><li><p>可以看到图片也保存到设置的目录了，并且保存下来的是高分辨率的</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305301720910.webp"></p>]]></content>
    
    
    <categories>
      
      <category>群晖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>群晖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>群晖系统Synology DSM安装ipkg包管理</title>
    <link href="/2023/05/29/%E7%BE%A4%E6%99%96%E7%B3%BB%E7%BB%9FSynology-DSM%E5%AE%89%E8%A3%85ipkg%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    <url>/2023/05/29/%E7%BE%A4%E6%99%96%E7%B3%BB%E7%BB%9FSynology-DSM%E5%AE%89%E8%A3%85ipkg%E5%8C%85%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="SSH登录"><a href="#SSH登录" class="headerlink" title="SSH登录"></a>SSH登录</h2><p>打开终端，我使用的是xshell，使用群晖的管理员账号和密码登录，登录成功后，可使用下面命令切换到root账号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -i<br></code></pre></td></tr></table></figure><p>之后输入密码（与管理员的密码相同）</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载bootstrap并执行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget http://ipkg.nslu2-linux.org/feeds/optware/syno-i686/cross/unstable/syno-i686-bootstrap_1.2-7_i686.xsh<br>chmod +x syno-i686-bootstrap_1.2-7_i686.xsh<br>sh syno-i686-bootstrap_1.2-7_i686.xsh<br></code></pre></td></tr></table></figure><p>终端返回：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">Optware Bootstrap for syno-i686.<br>Extracting archive... please wait<br>bootstrap/<br>bootstrap/bootstrap.sh<br>bootstrap/ipkg-opt.ipk<br>bootstrap/ipkg.sh<br>1216+1 records in<br>1216+1 records out<br>bootstrap/optware-bootstrap.ipk<br>bootstrap/wget.ipk<br>249302 bytes (249 kB) copied, 0.00421063 s, 59.2 MB/s<br>Creating temporary ipkg repository...<br>Installing optware-bootstrap package...<br>Unpacking optware-bootstrap.ipk...Done.<br>Configuring optware-bootstrap.ipk...Modifying /etc/rc.local<br>Done.<br>Installing ipkg...<br>Unpacking ipkg-opt.ipk...Done.<br>Configuring ipkg-opt.ipk...Done.<br>Removing temporary ipkg repository...<br>Installing wget...<br>Installing wget (1.12-2) to root...<br>Configuring wget<br>Successfully terminated.<br>Creating /opt/etc/ipkg/cross-feed.conf...<br>Setup complete.<br></code></pre></td></tr></table></figure><p>安装完成，建议重启，不过我没重启也没问题，可以使用。 之后执行更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ipkg update<br></code></pre></td></tr></table></figure><p>如果执行ipkg失败，提示没有找到该命令（- ash : ipkg : command not found），需要添加一下环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/syno/sbin:/usr/syno/bin:/usr/local/sbin:/usr/local/bin</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">export</span> PATH</span><br></code></pre></td></tr></table></figure><p>我们来安装个Screen试一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@DiskStation:~# ipkg install screen<br>Installing screen (4.0.3-2) to root...<br>Downloading http://ipkg.nslu2-linux.org/feeds/optware/syno-i686/cross/unstable/screen_4.0.3-2_i686.ipk<br>Installing termcap (1.3.1-2) to root...<br>Downloading http://ipkg.nslu2-linux.org/feeds/optware/syno-i686/cross/unstable/t ermcap_1.3.1-2_i686.ipk<br>Configuring screen<br>Configuring termcap<br>Successfully terminated.<br></code></pre></td></tr></table></figure><p>没问题。</p><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>如果需要卸载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm syno-i686-bootstrap_1.2-7_i686.xsh<br></code></pre></td></tr></table></figure><h2 id="修复wget-https错误问题"><a href="#修复wget-https错误问题" class="headerlink" title="修复wget https错误问题"></a>修复wget https错误问题</h2><p>安装了包管理后，如果出现wget https的问题，只要删除&#x2F;opt&#x2F;bin&#x2F;wget后将&#x2F;usr&#x2F;bin&#x2F;wget软链接到&#x2F;opt&#x2F;bin目录即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -s /usr/bin/wget /opt/bin/wget<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>群晖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>群晖</tag>
      
      <tag>DSM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自建Emby验证服务器</title>
    <link href="/2023/05/29/%E8%87%AA%E5%BB%BAEmby%E9%AA%8C%E8%AF%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2023/05/29/%E8%87%AA%E5%BB%BAEmby%E9%AA%8C%E8%AF%81%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="自建Emby验证服务器（实现白嫖）"><a href="#自建Emby验证服务器（实现白嫖）" class="headerlink" title="自建Emby验证服务器（实现白嫖）"></a>自建Emby验证服务器（实现白嫖）</h1><p>群晖默认自带nginx服务，通过增加nginx反代配置，实现将Emby的验证劫持到本地，骗过emby服务器，从而解锁硬解功能，实现视频播放硬件解码，降低服务器CPU压力。</p><p>注：我的Emby服务器是DOCKER部署。</p><h3 id="1-配置nginx"><a href="#1-配置nginx" class="headerlink" title="1.配置nginx"></a>1.配置nginx</h3><p>新建一个nginx配置文件，命名随意（例如emby.conf），在配置文件中写入下面的配置信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs conf">server &#123;<br> listen 443 ssl;<br> server_name mb3admin.com;<br> ssl_certificate /volume6/web/mb3admin.com/mb3admin.com.cert.pem;<br> ssl_certificate_key /volume6/web/mb3admin.com/mb3admin.com.key.pem;<br> ssl_session_timeout 5m;<br> ssl_protocols TLSv1 TLSv1.1 TLSv1.2;<br> ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<br> ssl_prefer_server_ciphers on;<br> location = /webdefault/images/logo.jpg &#123;<br> alias /usr/syno/share/nginx/logo.jpg;<br> &#125;<br><br> location @error_page &#123;<br> root /usr/syno/share/nginx;<br> rewrite (.*) /error.html break;<br> &#125;<br><br> location ^~ /.well-known/acme-challenge &#123;<br> root /var/lib/letsencrypt;<br> default_type text/plain;<br> &#125;<br><br> location / &#123;<br> rewrite ^ / redirect;<br> &#125;<br><br> location ~ ^/$ &#123;<br> rewrite / https://$host:5001/ redirect;<br> &#125;<br><br> add_header Access-Control-Allow-Origin *;<br> add_header Access-Control-Allow-Headers *;<br> add_header Access-Control-Allow-Method *;<br> add_header Access-Control-Allow-Credentials true;<br> location /admin/service/registration/validateDevice &#123;<br> default_type application/json;<br> return 200 &#x27;&#123;&quot;cacheExpirationDays&quot;: 7,&quot;message&quot;: &quot;Device Valid&quot;,&quot;resultCode&quot;: &quot;GOOD&quot;&#125;&#x27;;<br> &#125;<br><br> location /admin/service/registration/validate &#123;<br> default_type application/json;<br> return 200 &#x27;&#123;&quot;featId&quot;:&quot;&quot;,&quot;registered&quot;:true,&quot;expDate&quot;:&quot;2099-01-01&quot;,&quot;key&quot;:&quot;&quot;&#125;&#x27;;<br> &#125;<br><br> location /admin/service/registration/getStatus &#123;<br> default_type application/json;<br> return 200 &#x27;&#123;&quot;deviceStatus&quot;:&quot;&quot;,&quot;planType&quot;:&quot;&quot;,&quot;subscriptions&quot;:&#123;&#125;&#125;&#x27;;<br> &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>将文件保存到指定位置，通过软链接到&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -s /volume/XX/XX/emby.conf /etc/nginx/conf.d/emby.conf<br></code></pre></td></tr></table></figure><h3 id="2-申请证书"><a href="#2-申请证书" class="headerlink" title="2.申请证书"></a>2.申请证书</h3><p>到<a href="https://www.gmcert.org/subForm">https://www.gmcert.org/subForm</a>这个网站申请申请签发证书，参考下面填写：</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305292103557.webp"></p><p>一个是加密算法选 RSA, 密钥长度至少选 2048, 然后除主题名称为<code>mb3admin.com</code>之外其他的按照规则随意填写。点开高级选项：</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305292105504.webp"></p><p>然后勾选 <code>自动包含CA证书链</code> ，最后是证书有效天数，写 <code>824</code> 天即可。下载生成的证书，同时也将CA证书下载起来：</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305292126065.webp"></p><p>将 <code>mb3admin.com.key.pem</code> 和 <code>mb3admin.com.cert.pem</code>文件上传到第一步配置文件中目录位置，我这里是&#x2F;volume6&#x2F;web&#x2F;mb3admin.com&#x2F;。</p><h3 id="3-重启nginx服务"><a href="#3-重启nginx服务" class="headerlink" title="3.重启nginx服务"></a>3.重启nginx服务</h3><p>测试nginx配置文件是否正常</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -t<br></code></pre></td></tr></table></figure><p>重载nginx配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -s reload<br></code></pre></td></tr></table></figure><h3 id="4-将证书文件追加到Emby服务器"><a href="#4-将证书文件追加到Emby服务器" class="headerlink" title="4.将证书文件追加到Emby服务器"></a>4.将证书文件追加到Emby服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat xx/mb3admin.com.cert.pem &gt;&gt; /etc/ssl/certs/ca-certificates.crt<br></code></pre></td></tr></table></figure><h3 id="5-修改DNS或者HOSTS文件"><a href="#5-修改DNS或者HOSTS文件" class="headerlink" title="5.修改DNS或者HOSTS文件"></a>5.修改DNS或者HOSTS文件</h3><p>可以在本地电脑中修改HOSTS文件，将mb3admin.com指向群晖IP地址，也可以直接在路由器中直接进行域名劫持，将mb3admin.com指向群晖IP</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305292124432.webp"></p><h3 id="6-浏览器添加CA证书"><a href="#6-浏览器添加CA证书" class="headerlink" title="6.浏览器添加CA证书"></a>6.浏览器添加CA证书</h3><p>将CA证书添加到本地电脑：</p><p>将GMCert_RSACA01.cert.pem 文件名改为GMCert_RSACA01.cer，双击安装</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305292131273.webp"></p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305292132905.webp"></p><p>然后在浏览器中打开下面两个浏览器，验证是否成功：</p><p><a href="https://mb3admin.com/admin/service/registration/validateDevice">https://mb3admin.com/admin/service/registration/validateDevice</a></p><p><a href="https://mb3admin.com/admin/service/registration/validateDevice/666">https://mb3admin.com/admin/service/registration/validateDevice/666</a></p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305292133083.webp"></p><h3 id="7-在Emby服务器中输入秘钥"><a href="#7-在Emby服务器中输入秘钥" class="headerlink" title="7.在Emby服务器中输入秘钥"></a>7.在Emby服务器中输入秘钥</h3><p>管理Emby Server-Emby Premiere中随便输入一个秘钥，见证奇迹：</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305292136890.webp"></p><p>结束！</p>]]></content>
    
    
    <categories>
      
      <category>分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>群晖</tag>
      
      <tag>分享</tag>
      
      <tag>Emby</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于fluid主题的hexo博客搭建</title>
    <link href="/2023/05/28/%E5%9F%BA%E4%BA%8Efluid%E4%B8%BB%E9%A2%98%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/05/28/%E5%9F%BA%E4%BA%8Efluid%E4%B8%BB%E9%A2%98%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h3><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300822499.webp"></p><p>周末闲着无聊花了一天时间，搭建了一个hexo个人网站，使用的是了fluid主题，感谢作者的无私付出（<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid-dev&#x2F;hexo-theme-fluid: 一款 Material Design 风格的 Hexo 主题)</a>）。</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><p><a href="https://hexo.io/zh-cn/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo支持 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h4 id="1-1-环境准备"><a href="#1-1-环境准备" class="headerlink" title="1.1 环境准备"></a>1.1 环境准备</h4><p>安装Hexo其实非常简单，但是需要先在本地电脑中安装好下面几个软件，另外我还安装了Visual Studio Code及Typora，推荐Typora+picgo作为文章写作软件，支持自动上传图片到图床。</p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li><li><a href="https://www.npmjs.com/">nmp</a></li><li><a href="https://code.visualstudio.com/">Visual Studio Code</a></li><li><a href="https://typora.io/">Typora</a></li></ul><h4 id="1-2安装"><a href="#1-2安装" class="headerlink" title="1.2安装"></a>1.2安装</h4><p>安装好前三个软件后，即可使用npm安装Hexo了，打开一个PowerShell窗口，执行下面命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install <span class="hljs-literal">-g</span> hexo<span class="hljs-literal">-cli</span><br></code></pre></td></tr></table></figure><p>安装以后，可以使用以下两种方式执行 Hexo：</p><ol><li><code>npx hexo</code></li><li>将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用： <code>hexo</code></li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27;</span> &gt;&gt; ~/.profile<br></code></pre></td></tr></table></figure><h4 id="1-3升级"><a href="#1-3升级" class="headerlink" title="1.3升级"></a>1.3升级</h4><p>如果后期需要升级的话，进入博客的目录，先检查更新:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">E:\Blog\hexo&gt; npm outdated<br>Package  Current  Wanted     Latest  Location           Depended by<br>hexo       6.3.0   6.3.0  7.0.0-rc1  node_modules/hexo  hexo<br></code></pre></td></tr></table></figure><p>修改 <code>package.json</code> 文件，基于 <code>Latest</code> 列内容更新版本号，然后更新并检查版本号：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install <span class="hljs-literal">--save</span><br></code></pre></td></tr></table></figure><h3 id="2-建站"><a href="#2-建站" class="headerlink" title="2.建站"></a>2.建站</h3><h4 id="2-1初始化目录"><a href="#2-1初始化目录" class="headerlink" title="2.1初始化目录"></a>2.1初始化目录</h4><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo init &lt;目标文件夹&gt;<br><span class="hljs-built_in">cd</span> &lt;目标文件夹&gt;<br>npm install <br></code></pre></td></tr></table></figure><h4 id="2-2启动网页服务"><a href="#2-2启动网页服务" class="headerlink" title="2.2启动网页服务"></a>2.2启动网页服务</h4><p>等初始化执行完成后，通过<code>hexo s</code>命令即可在本地启动博客站点：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">&gt;hexo s<br>INFO  <span class="hljs-built_in">Start</span> processing<br>INFO  Hexo is running at http://localhost:<span class="hljs-number">4000</span> . Press Ctrl+C to stop.<br></code></pre></td></tr></table></figure><p>浏览器访问<a href="http://localhost:4000就可以看到下面这页面了：">http://localhost:4000就可以看到下面这页面了：</a></p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300845356.webp"></p><h3 id="3-更换主题"><a href="#3-更换主题" class="headerlink" title="3.更换主题"></a>3.更换主题</h3><h4 id="3-1安装主题"><a href="#3-1安装主题" class="headerlink" title="3.1安装主题"></a>3.1安装主题</h4><p><strong>方式一</strong></p><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml (opens new window)</a>内容复制过去。</p><p><strong>方式二</strong></p><p>下载 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">最新 release 版本 (opens new window)</a>解压到 themes 目录，并将解压出的文件夹重命名为 <code>fluid</code>。</p><h4 id="3-2指定主题"><a href="#3-2指定主题" class="headerlink" title="3.2指定主题"></a>3.2指定主题</h4><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><h4 id="3-3创建「关于页」"><a href="#3-3创建「关于页」" class="headerlink" title="3.3创建「关于页」"></a>3.3创建「关于页」</h4><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里写关于页的正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span><br></code></pre></td></tr></table></figure><blockquote><p><em><strong>注意</strong></em></p><p><code>layout: about</code> 必须存在，并且不能修改成其他值，否则不会显示头像等样式。</p></blockquote><p>完了执行下面两条命令，就可以看到新主题的样式了：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo clean<br>hexo s<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300846684.webp"></p><h4 id="3-4更新主题"><a href="#3-4更新主题" class="headerlink" title="3.4更新主题"></a>3.4更新主题</h4><p><strong>方式一</strong></p><blockquote><p>适用于通过 Npm 安装主题。</p></blockquote><p>在博客目录下执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm update --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p><strong>方式二</strong></p><blockquote><p>适用于通过 Release 压缩包安装主题，且没有自行修改任何代码的情况。</p></blockquote><ol><li>先将原文件夹重命名为别的名称，例如 <code>fluid-bkp</code>，用于升级失败进行回退；</li><li>按照安装步骤，重新下载 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">release (opens new window)</a>并解压重命名为 <code>fluid</code>；</li><li>如果某些配置发生了变化（改名或弃用），release 的说明里会特别提示，同步修改原配置文件即可。</li></ol><p><strong>方式三</strong></p><blockquote><p>适用于自定义了一些代码，或想体验其他分支的情况，以 dev 分支为例。</p></blockquote><ol><li>确定自己的 fluid 目录已经开启 git，并且所有改动都已 commit；</li><li>把 fluid 仓库的 develop 分支拉取到自己当前的分支上（也可新建一个分支再拉取）：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull https://github.com/fluid-dev/hexo-theme-fluid.git develop<br></code></pre></td></tr></table></figure><ol start="3"><li>解决代码冲突，保留自己修改的部分（如何解决冲突可自行搜索）</li></ol><h4 id="3-5更多主题配置"><a href="#3-5更多主题配置" class="headerlink" title="3.5更多主题配置"></a>3.5更多主题配置</h4><p>更多的主题配置请参考官方配置指南：</p><p><a href="https://hexo.fluid-dev.com/docs/guide/">配置指南 | Hexo Fluid 用户手册 (fluid-dev.com)</a></p><h3 id="4-部署到Github"><a href="#4-部署到Github" class="headerlink" title="4.部署到Github"></a>4.部署到Github</h3><p>通过 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a> 插件可以实现一键将博客部署到github提供的 pages 服务。</p><h4 id="4-1新建存储库"><a href="#4-1新建存储库" class="headerlink" title="4.1新建存储库"></a>4.1新建存储库</h4><p>建立名为 <code>&lt;repository的名字&gt;.github.io</code> 的储存库，这样你的博客网址为 <code>&lt;你的 GitHub 用户名&gt;.github.io</code>，例如下面这样：</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300846389.webp"></p><h4 id="4-1安装hexo-deployer-git"><a href="#4-1安装hexo-deployer-git" class="headerlink" title="4.1安装hexo-deployer-git"></a>4.1安装hexo-deployer-git</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install hexo<span class="hljs-literal">-deployer-git</span> <br></code></pre></td></tr></table></figure><h4 id="4-2修改-config-yml文件"><a href="#4-2修改-config-yml文件" class="headerlink" title="4.2修改_config.yml文件"></a>4.2修改<code>_config.yml</code>文件</h4><p>在配置文件中追加下面的内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/conscloud/conscloud.github.io</span><br>  <span class="hljs-comment"># example, https://github.com/hexojs/hexojs.github.io</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span><br>  <span class="hljs-attr">ignore_hidden:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h4 id="4-3部署发布"><a href="#4-3部署发布" class="headerlink" title="4.3部署发布"></a>4.3部署发布</h4><p>Commit 并 push 到默认分支上，当部署完成后，在 <code>gh-pages</code> 分支可以找到生成的网页，并在 GitHub 储存库中，前往 <code>Settings &gt; Pages &gt; Source</code>，并将 branch 改为 <code>gh-pages</code>。</p><p>部署执行下面的命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo clean &amp;&amp; hexo deploy<br></code></pre></td></tr></table></figure><p>前往 <code>https://&lt;你的 GitHub 用户名&gt;.github.io/</code> 查看网站。</p><h3 id="5-部署到vercel"><a href="#5-部署到vercel" class="headerlink" title="5.部署到vercel"></a>5.部署到vercel</h3><p>部署到github一个是速度不够快，另一个是国内的网络环境有时可能无法访问，推荐部署到<a href="https://vercel.com/">Vercel</a>,配合自定义域名，可以提高访问速度。</p><h4 id="5-1新建工程"><a href="#5-1新建工程" class="headerlink" title="5.1新建工程"></a>5.1新建工程</h4><p>首先先注册一个vercel账号后，在页面中点击<code>New Project</code>，创建工程。</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300846837.webp"></p><p>然后通过绑定的 <code>github</code> 或者导入需要部署的项目。</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300846729.webp"></p><p>因为导入的项目是打包好的静态页，<code>FRAMEWORK PRESET</code> 选择 <code>Other</code> 。</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300847718.webp"></p><p>点击 <code>deployed</code> 进行部署，如果部署失败可以查看报错信息是不是上一步的某些选项没有覆盖。部署成功后会进入如图所示的界面：</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300847721.webp"></p><h4 id="5-2自定义域名"><a href="#5-2自定义域名" class="headerlink" title="5.2自定义域名"></a>5.2自定义域名</h4><p><strong>域名可以购买或者去<a href="https://www.freenom.com/zh/index.html?lang=zh">Freenom</a>申请免费的域名，但是Freenom域名听说有可能存在被收回的风险。</strong></p><ul><li>默认情况下部署成功后 <code>vercel</code> 会给你生成一个默认的域名，如果想要修改成自己的域名可将域名名称修改成自己的。</li><li>当选择修改成自己的域名名称后，<code>vercel</code> 会检查域名指向的 <code>DNS</code> 对不对，如果不对的话会提示你域名的 DNS 应该如何配置，按照 <code>vercel</code> 提示的 <code>DNS</code> 信息</li></ul><p>在自己的域名的 <code>DNS</code> 配置中进行配置，如图在 setting 中配置自定义域名：</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300848352.webp"></p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300848160.webp"></p><p>待生效后，就可以用自定义的域名访问了。</p><h4 id="5-4修改Vrecel服务器区域"><a href="#5-4修改Vrecel服务器区域" class="headerlink" title="5.4修改Vrecel服务器区域"></a>5.4修改Vrecel服务器区域</h4><p>在Settings-Functions中修改区域为香港。</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300848122.webp"></p><p>我用的是freenom的免费域名，通过cloudfare管理，服务器区域修改为香港后，在晚上高峰期测试的延迟情况：</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300849770.webp"></p><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h3><p>好像就是这样就完事了。</p><p>哦！感谢下列文章作者：</p><p><a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a></p><p><a href="https://hexo.fluid-dev.com/docs/guide/">配置指南 | Hexo Fluid 用户手册 (fluid-dev.com)</a></p><p><a href="https://blog.17lai.site/posts/40300608/#!">三万字教程]基于Hexo的matery主题搭建博客并深度优化一站式完全教程 | 夜法之书 (17lai.site)</a></p><p><a href="https://hexo.fluid-dev.com/posts/hexo-vercel/#">Vercel部署高级用法教程 - Hexo Theme Fluid (fluid-dev.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>HEXO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>群晖无法启用防火墙问题修复</title>
    <link href="/2023/05/28/%E7%BE%A4%E6%99%96%E6%97%A0%E6%B3%95%E5%90%AF%E7%94%A8%E9%98%B2%E7%81%AB%E5%A2%99%E9%97%AE%E9%A2%98%E4%BF%AE%E5%A4%8D/"/>
    <url>/2023/05/28/%E7%BE%A4%E6%99%96%E6%97%A0%E6%B3%95%E5%90%AF%E7%94%A8%E9%98%B2%E7%81%AB%E5%A2%99%E9%97%AE%E9%A2%98%E4%BF%AE%E5%A4%8D/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300957269.webp"></p><p><strong>现象</strong>：系统版本DSM7.1，当选择启用防火墙时，编辑规则会报“无法加载配置文件数据”，也无法在防火墙配置规则中进行下拉选择。</p><h3 id="启用SSH服务登录到群晖后台"><a href="#启用SSH服务登录到群晖后台" class="headerlink" title="启用SSH服务登录到群晖后台"></a>启用SSH服务登录到群晖后台</h3><p>如果不知道如何开启SSH服务，请参考：<a href="https://www.okko.tk/2023/05/28/%E7%BE%A4%E6%99%96%E5%BC%80%E5%90%AFSSH%E5%8F%8A%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E9%85%8D%E7%BD%AE">群晖开启SSH及免密码登录配置 - ZhJy的随笔</a></p><h3 id="修复防火墙配置文件"><a href="#修复防火墙配置文件" class="headerlink" title="修复防火墙配置文件"></a>修复防火墙配置文件</h3><ol><li>分别查看<code>/usr/syno/etc/firewall.d/</code>及<code>/usr/syno/etc.defaults/firewall.d</code>两个目录下是否至少有三个json文件，我这分别为1.json、2.json及firewall_settings.json三个文件</li></ol><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300957310.webp"></p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300958132.webp"></p><ol><li>使用cat命令分别查看1.json及2.json文件内容是否为空，或者json格式不正确，我这里是在&#x2F;usr&#x2F;syno&#x2F;etc&#x2F;firewall.d&#x2F;这个目录下的两个数字开头的文件内容为空，而etc.defaults&#x2F;firewall.d&#x2F;下面同名的文件是有内容的。</li><li>将&#x2F;usr&#x2F;syno&#x2F;etc.defaults&#x2F;firewall.d&#x2F;下的1.json、2.json复制到&#x2F;usr&#x2F;syno&#x2F;etc&#x2F;firewall.d&#x2F;目录下。</li><li>回到页面验证，现在已经可以开户防火墙，并配置相关规则了</li></ol><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300958438.webp"></p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>That is all!</p>]]></content>
    
    
    <categories>
      
      <category>群晖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>群晖</tag>
      
      <tag>DSM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>群晖开启SSH及免密码登录配置</title>
    <link href="/2023/05/28/%E7%BE%A4%E6%99%96%E5%BC%80%E5%90%AFSSH%E5%8F%8A%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/05/28/%E7%BE%A4%E6%99%96%E5%BC%80%E5%90%AFSSH%E5%8F%8A%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300820463.webp"></p><p>群晖开启root账户免密登录与linux服务器的操作大致相同。 </p><p>我的群晖DSM版本是7.1.1</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300956813.webp"></p><h3 id="1-开启SSH服务"><a href="#1-开启SSH服务" class="headerlink" title="1.开启SSH服务"></a>1.开启SSH服务</h3><p>群晖从7开始默认关闭了“admin”账户，并禁用最大权限的系统账户“root”登录网页控制台。</p><p>先使用群晖安装时建立的普通管理员账户（加入了administrators用户组的用户）登录web控制台后，依次点击“控制面板”-“终端机和SNMP”，勾选“启用SSH功能”，再点击右下角的“应用”按钮即完成开启SSH服务。<strong>建议修改默认端口号。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300956733.webp"></p><h3 id="2-允许ROOT账号登录"><a href="#2-允许ROOT账号登录" class="headerlink" title="2.允许ROOT账号登录"></a>2.允许ROOT账号登录</h3><p>通过普通管理员账户进行ssh登录，输入sudo - i 回车后再次输入管理员密码，就能切换到root账户。</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300954437.webp"></p><p>给root账户设置密码,其中xxx为你想要设置的密码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">synouser --setpw root xxx<br></code></pre></td></tr></table></figure><p>修改sshd_config文件的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">PermitRootLogin <span class="hljs-built_in">yes</span><span class="hljs-comment">#允许root登录</span><br>PasswordAuthentication <span class="hljs-built_in">yes</span>          <span class="hljs-comment">#开启密码认证</span><br>ChallengeResponseAuthentication no<br>UsePAM <span class="hljs-built_in">yes</span>    <span class="hljs-comment">#开户密码认证</span><br></code></pre></td></tr></table></figure><p>修改完后，别忘记保存。</p><h3 id="3-开启密钥登录"><a href="#3-开启密钥登录" class="headerlink" title="3.开启密钥登录"></a>3.开启密钥登录</h3><p>确认在root用户下，输入“ssh-keygen”命令创建密钥，id_rsa是新生成的私钥，id_rsa.pub是对应的公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -b 2048 -C &quot;root_rsa_key&quot;<br></code></pre></td></tr></table></figure><p>将id_rsa.pub文件内容追加到“&#x2F;root&#x2F;.ssh&#x2F;authorized_keys”文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys<br></code></pre></td></tr></table></figure><p><em>注意authorized_keys权限至少是root账户有rw（否则执行以下2条命令“chmod 700 ~&#x2F;.ssh”、“ chmod 600 ~&#x2F;.ssh&#x2F;authorized_keys”）</em></p><p>将id_rsa文件复制到本地，重启ssh服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">synosystemctl reload sshd<br>synosystemctl restart sshd<br></code></pre></td></tr></table></figure><p>在本地就可以通过工具（如xshell等）免密码连接到群晖了。</p><p>最后可以修改sshd_config文件，禁止使用密码认证登录，提高安全性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">PasswordAuthentication no          <span class="hljs-comment">#关闭密码认证</span><br></code></pre></td></tr></table></figure><p><strong>最后，如果修改sshd_config文件导致ssh功能无法使用而其他功能正常，群晖可以正常登录网页控制台，可以开启telnet,把错误的sshd_config改回去！</strong></p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p><strong>群晖353条syno命令:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br></pre></td><td class="code"><pre><code class="hljs bash">syno-abuser-blocklist-checker<br>syno-dump-core.sh<br>syno-init-disk-health-db<br>syno-letsencrypt<br>syno8021Xtool<br>synoRTCTime<br>syno_adv_test<br>syno_bios_bootperf_record<br>syno_disk_config_check<br>syno_disk_ctl<br>syno_disk_data_collector<br>syno_disk_db_update<br>syno_disk_dsl<br>syno_disk_dump<br>syno_disk_firm_status_update<br>syno_disk_health_predict<br>syno_disk_health_record<br>syno_disk_latency_collector<br>syno_disk_log_convert<br>syno_disk_log_import_from_xml<br>syno_disk_performance_cache_update<br>syno_disk_performance_delete_record<br>syno_disk_performance_monitor<br>syno_disk_schedule_test<br>syno_disk_smart_mail_send<br>syno_disk_sysfs_get<br>syno_disk_sysfs_set<br>syno_disk_test_log_import_from_xml<br>syno_disk_test_scheduler_set<br>syno_disk_testlog_convert<br>syno_disk_wcache_config_init<br>syno_disk_wdda<br>syno_drive_bundle<br>syno_ew_check.sh<br>syno_expansion<br>syno_fan_debug<br>syno_hdd_util<br>syno_hibernation_debug<br>syno_hook_trgr<br>syno_hw_video_transcoding.sh<br>syno_ip_conflict_detect<br>syno_iptables_common<br>syno_led_brightness<br>syno_led_mask_on<br>syno_mem_check<br>syno_mem_single_channel_action<br>syno_mib_disk_mapping<br>syno_mib_disk_tool<br>syno_microp_control<br>syno_predict_disk_health<br>syno_pstore_collect<br>syno_scemd_connector<br>syno_sched_poweroff<br>syno_smart_result_collect<br>syno_smart_test<br>syno_spectre_meltdown_tool<br>syno_ssd_trim<br>syno_ssd_trim_schedule<br>syno_storage_bkgrd_task<br>syno_swap_ctl<br>syno_syslog_check_ctl<br>syno_system_dump<br>syno_update_disk_log_information<br>syno_user_info<br>syno_volume_analyze<br>synoabnormalloginmail<br>synoabnormalloginnotify<br>synoacltool<br>synoafp<br>synoagentregisterd<br>synoagentregistertool<br>synoappbkp<br>synoappconfigcache<br>synoappnotify<br>synoapppriv_updater<br>synoarchive<br>synoarchivetool<br>synoauth<br>synoautoblock<br>synoautonano<br>synobackgroundtask<br>synobackup<br>synobackupd<br>synobandwidth<br>synobios_uninit<br>synobootseq<br>synobootupcheck<br>synobtrfssnap<br>synobtrfssnapusage<br>synocacheadvisor<br>synocacheadvisord<br>synocacheclient<br>synocachepinfiled<br>synocachepinfiletool<br>synocachepinfiletool-status<br>synocachepinfiletool.sh<br>synocfgen<br>synocgid<br>synocgitool<br>synocheckgroup<br>synocheckhotspare<br>synocheckinfo<br>synocheckiscsitrg<br>synochecknetworkcfg<br>synocheckshare<br>synocheckuser<br>synocleaner<br>synocloudserviceauth<br>synocmsclient<br>synocodectool<br>synoconfbkp<br>synoconfd<br>synocontentextract<br>synocontentextractd<br>synocontentsearchutils<br>synocopy<br>synocredential<br>synocrond<br>synocrtchecksum<br>synocrtregister<br>synocrtunregister<br>synocsp<br>synodatacollect<br>synodataverifier<br>synodate<br>synodbudconfig<br>synodbudd<br>synodbudgetinfo<br>synodbudinfo<br>synodbudisrunning<br>synodbudupdate<br>synodbudvcdiff<br>synodbudvolume<br>synodctest<br>synodd<br>synoddnsinfo<br>synodisk<br>synodiskdatacollect<br>synodiskfind<br>synodisklatencyd<br>synodiskmanagertool<br>synodiskpathparse<br>synodiskport<br>synodiskstat<br>synodiskwddad<br>synodsdefault<br>synodsinfo<br>synodsmloginhealthcheck<br>synodsmnotify<br>synoethinfo<br>synoexternal<br>synoextractjep<br>synofanconfig<br>synofilehandle<br>synofilehandlecleancache<br>synofileutil<br>synofirewall<br>synofirewallUpdater<br>synoflashcache<br>synoflashcachechecknotifymissing<br>synoflashcacheshareapplytool<br>synoflvconv<br>synofsbdctl<br>synofstool<br>synoftpchecker<br>synogear<br>synogetkeyvalue<br>synogetstate.sh<br>synogpoclientd<br>synogrinst<br>synogroup<br>synohacore<br>synohtmlhandler<br>synohwctl<br>synoindex<br>synoindex-bin-scheduler<br>synoindex-bin-sdk-hook-db-tool<br>synoindex_mgr<br>synoindex_package.sh<br>synoindexd<br>synoindexnotifyd<br>synoindexplugind<br>synoindexscand<br>synoindexworkerd<br>synoinsid<br>synoiscsiep<br>synoiscsitop<br>synoiscsiwebapi<br>synokerneltz<br>synolanstatus<br>synoldapclient<br>synoldapclientd<br>synolegalnotifier<br>synolog-linker<br>synologaccd<br>synologand<br>synologanutil<br>synologconfgen<br>synologconvert<br>synologrotated<br>synologset<br>synologset1<br>synomediaparser<br>synomediaparserd<br>synomibclient-event<br>synomibtool<br>synomigratewallpaper<br>synomkflv<br>synomkflvd<br>synomkthumb<br>synomkthumbd<br>synomoduletool<br>synomount<br>synomustache<br>synomyds<br>synonclient_send<br>synonet<br>synonetd<br>synonetdtool<br>synoneteventd<br>synonetseqadj<br>synonfs<br>synonfstest<br>synonfstop<br>synonode<br>synonotify<br>synonotifyconvert<br>synonotifydbtransfer<br>synonvme<br>synootp<br>synoovstool<br>synopartition<br>synopasswordmail<br>synopayment<br>synoperfeventd<br>synoperformancediagnose<br>synopersonalupdater<br>synopftest<br>synopingpong<br>synopkg<br>synopkgctl<br>synopkghelper<br>synopkicompatsync<br>synoplatform<br>synoportforward<br>synopostgres<br>synopoweroff<br>synopppoe<br>synopreferencedir<br>synoprint<br>synopsql<br>synopyntlmd<br>synoquota<br>synoraid5stat<br>synoraidtool<br>synorbdctl<br>synorecycle<br>synorelayd<br>synorenewdefaultcert<br>synoretainer<br>synoretentionconf<br>synoretentiontest<br>synoretentiontestutil.sh<br>synorollinggroupid<br>synorouterportfwd<br>synoroutertool<br>synorsyncdtool<br>synosavetime<br>synoscgi<br>synoscgi-socket-get-memory.js<br>synoscgi________________________________________________________<br>synoscgi_socket.js<br>synoschedmulti<br>synoschedmultirun<br>synoschedtask<br>synoschedtool<br>synoscheduled<br>synosdutils<br>synosearch<br>synosearchagent<br>synoselfcheck<br>synoselfcheck-min<br>synoservicemigrate<br>synosetkeyvalue<br>synosetnoatime<br>synoshare<br>synosharequota<br>synosharesnapshot<br>synosharesnaptool<br>synosharesnaptree<br>synosharesnaptree_reconstruct.sh<br>synosharingbackup<br>synosharingchecker<br>synosharingcron<br>synosharingurl<br>synoshortcutmigrate.min.js<br>synoshutdown<br>synosmartblock<br>synosnapschedtask.sh<br>synosnmp_communicator<br>synosnmpcd<br>synosnmpcd_db_updater<br>synosocket<br>synospace<br>synospace.sh<br>synossdbundlehotplug<br>synossdbundlemonitor<br>synosshdutils<br>synostgdisk<br>synostgpool<br>synostgreclaim<br>synostgsysraid<br>synostgtask<br>synostgvolume<br>synostorage<br>synostoragecore<br>synostoraged<br>synosubvoltype<br>synosupportchannelchecker<br>synosyncdctime<br>synosyslogcheck<br>synosyslogmail<br>synosystemctl<br>synotaskmgr<br>synotc<br>synotc_common<br>synothumb<br>synotifyd<br>synotifydutil<br>synotimecontrol<br>synotlstool<br>synotokenmgr<br>synotune<br>synoupgrade<br>synoupgradepreserve<br>synoupnp<br>synoups<br>synoups_battery_notify.sh<br>synoupscommon<br>synousb<br>synousbdisk<br>synouser<br>synouserdir<br>synouserhome<br>synovolumesnapshot<br>synovpnc<br>synovspace<br>synovspace_wrapper<br>synow3<br>synow3tool<br>synowebapi<br>synowedjat-exec<br>synowin<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>群晖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>群晖</tag>
      
      <tag>DSM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Openwrt状态信息推送到HA的两种实现方法</title>
    <link href="/2023/05/28/Openwrt%E7%8A%B6%E6%80%81%E4%BF%A1%E6%81%AF%E6%8E%A8%E9%80%81%E5%88%B0HA%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/"/>
    <url>/2023/05/28/Openwrt%E7%8A%B6%E6%80%81%E4%BF%A1%E6%81%AF%E6%8E%A8%E9%80%81%E5%88%B0HA%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300953810.webp"></p><p>家里目前使用x86平台软路由作为主路由拨号，在群晖vmm虚拟机中安装了HAOS智能家居系统，HA中基于upnp的集成组件对路由器的监控项目不是很全，因此想将一些路由器的状态信息接入到HA中进行实时监控展示。这里介绍两种方法：</p><h3 id="一、通过http模式推送"><a href="#一、通过http模式推送" class="headerlink" title="一、通过http模式推送"></a>一、通过http模式推送</h3><p>1、在进入HA系统-用户-长期访问令牌-创建令牌，新建一个长期访问令牌</p><p>2、写一个shell脚本openwrt_post.sh，获取路由器的状态信息，我这里取了CPU频率、温度、使用率、内存使用率、科学上网及开机时长。脚本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>cpu_freq=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq|awk &#x27;&#123;print ($1)/1000&#125;&#x27;)<br><br>temp_cpu=$(sensors|grep °C|sed -nr &#x27;s#^Core.*:.*\+(.*)°C .*#\1#gp&#x27;|sort -nr|head -n1&#x27;&#x27;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">cpu_freq=$(<span class="hljs-built_in">cat</span> /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq|awk <span class="hljs-string">&#x27;&#123;print ($1)/1000&#125;&#x27;</span>)</span><br><br>function getcpu()&#123;<br><br>local AT=$(cat /proc/stat|grep &quot;^cpu &quot;|awk &#x27;&#123;print $2+$3+$4+$5+$6+$7+$8 &quot; &quot; $2+$3+$4+$7+$8&#125;&#x27;)<br><br>sleep 1<br><br>local BT=$(cat /proc/stat|grep &quot;^cpu &quot;|awk &#x27;&#123;print $2+$3+$4+$5+$6+$7+$8 &quot; &quot; $2+$3+$4+$7+$8&#125;&#x27;)<br><br>printf &quot;%.01f&quot; $(echo $&#123;AT&#125; $&#123;BT&#125;|awk &#x27;&#123;print (($4-$2)/($3-$1))*100&#125;&#x27;)<br><br>&#125;<br><br>cpu_used=$(getcpu)<br><br>mem_used=$(free -m|sed -n &#x27;2p&#x27;|awk &#x27;&#123;print&quot;&quot;($3/$2)*100&#125;&#x27;)<br><br>ssr_server=`cat /etc/config/shadowsocksr |grep global_server|awk -F\&#x27; &#x27;&#123;print $2&#125;&#x27;`<br><br>up_times=$(cat /proc/uptime| awk -F. &#x27;&#123;run_days=$1 / 86400;run_hour=($1 % 86400)/3600;run_minute=($1 % 3600)/60;run_second=$1 % 60;printf(&quot;%d天%d时%d分%d秒\n&quot;,run_days,run_hour,run_minute,run_second)&#125;&#x27;)<br><br>post_data=&quot;&#123;\&quot;state\&quot;:\&quot;$temp_cpu\&quot;, \&quot;attributes\&quot;:&#123;\&quot;temp_cpu\&quot;:\&quot;$temp_cpu\&quot;, \&quot;cpu_freq\&quot;:\&quot;$cpu_freq\&quot;, \&quot;cpu_used\&quot;:\&quot;$cpu_used\&quot;,\&quot;mem_used\&quot;:\&quot;$mem_used\&quot;,\&quot;ssr_server\&quot;:\&quot;$ssr_server\&quot;,\&quot;up_times\&quot;:\&quot;$up_times\&quot;&#125;&#125;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$post_data</span></span><br><br>curl -X POST -H &quot;Authorization: Bearer 第一步建的长期访问令牌&quot; -H &quot;Content-Type: application/json&quot; -d &quot;$post_data&quot; http://192.168.XX.XX:8123/api/states/input_number.openwrtinfo<br></code></pre></td></tr></table></figure><p>3、通过crontab任务调度或者写一个watch脚本循环调用，即可通过post形式将采集到的信息推送到HA。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>while :<br>do<br>        if ! ps | grep -w openwrt_post.sh | grep -v grep<br>        then                                    <br>                /opt/openwrt_post.sh<br>        sleep 60#60秒取一次，可自行修改间隔<br>        fi                       <br>done<br></code></pre></td></tr></table></figure><p>4、在HA中添加配置文件，将获取到的信息转为实体</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">sensor:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">platform:</span> <span class="hljs-string">template</span><br>    <span class="hljs-attr">sensors:</span><br>      <span class="hljs-attr">openwrtinfo_temp_cpu:</span><br>        <span class="hljs-attr">unit_of_measurement:</span> <span class="hljs-string">°C</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; states.input_number.openwrtinfo.attributes.temp_cpu &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">openwrtinfo_cpu_freq:</span><br>        <span class="hljs-attr">unit_of_measurement:</span> <span class="hljs-string">MHz</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; states.input_number.openwrtinfo.attributes.cpu_freq &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">openwrtinfo_cpu_used:</span><br>        <span class="hljs-attr">unit_of_measurement:</span> <span class="hljs-string">&quot;%&quot;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; states.input_number.openwrtinfo.attributes.cpu_used &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">openwrtinfo_mem_used:</span><br>        <span class="hljs-attr">unit_of_measurement:</span> <span class="hljs-string">&quot;%&quot;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; states.input_number.openwrtinfo.attributes.mem_used &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">openwrtinfo_wan_sent:</span><br>        <span class="hljs-attr">unit_of_measurement:</span> <span class="hljs-string">GB</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrtinfo_wan_sent</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; states.sensor.openwrt_router_b_sent.state | multiply(1/1024/1024/1024) | round(2) &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">openwrtinfo_wan_received:</span><br>        <span class="hljs-attr">unit_of_measurement:</span> <span class="hljs-string">GB</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrtinfo_wan_received</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; states.sensor.openwrt_router_b_received.state | multiply(1/1024/1024/1024) | round(2) &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">openwrtinfo_ssr_server:</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; states.input_number.openwrtinfo.attributes.ssr_server &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">openwrtinfo_up_times:</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; states.input_number.openwrtinfo.attributes.up_times &#125;&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><h3 id="二、通过mqtt推送"><a href="#二、通过mqtt推送" class="headerlink" title="二、通过mqtt推送"></a>二、通过mqtt推送</h3><p>1、先在openwrt中安装好mqtt，<code>mosquitto-client-nosll、libmosquitto-nossl</code>这两个包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">opkg update<br>opkg install mosquitto-client-nossl libmosquitto-nossl<br></code></pre></td></tr></table></figure><p>2、内网已经部署了MQTT服务器。</p><p>3、监控脚本与方法一大部分相同，将最后一步的发送命令修改如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mosquitto_pub -r -L mqtt://mqtt:mqtt@192.168.XX.XX:1883/openwrtinfo -m &quot;$post_data&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">mqtt:mqtt前面一个为mqtt用户名：mqtt密码</span><br></code></pre></td></tr></table></figure><p>​完整脚本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>cpu1_freq=$(cat /sys/devices/system/cpu/cpufreq/policy0/scaling_cur_freq|awk &#x27;&#123;print ($1)/1000&#125;&#x27;)<br>cpu2_freq=$(cat /sys/devices/system/cpu/cpufreq/policy1/scaling_cur_freq|awk &#x27;&#123;print ($1)/1000&#125;&#x27;)<br>temp_cpu=$(sensors|grep °C|sed -nr &#x27;s#^Core.*:.*\+(.*)°C .*#\1#gp&#x27;|sort -nr|head -n1&#x27;&#x27;)<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">getcpu</span></span>()&#123;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">local</span> AT=$(<span class="hljs-built_in">cat</span> /proc/stat|grep <span class="hljs-string">&quot;^cpu &quot;</span>|awk <span class="hljs-string">&#x27;&#123;print $2+$3+$4+$5+$6+$7+$8 &quot; &quot; $2+$3+$4+$7+$8&#125;&#x27;</span>)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">sleep</span> 1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">local</span> BT=$(<span class="hljs-built_in">cat</span> /proc/stat|grep <span class="hljs-string">&quot;^cpu &quot;</span>|awk <span class="hljs-string">&#x27;&#123;print $2+$3+$4+$5+$6+$7+$8 &quot; &quot; $2+$3+$4+$7+$8&#125;&#x27;</span>)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%.01f&quot;</span> $(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;AT&#125;</span> <span class="hljs-variable">$&#123;BT&#125;</span>|awk <span class="hljs-string">&#x27;&#123;print (($4-$2)/($3-$1))*100&#125;&#x27;</span>)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">&#125;</span><br>cpu_used=$(top -b -n 1|awk &#x27;NR==2&#123;print$8&#125;&#x27;|awk &#x27;&#123;print 100-$1&#125;&#x27;)<br>mem_used=$(free -m|sed -n &#x27;2p&#x27;|awk &#x27;&#123;printf &quot;%.2f&quot;,($3/$2)*100&#125;&#x27;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">ip=$(curl -s https://api.ipify.org)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">for</span>((y=<span class="hljs-number">0</span>;y&lt;<span class="hljs-variable">$&#123;#array[*]&#125;</span>;y++))</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">do</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$ip</span>&quot;</span> = <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;array[y]&#125;</span>&quot;</span> ]];<span class="hljs-keyword">then</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> ssr_server=<span class="hljs-variable">$&#123;array[y+1]&#125;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> <span class="hljs-keyword">fi</span></span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">done</span></span><br>ssr_server=$(awk &#x27;/^&#x27;$(curl -s https://api.ipify.org)&#x27;/ &#123;print $2&#125;&#x27; /opt/myscripts/ssrserver)<br>hostname=$(cat /etc/config/system |grep hostname |awk -F\&#x27; &#x27;&#123;print $2&#125;&#x27;)<br>cpu_brand=$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq)<br>cpu_arch=$(uname -m)<br>kernel=$(uname -r)<br>releases=$(echo &quot;$(cat /etc/openwrt_release |sed -n &#x27;1p&#x27;|awk -F\&#x27; &#x27;&#123;print $2&#125;&#x27;) $(cat /etc/openwrt_release |sed -n &#x27;6p&#x27;|awk -F\&#x27; &#x27;&#123;print $2&#125;&#x27;) $(cat /etc/openwrt_version)&quot;)<br>boot_time=$(date -d &quot;@$(( $(date +%s) - $(awk -F. &#x27;&#123;print $1&#125;&#x27; /proc/uptime) ))&quot; +&quot;%Y-%m-%d %H:%M:%S&quot;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">ssr_server=`<span class="hljs-built_in">cat</span> /etc/config/shadowsocksr |grep global_server|awk -F\<span class="hljs-string">&#x27; &#x27;</span>&#123;<span class="hljs-built_in">print</span> <span class="hljs-variable">$2</span>&#125;<span class="hljs-string">&#x27;`</span></span><br>up_times=$(cat /proc/uptime| awk -F. &#x27;&#123;run_days=$1 / 86400;run_hour=($1 % 86400)/3600;run_minute=($1 % 3600)/60;run_second=$1 % 60;printf(&quot;%d天%d时%d分%d秒\n&quot;,run_days,run_hour,run_minute,run_second)&#125;&#x27;)<br><br>post_data=&quot;&#123;\&quot;temp_cpu\&quot;:\&quot;$temp_cpu\&quot;, \&quot;cpu1_freq\&quot;:\&quot;$cpu1_freq\&quot;,\&quot;cpu2_freq\&quot;:\&quot;$cpu2_freq\&quot;, \&quot;cpu_used\&quot;:\&quot;$cpu_used\&quot;,\&quot;mem_used\&quot;:\&quot;$mem_used\&quot;,\&quot;ssr_server\&quot;:\&quot;$ssr_server\&quot;,\&quot;up_times\&quot;:\&quot;$up_times\&quot;,\&quot;hostname\&quot;:\&quot;$hostname\&quot;, \&quot;cpu_brand\&quot;:\&quot;$cpu_brand\&quot;, \&quot;cpu_arch\&quot;:\&quot;$cpu_arch\&quot;,\&quot;kernel\&quot;:\&quot;$kernel\&quot;, \&quot;releases\&quot;:\&quot;$releases\&quot;, \&quot;boot_time\&quot;:\&quot;$boot_time\&quot;&#125;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">echo $post_data</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">ssr_server=`cat /etc/config/shadowsocksr |grep global_server|awk -F\&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br>mosquitto_pub -r -L mqtt://mqtt:mqtt@mqtt.local:1883/openwrtinfo -m &quot;$post_data&quot;<br></code></pre></td></tr></table></figure><p>4、在HA中增加配置文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mqtt:</span><br>  <span class="hljs-attr">sensor:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_cpu_tem&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_cpu_tem</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br>        <span class="hljs-attr">unit_of_measurement:</span> <span class="hljs-string">&#x27;°C&#x27;</span><br>        <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;mdi:thermometer&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.temp_cpu &#125;&#125;</span>&#x27;</span>        <br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_cpu1_freq&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_cpu1_freq</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br>        <span class="hljs-attr">unit_of_measurement:</span> <span class="hljs-string">&#x27;MHz&#x27;</span><br>        <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;mdi:pulse&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.cpu1_freq &#125;&#125;</span>&#x27;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_cpu2_freq&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_cpu2_freq</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br>        <span class="hljs-attr">unit_of_measurement:</span> <span class="hljs-string">&#x27;MHz&#x27;</span><br>        <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;mdi:pulse&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.cpu2_freq &#125;&#125;</span>&#x27;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_cpu_used&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_cpu_used</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br>        <span class="hljs-attr">unit_of_measurement:</span> <span class="hljs-string">&#x27;%&#x27;</span><br>        <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;mdi:cpu-64-bit&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.cpu_used &#125;&#125;</span>&#x27;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_mem_used&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_mem_used</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br>        <span class="hljs-attr">unit_of_measurement:</span> <span class="hljs-string">&#x27;%&#x27;</span><br>        <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;mdi:memory&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.mem_used &#125;&#125;</span>&#x27;</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">platform:</span> <span class="hljs-string">mqtt</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_ssr_server&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_ssr_server</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br><br>        <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;mdi:vpn&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.ssr_server &#125;&#125;</span>&#x27;</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">platform:</span> <span class="hljs-string">mqtt</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_up_times&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_up_times</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br><br>        <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;mdi:clock-time-four-outline&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.up_times &#125;&#125;</span>&#x27;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_name&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_name</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.hostname &#125;&#125;</span>&#x27;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_cpu_brand&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_cpu_brand</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.cpu_brand &#125;&#125;</span>&#x27;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_cpu_arch&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_cpu_arch</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.cpu_arch &#125;&#125;</span>&#x27;</span><br>        <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_kernel&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_kernel</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.kernel &#125;&#125;</span>&#x27;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_releases&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_releases</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.releases &#125;&#125;</span>&#x27;</span><br>        <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_boottime&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_boottime</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.boot_time &#125;&#125;</span>&#x27;</span><br><br></code></pre></td></tr></table></figure><p>5、通过crontab任务调度或者写一个watch脚本循环调用，即可通过mqtt形式将采集到的信息推送到HA。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>while :<br>do<br>        if ! ps | grep -w openwrt_mqtt.sh | grep -v grep<br>        then                                    <br>                /opt/openwrt_mqtt.sh<br>        sleep 60#60秒取一次，可自行修改间隔<br>        fi                       <br>done<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>智能家居</category>
      
    </categories>
    
    
    <tags>
      
      <tag>openwrt</tag>
      
      <tag>HomeAssistant</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用群晖自带的 Nginx 做反向代理实现Aria2 Https访问</title>
    <link href="/2022/10/28/%E5%88%A9%E7%94%A8%E7%BE%A4%E6%99%96%E8%87%AA%E5%B8%A6%E7%9A%84-Nginx-%E5%81%9A%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0Aria2-Https%E8%AE%BF%E9%97%AE/"/>
    <url>/2022/10/28/%E5%88%A9%E7%94%A8%E7%BE%A4%E6%99%96%E8%87%AA%E5%B8%A6%E7%9A%84-Nginx-%E5%81%9A%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0Aria2-Https%E8%AE%BF%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>给Aria2服务器所用的SSL证书往往不支持Aria2所使用的6800端口，为此就需要用Nginx来实现同时提供HTTP和Aria2 JSONRPC服务了。但是群晖 <code>UI</code> 界面的反代没有办法编辑配置。</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>想到的解决方案有两个，第一是通过 <code>Docker</code> 再装一个 <code>Nginx</code> 来做反代，第二是通过群晖自身的 <code>Nginx</code> 来做反代；最后选择了通过自身 <code>Nginx</code> 来做反代</p><h3 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><p><code>/usr/syno/etc/certificate/system/default/</code> 为群晖<code>安全性-&gt;证书</code>上传的默认证书的存储位置</p><p><code>5001</code> 端口为 <code>群晖</code> 的默认SSL访问端口，<code>6880、6800</code>为aria2 跟rpc的docker在用端口</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">5001</span> ssl http2;<br>    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">5001</span> ssl http2;<br>    <span class="hljs-attribute">server_name</span> dl.zjylyf.fun;<br>    <span class="hljs-attribute">ssl_certificate</span> /usr/syno/etc/certificate/system/default/fullchain.pem;<br>    <span class="hljs-attribute">ssl_certificate_key</span> /usr/syno/etc/certificate/system/default/privkey.pem;<br>    <span class="hljs-comment">#ssl_session_cache   shared:SSL:50m;</span><br>    <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">4h</span>;<br>    <span class="hljs-attribute">ssl_protocols</span> TLSv1.<span class="hljs-number">2</span> TLSv1.<span class="hljs-number">3</span>;<br>    <span class="hljs-attribute">ssl_buffer_size</span> <span class="hljs-number">4k</span>;<br><br>    <span class="hljs-attribute">if</span> (<span class="hljs-variable">$scheme</span> = http) &#123;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://<span class="hljs-variable">$host</span><span class="hljs-variable">$request_uri</span>;<br>    &#125;<br><br>  <br><br>    <span class="hljs-section">location</span> / &#123;<br><br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:6880;<br><br>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>:<span class="hljs-variable">$server_port</span>;<br><br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br><br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br><br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br><br>        <span class="hljs-attribute">proxy_redirect</span> http:// https://;<br><br>    &#125;<br> <br><br>    <span class="hljs-section">location</span> /jsonrpc &#123;<br><br>    <span class="hljs-attribute">proxy_pass</span> http://localhost:6800/jsonrpc;<br><br>    <span class="hljs-attribute">proxy_redirect</span> <span class="hljs-literal">off</span>;<br><br>    <span class="hljs-attribute">proxy_set_header</span>        X-Real-IP       <span class="hljs-variable">$remote_addr</span>;<br><br>    <span class="hljs-attribute">proxy_set_header</span>        X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br><br>    <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br><br>    <span class="hljs-comment">#以下代码使支持WebSocket</span><br><br>    <span class="hljs-attribute">proxy_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;<br><br>    <span class="hljs-attribute">proxy_set_header</span> Upgrade <span class="hljs-variable">$http_upgrade</span>;<br><br>    <span class="hljs-attribute">proxy_set_header</span> Connection <span class="hljs-string">&quot;upgrade&quot;</span>;<br><br>    &#125;<br><br><br><br>    <span class="hljs-attribute">error_page</span> <span class="hljs-number">403</span> <span class="hljs-number">404</span> <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span> <span class="hljs-variable">@error_page</span>;<br><br>  <br><br>    <span class="hljs-section">location</span> <span class="hljs-variable">@error_page</span> &#123;<br><br>        <span class="hljs-attribute">root</span> /usr/syno/share/nginx;<br><br>        <span class="hljs-attribute">rewrite</span> (.*) /<span class="hljs-literal">error</span>.html <span class="hljs-literal">break</span>;<br><br>        <span class="hljs-attribute">allow</span> all;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链接配置"><a href="#链接配置" class="headerlink" title="链接配置"></a>链接配置</h3><p>将配置文件链接到 <code>/etc/nginx/sites-enabled/</code> </p><p><code>ln -s /xx/xx/xxx.com.conf /etc/nginx/sites-enabled/</code></p><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><p><del>最后只需要重启 <code>Nginx</code> 即可</del></p><p><del><code>sudo systemctl --restart nginx</code></del><br>重载入nginx配置即可，无需重启nginx<br><code>nginx -s reload</code></p>]]></content>
    
    
    <categories>
      
      <category>群晖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>群晖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows平台双网卡添加静态路由</title>
    <link href="/2022/07/29/Windows%E5%B9%B3%E5%8F%B0%E5%8F%8C%E7%BD%91%E5%8D%A1%E6%B7%BB%E5%8A%A0%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1/"/>
    <url>/2022/07/29/Windows%E5%B9%B3%E5%8F%B0%E5%8F%8C%E7%BD%91%E5%8D%A1%E6%B7%BB%E5%8A%A0%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<h2 id="双网卡下添加静态路由"><a href="#双网卡下添加静态路由" class="headerlink" title="双网卡下添加静态路由"></a>双网卡下添加静态路由</h2><p><strong>系统平台：</strong> WIN10</p><p><strong>情况描述：</strong> 电脑上安装了2个网卡，一个连接外网（自动分配IP，路由地址为192.168.0.x），</p><p>一个连接内网（网卡静态IP为10.10.130.130，网关10.10.130.254，子网掩码255.255.255.0，内网网段10.37.0.0）</p><p><strong>任务目标：</strong> 按需访问内外网</p><p><strong>操作方法：</strong> 用管理员权限打开CMD,</p><ol><li><p>删除默认路由：输入 route delete 0.0.0.0 （ 0.0.0.0是指所有地址）</p></li><li><p>添加静态路由</p><ul><li>添加内网静态路由：route add 10.37.0.0 mask 255.255.0.0 10.10.130.254 -p</li></ul><p>注：它表示访问10.37.0.0网段的所有数据都要经过网关10.10.130.254，-p表示Persistent（持久有效的意思，重启后依然生效）</p><ul><li>添加外网静态路由：route add 0.0.0.0 mask 0.0.0.0 192.168.0.1 -p</li></ul><p>注：它表示访问0.0.0.0网址和0.0.0.0网段，即任意网址任意网段，访问经过外网网关192.168.0.1。</p></li><li><p>设置完成后，输入route print 看一下路由表是否添加成功，再ping内外网的网址测试下是否有效。</p></li></ol><hr><p><strong>知识点：</strong></p><p>ROUTE路由命令简单解说</p><p>ROUTE命令格式如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ROUTE [-<span class="hljs-type">f</span>] [-<span class="hljs-type">p</span>] [<span class="hljs-type">command</span> [<span class="hljs-type">destination</span>] [<span class="hljs-type">MASK</span> <span class="hljs-type">netmask</span>] [<span class="hljs-type">gateway</span>] [<span class="hljs-type">METRIC</span> <span class="hljs-type">metric</span>] [<span class="hljs-type">IF</span> <span class="hljs-built_in">int</span><span class="hljs-type">erface</span>]<br></code></pre></td></tr></table></figure><p>其中 –f 参数用于清除路由表，-p参数用于永久保留某条路由（即在系统重启时不会丢失路由）。</p><p>Command主要有PRINT（打印）、ADD（添加）、DELETE（删除）、CHANGE（修改）共4个命令。</p><p>Destination代表所要达到的目标IP地址。</p><p>MASK是子网掩码的关键字。Netmask代表具体的子网掩码，如果不加说明，默认是255.255.255.255（单机IP地址），因此键入掩码时候要特别小心，要确认添加的是某个IP地址还是IP网段。如果代表全部出口子网掩码可用0.0.0.0。</p><p>Gateway代表出口网关。</p><p>其他interface和metric分别代表特殊路由的接口数目和到达目标地址的代价，一般可不予理会。</p>]]></content>
    
    
    <categories>
      
      <category>分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分享</tag>
      
      <tag>Windwos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux Shell文本处理工具介绍</title>
    <link href="/2022/05/29/Linux-Shell%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/"/>
    <url>/2022/05/29/Linux-Shell%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="搞定-Linux-Shell-文本处理工具，看完这篇还不够"><a href="#搞定-Linux-Shell-文本处理工具，看完这篇还不够" class="headerlink" title="搞定 Linux Shell 文本处理工具，看完这篇还不够~"></a>搞定 Linux Shell 文本处理工具，看完这篇还不够~</h1><p>Linux Shell是一种基本功，由于怪异的语法加之较差的可读性，通常被Python等脚本代替。既然是基本功，那就需要掌握，毕竟学习Shell脚本的过程中，还是能了解到很多Linux系统的内容。</p><p>Linux 脚本大师不是人人都可以达到的，但是用一些简单的Shell实现一些常见的基本功能还是很有必要的。</p><p><strong>下面我介绍 Linux 下使用 Shell 处理文本时最常用的工具：</strong></p><p>find、grep、xargs、sort、uniq、tr、cut、paste、wc、sed、awk；</p><p>提供的例子和参数都是最常用和最为实用的；</p><p>我对shell脚本使用的原则是命令单行书写，尽量不要超过2行；</p><p>如果有更为复杂的任务需求，还是考虑python吧；</p><h3 id="1、find-文件查找"><a href="#1、find-文件查找" class="headerlink" title="1、find 文件查找"></a>1、find 文件查找</h3><p>查找txt和pdf文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . \( -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; \) -print<br></code></pre></td></tr></table></figure><p>正则方式查找.txt和pdf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -regex  &quot;.*\(\.txt|\.pdf\)$&quot;<br></code></pre></td></tr></table></figure><p><strong>-iregex： 忽略大小写的正则</strong></p><p>否定参数，查找所有非txt文本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . ! -name &quot;*.txt&quot; -print<br></code></pre></td></tr></table></figure><p>指定搜索深度<br>打印出当前目录的文件（深度为1）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -maxdepth 1 -type f<br></code></pre></td></tr></table></figure><p><strong>定制搜索</strong></p><p>按类型搜索：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -type d -print  //只列出所有目录<br></code></pre></td></tr></table></figure><p>-type f 文件 &#x2F; l 符号链接</p><p>按时间搜索：</p><ul><li>-atime 访问时间 (单位是天，分钟单位则是-amin，以下类似）</li><li>-mtime 修改时间 （内容被修改）</li><li>-ctime 变化时间 （元数据或权限变化）</li></ul><p>最近7天被访问过的所有文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -atime 7 -type f -print<br></code></pre></td></tr></table></figure><p>按大小搜索：<br>w字 k M G</p><p>寻找大于2k的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -type f -size +2k<br></code></pre></td></tr></table></figure><p>按权限查找：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -type f -perm 644 -print //找具有可执行权限的所有文件<br></code></pre></td></tr></table></figure><p>按用户查找：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -type f -user weber -print// 找用户weber所拥有的文件<br></code></pre></td></tr></table></figure><p>找到后的后续动作</p><p>删除：<br>删除当前目录下所有的swp文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -type f -name &quot;*.swp&quot; -delete<br></code></pre></td></tr></table></figure><p>执行动作（强大的exec）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -type f -user root -exec chown weber &#123;&#125; \; //将当前目录下的所有权变更为weber<br></code></pre></td></tr></table></figure><blockquote><p>注：{}是一个特殊的字符串，对于每一个匹配的文件，{}会被替换成相应的文件名；</p></blockquote><p>eg：将找到的文件全都copy到另一个目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -type f -mtime +10 -name &quot;*.txt&quot; -exec cp &#123;&#125; OLD \;<br></code></pre></td></tr></table></figure><p>结合多个命令<br>tips: 如果需要后续执行多个命令，可以将多个命令写成一个脚本。然后 -exec 调用时执行脚本即可；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-exec ./commands.sh &#123;&#125; \;<br></code></pre></td></tr></table></figure><p>-print的定界符</p><p>默认使用<code>&#39;\n&#39;</code>作为文件的定界符；<br>-print0 使用’\0’作为文件的定界符，这样就可以搜索包含空格的文件；</p><h3 id="2、grep-文本搜索"><a href="#2、grep-文本搜索" class="headerlink" title="2、grep 文本搜索"></a>2、grep 文本搜索</h3><p>grep match_patten file &#x2F;&#x2F; 默认访问匹配行</p><p><strong>常用参数</strong></p><ul><li>-o 只输出匹配的文本行 VS -v 只输出没有匹配的文本行</li><li>-c 统计文件中包含文本的次数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep -c &quot;text&quot; filename<br></code></pre></td></tr></table></figure><ul><li>-n 打印匹配的行号</li><li>-i 搜索时忽略大小写</li><li>-l 只打印文件名</li></ul><p>在多级目录中对文本递归搜索(程序员搜代码的最爱）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep &quot;class&quot; . -R -n<br></code></pre></td></tr></table></figure><p>匹配多个模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep -e &quot;class&quot; -e &quot;vitural&quot; file<br></code></pre></td></tr></table></figure><p>grep输出以\0作为结尾符的文件名：（-z）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep &quot;test&quot; file* -lZ| xargs -0 rm<br></code></pre></td></tr></table></figure><h3 id="3、xargs-命令行参数转换"><a href="#3、xargs-命令行参数转换" class="headerlink" title="3、xargs 命令行参数转换"></a>3、xargs 命令行参数转换</h3><p>xargs 能够将输入数据转化为特定命令的命令行参数；这样，可以配合很多命令来组合使用。比如 grep，比如 find；</p><p>将多行输出转化为单行输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat file.txt| xargs<br></code></pre></td></tr></table></figure><p><code>\n</code>是多行文本间的定界符</p><p>将单行转化为多行输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat single.txt | xargs -n 3<br></code></pre></td></tr></table></figure><p>-n：指定每行显示的字段数</p><p>xargs参数说明</p><ul><li>-d 定义定界符 （默认为空格 多行的定界符为 \n）</li><li>-n 指定输出为多行</li><li>-I {} 指定替换字符串，这个字符串在xargs扩展时会被替换掉,用于待执行的命令需要多个参数时</li></ul><p>eg：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat file.txt | xargs -I &#123;&#125; ./command.sh -p &#123;&#125; -1<br></code></pre></td></tr></table></figure><p>-0：指定\0为输入定界符<br>eg：统计程序行数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find source_dir/ -type f -name &quot;*.cpp&quot; -print0 |xargs -0 wc -l<br></code></pre></td></tr></table></figure><h3 id="4、sort-排序"><a href="#4、sort-排序" class="headerlink" title="4、sort 排序"></a>4、sort 排序</h3><p>字段说明：</p><p>-n 按数字进行排序 VS -d 按字典序进行排序<br>-r 逆序排序<br>-k N 指定按第N列排序</p><p>eg：</p><p>sort -nrk 1 data.txt<br>sort -bd data &#x2F;&#x2F; 忽略像空格之类的前导空白字符</p><h3 id="5、uniq-消除重复行"><a href="#5、uniq-消除重复行" class="headerlink" title="5、uniq 消除重复行"></a>5、uniq 消除重复行</h3><p>消除重复行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sort unsort.txt | uniq<br></code></pre></td></tr></table></figure><p>统计各行在文件中出现的次数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sort unsort.txt | uniq -c<br></code></pre></td></tr></table></figure><p>找出重复行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sort unsort.txt | uniq -d<br></code></pre></td></tr></table></figure><p>可指定每行中需要比较的重复内容：-s 开始位置 -w 比较字符数</p><h3 id="6、用tr进行转换"><a href="#6、用tr进行转换" class="headerlink" title="6、用tr进行转换"></a>6、用tr进行转换</h3><p>通用用法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo 12345 | tr &#x27;0-9&#x27; &#x27;9876543210&#x27; //加解密转换，替换对应字符cat text| tr &#x27;\t&#x27; &#x27; &#x27;  //制表符转空格<br></code></pre></td></tr></table></figure><p>tr删除字符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat file | tr -d &#x27;0-9&#x27; // 删除所有数字<br></code></pre></td></tr></table></figure><p>-c 求补集</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat file | tr -c &#x27;0-9&#x27; //获取文件中所有数字cat file | tr -d -c &#x27;0-9 \n&#x27;  //删除非数字数据<br></code></pre></td></tr></table></figure><p>tr压缩字符<br>tr -s 压缩文本中出现的重复字符；最常用于压缩多余的空格</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat file | tr -s &#x27; &#x27;<br></code></pre></td></tr></table></figure><p>字符类</p><ul><li>tr中可用各种字符类：</li><li>alnum：字母和数字</li><li>alpha：字母</li><li>digit：数字</li><li>space：空白字符</li><li>lower：小写</li><li>upper：大写</li><li>cntrl：控制（非可打印）字符</li><li>print：可打印字符</li></ul><p>使用方法：tr [:class:] [:class:]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">eg: tr &#x27;[:lower:]&#x27; &#x27;[:upper:]&#x27;<br></code></pre></td></tr></table></figure><h3 id="7、cut-按列切分文本"><a href="#7、cut-按列切分文本" class="headerlink" title="7、cut 按列切分文本"></a>7、cut 按列切分文本</h3><p>截取文件的第2列和第4列：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cut -f2,4 filename<br></code></pre></td></tr></table></figure><p>去文件除第3列的所有列：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cut -f3 --complement filename<br></code></pre></td></tr></table></figure><p>-d 指定定界符：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat -f2 -d&quot;;&quot; filename<br></code></pre></td></tr></table></figure><p>cut 取的范围</p><ul><li>N- 第N个字段到结尾</li><li>-M 第1个字段为M<br>N-M N到M个字段</li></ul><p>cut 取的单位</p><ul><li>-b 以字节为单位</li><li>-c 以字符为单位</li><li>-f 以字段为单位（使用定界符）</li></ul><p>eg：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cut -c1-5 file //打印第一到5个字符cut -c-2 file  //打印前2个字符<br></code></pre></td></tr></table></figure><h3 id="8、paste-按列拼接文本"><a href="#8、paste-按列拼接文本" class="headerlink" title="8、paste 按列拼接文本"></a>8、paste 按列拼接文本</h3><p>将两个文本按列拼接到一起;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat file112cat file2colinbook<br></code></pre></td></tr></table></figure><p>paste file1 file21 colin2 book<br>默认的定界符是制表符，可以用-d指明定界符<br>paste file1 file2 -d “,”<br>1,colin<br>2,book</p><h3 id="9、wc-统计行和字符的工具"><a href="#9、wc-统计行和字符的工具" class="headerlink" title="9、wc 统计行和字符的工具"></a>9、wc 统计行和字符的工具</h3><p>wc -l file &#x2F;&#x2F; 统计行数<br>wc -w file &#x2F;&#x2F; 统计单词数<br>wc -c file &#x2F;&#x2F; 统计字符数</p><h3 id="10、sed-文本替换利器"><a href="#10、sed-文本替换利器" class="headerlink" title="10、sed 文本替换利器"></a>10、sed 文本替换利器</h3><p>首处替换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed &#x27;s/text/replace_text/&#x27; file   //替换每一行的第一处匹配的text<br></code></pre></td></tr></table></figure><p>全局替换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed &#x27;s/text/replace_text/g&#x27; file<br></code></pre></td></tr></table></figure><p>默认替换后，输出替换后的内容，如果需要直接替换原文件,使用-i：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -i &#x27;s/text/repalce_text/g&#x27; file<br></code></pre></td></tr></table></figure><p>移除空白行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed &#x27;/^$/d&#x27; file<br></code></pre></td></tr></table></figure><p>变量转换，已匹配的字符串通过标记&amp;来引用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo this is en example | sed &#x27;s/\w+/[&amp;]/g&#x27;$&gt;[this]  [is] [en] [example]<br>子串匹配标记<br>第一个匹配的括号内容使用标记 \1 来引用<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed &#x27;s/hello\([0-9]\)/\1/&#x27;<br></code></pre></td></tr></table></figure><p>双引号求值</p><p>sed 通常用单引号来引用；也可使用双引号，使用双引号后，双引号会对表达式求值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed &#x27;s/$var/HLLOE/&#x27;<br></code></pre></td></tr></table></figure><p>当使用双引号时，我们可以在sed样式和替换字符串中指定变量；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">eg:p=pattenr=replacedecho &quot;line con a patten&quot; | sed &quot;s/$p/$r/g&quot;$&gt;line con a replaced<br></code></pre></td></tr></table></figure><p>其它示例<br>字符串插入字符：将文本中每行内容（PEKSHA） 转换为 PEK&#x2F;SHA</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed &#x27;s/^.\&#123;3\&#125;/&amp;\//g&#x27; file<br></code></pre></td></tr></table></figure><h3 id="11、awk-数据流处理工具"><a href="#11、awk-数据流处理工具" class="headerlink" title="11、awk 数据流处理工具"></a>11、awk 数据流处理工具</h3><p>awk脚本结构<br>awk ‘ BEGIN{ statements } statements2 END{ statements } ‘</p><p>工作方式</p><ol><li>执行begin中语句块；</li><li>从文件或 stdin 中读入一行，然后执行 statements2，重复这个过程，直到文件全部被读取完毕；</li><li>执行end语句块；</li></ol><p>print 打印当前行</p><p>使用不带参数的print时，会打印当前行;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo -e &quot;line1\nline2&quot; | awk &#x27;BEGIN&#123;print &quot;start&quot;&#125; &#123;print &#125; END&#123; print &quot;End&quot; &#125;&#x27;<br></code></pre></td></tr></table></figure><p>print 以逗号分割时，参数以空格定界;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo | awk &#x27; &#123;var1 = &quot;v1&quot; ; var2 = &quot;V2&quot;; var3=&quot;v3&quot;; \print var1, var2 , var3; &#125;&#x27;$&gt;v1 V2 v3<br></code></pre></td></tr></table></figure><p>使用-拼接符的方式（””作为拼接符）;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo | awk &#x27; &#123;var1 = &quot;v1&quot; ; var2 = &quot;V2&quot;; var3=&quot;v3&quot;; \print var1&quot;-&quot;var2&quot;-&quot;var3; &#125;&#x27;$&gt;v1-V2-v3<br>特殊变量：NR NF $0 $1 $2<br></code></pre></td></tr></table></figure><p>NR:表示记录数量，在执行过程中对应当前行号；<br>NF:表示字段数量，在执行过程总对应当前行的字段数；<br>$0:这个变量包含执行过程中当前行的文本内容；<br>$1:第一个字段的文本内容；<br>$2:第二个字段的文本内容；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo -e “line1 f2 f3\n line2 \n line 3” | awk ‘&#123;print NR”:”1”-“$2&#125;’<br></code></pre></td></tr></table></figure><p>打印每一行的第二和第三个字段：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">awk &#x27;&#123;print $2, $3&#125;&#x27; file<br></code></pre></td></tr></table></figure><p>统计文件的行数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">awk &#x27; END &#123;print NR&#125;&#x27; file<br></code></pre></td></tr></table></figure><p>累加每一行的第一个字段：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo -e &quot;1\n 2\n 3\n 4\n&quot; | awk &#x27;BEGIN&#123;num = 0 ;print &quot;begin&quot;;&#125; &#123;sum += $1;&#125; END &#123;print &quot;==&quot;; print sum &#125;&#x27;<br></code></pre></td></tr></table></figure><p>传递外部变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">var=1000echo | awk &#x27;&#123;print vara&#125;&#x27; vara=$var #  输入来自stdinawk &#x27;&#123;print vara&#125;&#x27; vara=$var file # 输入来自文件用样式对awk处理的行进行过滤<br></code></pre></td></tr></table></figure><p>awk ‘NR &lt; 5’ #行号小于5<br>awk ‘NR&#x3D;&#x3D;1,NR&#x3D;&#x3D;4 {print}’ file #行号等于1和4的打印出来<br>awk ‘&#x2F;linux&#x2F;‘ #包含linux文本的行（可以用正则表达式来指定，超级强大）<br>awk ‘!&#x2F;linux&#x2F;‘ #不包含linux文本的行</p><p>设置定界符</p><p>使用-F来设置定界符（默认为空格）<br>awk -F: ‘{print $NF}’ &#x2F;etc&#x2F;passwd</p><p>读取命令输出</p><p>使用getline，将外部shell命令的输出读入到变量cmdout中；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo | awk &#x27;&#123;&quot;grep root /etc/passwd&quot; | getline cmdout; print cmdout &#125;&#x27;<br></code></pre></td></tr></table></figure><p>在awk中使用循环</p><p>for(i&#x3D;0;i&lt;10;i++){print $i;}<br>for(i in array){print array[i];}</p><p>eg:<br>以逆序的形式打印行：(tac命令的实现）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">seq 9| \awk &#x27;&#123;lifo[NR] = $0; lno=NR&#125; \END&#123; for(;lno&gt;-1;lno--)&#123;print lifo[lno];&#125;&#125; &#x27;<br></code></pre></td></tr></table></figure><p><strong>awk实现head、tail命令</strong></p><p>head:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">awk &#x27;NR&lt;=10&#123;print&#125;&#x27; filename<br></code></pre></td></tr></table></figure><p>tail：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">awk &#x27;&#123;buffer[NR%10] = $0;&#125; END&#123;for(i=0;i&lt;11;i++)&#123; \print buffer[i %10]&#125; &#125; &#x27; filename<br></code></pre></td></tr></table></figure><p>打印指定列</p><p>awk方式实现：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -lrt | awk &#x27;&#123;print $6&#125;&#x27;<br></code></pre></td></tr></table></figure><p>cut方式实现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -lrt | cut -f6<br></code></pre></td></tr></table></figure><p>打印指定文本区域</p><p>确定行号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">seq 100| awk &#x27;NR==4,NR==6&#123;print&#125;&#x27;<br></code></pre></td></tr></table></figure><p>确定文本</p><p>打印处于start_pattern 和end_pattern之间的文本；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">awk &#x27;/start_pattern/, /end_pattern/&#x27; filename<br></code></pre></td></tr></table></figure><p>eg：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">seq 100 | awk &#x27;/13/,/15/&#x27;cat /etc/passwd| awk &#x27;/mai.*mail/,/news.*news/&#x27;<br></code></pre></td></tr></table></figure><p><strong>awk常用内建函数</strong></p><ul><li>index(string,search_string):返回search_string在string中出现的位置</li><li>sub(regex,replacement_str,string)：将正则匹配到的第一处内容替换为replacement_str;</li><li>match(regex,string):检查正则表达式是否能够匹配字符串；</li><li>length(string)：返回字符串长度</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo | awk &#x27;&#123;&quot;grep root /etc/passwd&quot; | getline cmdout; print length(cmdout) &#125;&#x27;<br></code></pre></td></tr></table></figure><p>printf 类似c语言中的printf，对输出进行格式化<br>eg：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">seq 10 | awk &#x27;&#123;printf &quot;-&gt;%4s\n&quot;, $1&#125;&#x27;<br></code></pre></td></tr></table></figure><h3 id="12、迭代文件中的行、单词和字符"><a href="#12、迭代文件中的行、单词和字符" class="headerlink" title="12、迭代文件中的行、单词和字符"></a>12、迭代文件中的行、单词和字符</h3><p><strong>1. 迭代文件中的每一行</strong></p><p>while 循环法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">while read line;doecho $line;done &lt; file.txt改成子shell:cat file.txt | (while read line;do echo $line;done)<br></code></pre></td></tr></table></figure><p>awk法：<br>cat file.txt| awk ‘{print}’</p><p><strong>2.迭代一行中的每一个单词</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">for word in $line;do echo $word;done<br></code></pre></td></tr></table></figure><p><strong>3. 迭代每一个字符</strong></p><p>从字符串中提取一个字符；(bash文本切片）</p><p>返回变量word的长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">for((i=0;i&lt;$&#123;#word&#125;;i++))<br>do<br>echo $&#123;word:i:1);<br>done<br></code></pre></td></tr></table></figure><hr><blockquote><p>来自：大CC<br>链接：<a href="http://www.cnblogs.com/me115/p/3427319.html">http://www.cnblogs.com/me115/p/3427319.html</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分享</tag>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/1977/01/01/hello-world/"/>
    <url>/1977/01/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
