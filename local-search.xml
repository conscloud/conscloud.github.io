<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>一个游戏实践-python</title>
    <link href="/2023/06/09/%E4%B8%80%E4%B8%AA%E6%B8%B8%E6%88%8F%E5%AE%9E%E8%B7%B5-python/"/>
    <url>/2023/06/09/%E4%B8%80%E4%B8%AA%E6%B8%B8%E6%88%8F%E5%AE%9E%E8%B7%B5-python/</url>
    
    <content type="html"><![CDATA[<h1 id="一个游戏实践-Python学习"><a href="#一个游戏实践-Python学习" class="headerlink" title="一个游戏实践-Python学习"></a>一个游戏实践-Python学习</h1><h2 id="0-游戏概述"><a href="#0-游戏概述" class="headerlink" title="0. 游戏概述"></a>0. 游戏概述</h2><blockquote><p>玩家控制着一艘最初出现在屏幕底部中央的飞船。玩家可以使用箭头键左右移动飞船，还可使用空格键进行射击。游戏开始时，一群外星人出现在天空中，他们在屏幕中向下移动。玩家的任务是射杀这些外星人。玩家将所有外星人都消灭干净后，将出现一群新的外星人，他们移动的速度更快。只要有外星人撞到了玩家的飞船或到达了屏幕底部，玩家就损失一艘飞船。玩家损失三艘飞船后，游戏结束。</p></blockquote><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>Pygame，这是一组功能强大而有趣的模块，可用于管理图形、动画乃至声音，让你能够更轻松地开发复杂的游戏。通过使用Pygame来处理在屏幕上绘制图像等任务，你不用考虑众多烦琐而艰难的编码工作，而是将重点放在程序的高级逻辑上.</p><p>安装Pygame包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install pygame<br></code></pre></td></tr></table></figure><h2 id="2-开始游戏项目"><a href="#2-开始游戏项目" class="headerlink" title="2.开始游戏项目"></a>2.开始游戏项目</h2><h3 id="2-1创建一个空白窗口并响应用户输入"><a href="#2-1创建一个空白窗口并响应用户输入" class="headerlink" title="2.1创建一个空白窗口并响应用户输入"></a>2.1创建一个空白窗口并响应用户输入</h3><p>创建一个空的Pygame窗口，供后面用来绘制游戏元素，如飞船和外星人。我们还将让这个游戏响应用户输入、设置背景色以及加载飞船图像。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys <br><br><span class="hljs-keyword">import</span> pygame<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_game</span>():<br>    <span class="hljs-comment">#初始化游戏并创建一个屏幕对象</span><br>    pygame.init()<br>    screen = pygame.display.set_mode((<span class="hljs-number">1200</span>,<span class="hljs-number">800</span>))<br>    pygame.display.set_caption(<span class="hljs-string">&quot;外星入侵&quot;</span>)<br><br>    <span class="hljs-comment">#开始游戏的主循环</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><br>        <span class="hljs-comment">#监视键盘和鼠标事件</span><br>        <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>            <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>                sys.exit()<br><br>        <span class="hljs-comment">#让最近绘制的屏幕可见</span><br>        pygame.display.flip()<br><br>run_game()<br></code></pre></td></tr></table></figure><ul><li>行pygame.init()初始化背景设置，让Pygame能够正确地工作</li><li>调用pygame.display.set_mode()来创建一个名为screen的显示窗口，这个游戏的所有图形元素都将在其中绘制。实参(1200, 800)是一个元组，指定了游戏窗口的尺寸。通过将这些尺寸值传递给pygame.display.set_mode()，我们创建了一个宽1200像素、高800像素的游戏窗口<ul><li>对象screen是一个surface。在Pygame中，surface是屏幕的一部分，用于显示游戏元素。在这个游戏中，每个元素（如外星人或飞船）都是一个surface。display.set_mode()返回的surface表示整个游戏窗口。我们激活游戏的动画循环后，每经过一次循环都将自动重绘这个surface。</li></ul></li><li>游戏由一个while循环控制，其中包含一个事件循环以及管理屏幕更新的代码。事件是用户玩游戏时执行的操作，如按键或移动鼠标。为让程序响应事件，我们编写一个事件循环，以侦听事件，并根据发生的事件执行相应的任务。for循环就是一个事件循环</li><li>使用方法pygame.event.get()访问pygame检测到的事件，所有键盘和鼠标事件都将促使for循环运行。在这个循环中，我们将编写一系列的if语句来检测并响应特定的事件</li><li>单击游戏窗口的关闭按钮时，将检测到pygame.QUIT事件，而我们调用sys.exit()来退出游戏</li><li>调用pygame.display.flip()，命令Pygame让最近绘制的屏幕可见。<ul><li>在每次执行while循环时都绘制一个空屏幕，并擦去旧屏幕，使得只有新屏幕可见。在我们移动游戏元素时，pygame.display.flip()将不断更新屏幕，以显示元素的新位置，并在原来的位置隐藏元素，从而营造平滑移动的效果</li></ul></li></ul><h3 id="2-2设置背景色"><a href="#2-2设置背景色" class="headerlink" title="2.2设置背景色"></a>2.2设置背景色</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">```<br>    pygame.display.set_caption(<span class="hljs-string">&quot;外星入侵&quot;</span>)<br><br>    <span class="hljs-comment">#设置背景色</span><br>    bg_color = (<span class="hljs-number">230</span>,<span class="hljs-number">230</span>,<span class="hljs-number">230</span>)<br>    <span class="hljs-comment">#开始游戏的主循环</span><br>```<br>        <span class="hljs-comment">#每次循环时都重新绘制屏幕</span><br>        screen.fill(bg_color)<br>        <br>        <span class="hljs-comment">#让最近绘制的屏幕可见</span><br>        pygame.display.flip()<br>```<br></code></pre></td></tr></table></figure><ul><li>定义一个bg_color，其值为RGB颜色值</li><li>调用screen.fill()，用背景色填充屏幕</li></ul><h3 id="2-3创建设置类"><a href="#2-3创建设置类" class="headerlink" title="2.3创建设置类"></a>2.3创建设置类</h3><p>为了方便对设置的内容进行统一管理，可以将所有涉及到设置放到一个单独的模块中，以免在代码中到处添加设置。可以新增如下Settings类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Settings</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;存储《外星入侵》的所有设置的类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;&quot;初始化游戏的设置&quot;&quot;&quot;</span><br>        <span class="hljs-comment">#屏幕设置</span><br>        self.screen_width = <span class="hljs-number">1200</span><br>        self.screen_height = <span class="hljs-number">800</span><br>        self.bg_color = (<span class="hljs-number">230</span>, <span class="hljs-number">230</span>, <span class="hljs-number">230</span>)<br></code></pre></td></tr></table></figure><p>主程序文件中，我们导入Settings类，调用pygame.init()，再创建一个Settings实例，并将其存储在变量ai_settings中。创建屏幕时，使用了ai_settings的属性screen_width和screen_height；接下来填充屏幕时，也使用了ai_settings来访问背景色</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306091446882.webp"></p><h3 id="2-4添加飞船图像"><a href="#2-4添加飞船图像" class="headerlink" title="2.4添加飞船图像"></a>2.4添加飞船图像</h3><p>下面将飞船加入到游戏中。为了在屏幕上绘制玩家的飞船，我们将加载一幅图像，再使用Pygame方法blit()绘制它。</p><p><em>可以使用<a href="http://pixabay.com/%E7%AD%89%E7%BD%91%E7%AB%99%E6%8F%90%E4%BE%9B%E7%9A%84%E5%9B%BE%E5%BD%A2%EF%BC%8C%E8%BF%99%E4%BA%9B%E5%9B%BE%E5%BD%A2%E6%97%A0%E9%9C%80%E8%AE%B8%E5%8F%AF%EF%BC%8C%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%AF%B9%E5%85%B6%E8%BF%9B%E8%A1%8C%E4%BF%AE%E6%94%B9%E3%80%82">http://pixabay.com/等网站提供的图形，这些图形无需许可，你可以对其进行修改。</a></em></p><p>在游戏中几乎可以使用任何类型的图像文件，但使用位图（.bmp）文件最为简单，因为Pygame默认加载位图。</p><p>选择图像时，要特别注意其背景色。请尽可能选择背景透明的图像，这样可使用图像编辑器将其背景设置为任何颜色。图像的背景色与游戏的背景色相同时，游戏看起来最漂亮；也可以将游戏的背景色设置成与图像的背景色相同。</p><h3 id="2-5创建ship类"><a href="#2-5创建ship类" class="headerlink" title="2.5创建ship类"></a>2.5创建ship类</h3><p>选择用于表示飞船的图像后，需要将其显示到屏幕上。我们将创建一个名为ship的模块，其中包含Ship类，它负责管理飞船的大部分行为。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygame<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ship</span>():<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,screen</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化飞船并设置其初始位置&quot;&quot;&quot;</span><br>        self.screen = screen<br><br>        <span class="hljs-comment">#加载飞船图像并获取其外接矩形</span><br>        self.image = pygame.image.load(<span class="hljs-string">&#x27;alien_invasion/images/ship.png&#x27;</span>)<br>        self.rect = self.image.get_rect()<br>        self.screen_rect = screen.get_rect()<br><br>        <span class="hljs-comment">#将每艘新飞船放在屏幕的底部中央</span><br>        self.rect.centerx = self.screen_rect.centerx<br>        self.rect.bottom = self.screen_rect.bottom<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">blitme</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;在指定位置绘制飞船&quot;&quot;&quot;</span><br>        self.screen.blit(self.image,self.rect)<br></code></pre></td></tr></table></figure><ul><li>Ship的方法__init__()接受两个参数：引用self和screen，其中后者指定了要将飞船绘制到什么地方。</li><li>调用了pygame.image.load()加载图像，这个函数返回一个表示飞船的surface，而我们将这个surface存储到了self.image中。</li><li>使用get_rect()获取相应surface的属性rect<ul><li>处理rect对象时，可使用矩形四角和中心的<em>x</em>和<em>y</em>坐标。可通过设置这些值来指定矩形的位置</li><li>要将游戏元素居中，可设置相应rect对象的属性center、centerx或centery。要让游戏元素与屏幕边缘对齐，可使用属性top、bottom、left或right；要调整游戏元素的水平或垂直位置，可使用属性x和y，它们分别是相应矩形左上角的<em>x</em>和<em>y</em>坐标。</li><li>在Pygame中，原点(0, 0)位于屏幕左上角，向右下方移动时，坐标值将增大。在1200×800的屏幕上，原点位于左上角，而右下角的坐标为(1200, 800)</li></ul></li><li>将表示屏幕的矩形存储在self.screen_rect中，再将self.rect.centerx（飞船中心的<em>x</em>坐标）设置为表示屏幕的矩形的属性centerx，并将self.rect.bottom（飞船下边缘的<em>y</em>坐标）设置为表示屏幕的矩形的属性bottom。Pygame将使用这些rect属性来放置飞船图像，使其与屏幕下边缘对齐并水平居中</li><li>定义方法blitme()，它根据self.rect指定的位置将图像绘制到屏幕上</li></ul><p><strong>在屏幕上绘制飞船</strong></p><p>在主程序中引入ship类，并调用其方法blitme()</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306091510538.webp"></p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306091511294.webp"></p><h3 id="2-6重构模块game-fuctions"><a href="#2-6重构模块game-fuctions" class="headerlink" title="2.6重构模块game_fuctions"></a>2.6重构模块game_fuctions</h3><p>为简化既有代码的结构，使其更容易扩展，通过创建模块game_fuctions，避免主模块alien_invasion.py太长。</p><p><strong>check_events()</strong></p><p>先把管理事件的代码移到一个名为check_events()的函数中，以简化run_game()并隔离事件管理循环。通过隔离事件循环，可将事件管理与游戏的其他方面（如更新屏幕）分离.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys <br><br><span class="hljs-keyword">import</span> pygame<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_events</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;响应屏幕和鼠标事件&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>        <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>            sys.exit()<br></code></pre></td></tr></table></figure><p>这个模块中导入了事件检查循环要使用的sys和pygame。当前，函数check_events()不需要任何形参，其函数体复制了alien_invasion.py的事件循环。</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306091519299.webp"></p><p><strong>update_screen()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_screen</span>(<span class="hljs-params">ai_settings,screen,ship</span>):<br>    <span class="hljs-comment">#每次循环时都重新绘制屏幕</span><br>    screen.fill(ai_settings.bg_color)<br>    ship.blitme()<br><br>    <span class="hljs-comment">#让最近绘制的屏幕可见</span><br>    pygame.display.flip()<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306091523079.webp"></p><h3 id="2-7驾驶飞船"><a href="#2-7驾驶飞船" class="headerlink" title="2.7驾驶飞船"></a>2.7驾驶飞船</h3><p>下面来让玩家能够左右移动飞船。为此，我们将编写代码，在用户按左或右箭头键时作出响应</p><p><strong>响应按键</strong></p><p>每当用户按键时，都将在Pygame中注册一个事件。事件都是通过方法pygame.event.get()获取的，因此在函数check_events()中，我们需要指定要检查哪些类型的事件。每次按键都被注册为一个KEYDOWN事件。</p><p>检测到KEYDOWN事件时，我们需要检查按下的是否是特定的键。例如，如果按下的是右箭头键，我们就增大飞船的rect.centerx值，将飞船向右移动：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYDOWN:<br>    <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>        <span class="hljs-comment">#向右移动飞船</span><br>        ship.rect.centerx += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>主程序更新调用的check_events()代码，将ship作为实参传递：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 开始游戏主循环</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>: <br>gf.check_events(ship)<br>gf.update_screen(ai_settings, screen, ship)<br></code></pre></td></tr></table></figure><p>现在运行alien_invasion.py，则每按右箭头键一次，飞船都将向右移动1像素</p><p><strong>允许不断移动</strong></p><p>玩家按住右箭头键不放时，我们希望飞船不断地向右移动，直到玩家松开为止。我们将让游戏检测pygame.KEYUP事件，以便玩家松开右箭头键时我们能够知道这一点；然后，我们将结合使用KEYDOWN和KEYUP事件，以及一个名为moving_right的标志来实现持续移动。</p><p>飞船不动时，标志moving_right将为False。玩家按下右箭头键时，我们将这个标志设置为True；而玩家松开时，我们将这个标志重新设置为False。</p><p>飞船的属性都由Ship类控制，因此我们将给这个类添加一个名为moving_right的属性和一个名为update()的方法。方法update()检查标志moving_right的状态，如果这个标志为True，就调整飞船的位置。每当需要调整飞船的位置时，我们都调用这个方法。</p><p>修改ship类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">    <span class="hljs-comment">#移动标志</span><br>    self.moving_right = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> self.moving_right:<br>        self.rect.centerx += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>修改game_fuctions.py模块代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYDOWN:<br>    <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>        <span class="hljs-comment">#按键按下时，开始向右移动飞船</span><br>        ship.moving_right = <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYUP:<br>    <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT:<br>        <span class="hljs-comment">#按键松开时，结束向右移动飞船</span><br>        ship.moving_right = <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>修改主程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><br>    <span class="hljs-comment">#监视键盘和鼠标事件</span><br>    gf.check_events(ship)<br>    ship.update()<br>    <span class="hljs-comment">#刷新屏幕</span><br>    gf.update_screen(ai_settings,screen,ship)<br></code></pre></td></tr></table></figure><p><strong>左右移动</strong></p><p>再次修改Ship类和函数check_events()：</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306091621029.webp"></p><p>修改game_fuctions.py</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306091622447.webp"></p><p><strong>调整飞船的速度</strong></p><p>可以在Settings类中添加属性ship_speed_factor，用于控制飞船的速度</p><p><code>self.ship_speed_factor = 1.5</code>通过将速度设置指定为小数值，可在后面加快游戏的节奏时更细致地控制飞船的速度，然而，rect的centerx等属性只能存储整数值，因此我们需要对Ship类做些修改：</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306091627178.webp"></p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306091629980.webp"></p><p><strong>限制飞船的活动范围</strong></p><p>修改Ship类的方法update()，使的飞船不能超出屏幕范围</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> self.moving_right <span class="hljs-keyword">and</span> self.rect.right &lt; self.screen_rect.right:<br>    self.center += self.ai_settings.ship_speed_factor<br><span class="hljs-keyword">if</span> self.moving_left <span class="hljs-keyword">and</span> self.rect.left &gt; <span class="hljs-number">0</span>:<br>    self.center -= self.ai_settings.ship_speed_factor<br></code></pre></td></tr></table></figure><p><strong>重构check_events()</strong></p><p>函数check_events()将越来越长，我们将其部分代码放在两个函数中：一个处理KEYDOWN事件，另一个处理KEYUP事件</p><h3 id="2-8-射击"><a href="#2-8-射击" class="headerlink" title="2.8 射击"></a>2.8 射击</h3><p>在settings中添加子弹的设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#子弹的设置参数</span><br>self.bullet_speed_factor = <span class="hljs-number">1</span><br>self.bullet_width = <span class="hljs-number">3</span><br>self.bullet_height = <span class="hljs-number">15</span><br>self.bullet_color = (<span class="hljs-number">60</span>, <span class="hljs-number">60</span>, <span class="hljs-number">60</span>)<br></code></pre></td></tr></table></figure><p><strong>创建Bullet类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygame<br><br><span class="hljs-keyword">from</span> pygame.sprite <span class="hljs-keyword">import</span> Sprite<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bullet</span>(<span class="hljs-title class_ inherited__">Sprite</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;一个对飞船发射的子弹管理的类&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,ai_settings,screen,ship</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;在飞船的处的位置创建一个子弹对象&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">super</span>.__init__()<br>        self.screen = screen<br><br>        <span class="hljs-comment">#在（0，0）位置生成一个子弹，并移到飞船所处的位置</span><br>        self.rect = pygame.Rect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,ai_settings.bullet_width,<br>                                ai_settings.bullet_height)<br>        self.rect.centerx = ship.rect.centerx<br>        self.rect.top = ship.rect.top<br><br>        <span class="hljs-comment">#用小数表示子弹的位置</span><br>        self.y = <span class="hljs-built_in">float</span>(self.rect.y)<br><br>        self.color = ai_settings.bullet_color<br>        self.speed_factor = ai_settings.bullet_speed_factor<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;向上移动子弹&quot;&quot;&quot;</span><br>        self.y -= self.speed_factor<br>        <span class="hljs-comment">#更新子弹的位置</span><br>        self.rect.y = self.y<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_bullet</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;重新绘制子弹&quot;&quot;&quot;</span><br>        pygame.draw.rect(self.screen,self.color,self.rect)<br></code></pre></td></tr></table></figure><p>Bullet类继承了我们从模块pygame.sprite中导入的Sprite类。通过使用精灵，可将游戏中相关的元素编组，进而同时操作编组中的所有元素。</p><p>定义update()跟draw_bullet()两个方法，用于更新子弹的位置，并在屏幕上绘制出新的子弹。</p><p>属性speed_factor让我们能够随着游戏的进行或根据需要提高子弹的速度，以调整游戏的行为。子弹发射后，其<em>x</em>坐标始终不变，因此子弹将沿直线垂直地往上穿行。</p><p><strong>将子弹存储到编组中</strong></p><p>定义Bullet类和必要的设置后，就可以编写代码了，在玩家每次按空格键时都射出一发子弹。首先，我们将在alien_invasion.py中创建一个编组（group），用于存储所有有效的子弹，以便能够管理发射出去的所有子弹。</p><p>这个编组将是pygame.sprite.Group类的一个实例；pygame.sprite. Group类类似于列表，但提供了有助于开发游戏的额外功能。</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306100903363.webp"></p><p>将bullets传递给了check_events()和update_screen()。在check_events()中，需要在玩家按空格键时处理bullets；而在update_screen()中，需要更新要绘制到屏幕上的bullets。</p><p>当你对编组调用update()时，编组将自动对其中的每个精灵调用update()，因此代码行bullets.update()将为编组bullets中的每颗子弹调用bullet.update()。</p><p><strong>开火</strong></p><p>在game_functions.py中，我们需要修改check_keydown_events()，以便在玩家按空格键时发射一颗子弹。我们无需修改check_keyup_events()，因为玩家松开空格键时什么都不会发生。我们还需修改update_screen()，确保在调用flip()前在屏幕上重绘每颗子弹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">--snip-- <br><span class="hljs-keyword">from</span> bullet <span class="hljs-keyword">import</span> Bullet <br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_keydown_events</span>(<span class="hljs-params">event, ai_settings, screen, ship, bullets</span>):<br> --snip-- <br> <span class="hljs-keyword">elif</span> event.key == pygame.K_SPACE: <br> <span class="hljs-comment"># 创建一颗子弹，并将其加入到编组bullets中</span><br> new_bullet = Bullet(ai_settings, screen, ship) <br> bullets.add(new_bullet) <br> --snip-- <br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_events</span>(<span class="hljs-params">ai_settings, screen, ship, bullets</span>):<br> <span class="hljs-string">&quot;&quot;&quot;响应按键和鼠标事件&quot;&quot;&quot;</span> <br> <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get(): <br> --snip-- <br> <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYDOWN: <br> check_keydown_events(event, ai_settings, screen, ship, bullets) <br> --snip-- <br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_screen</span>(<span class="hljs-params">ai_settings, screen, ship, bullets</span>):<br> --snip-- <br> <span class="hljs-comment"># 在飞船和外星人后面重绘所有子弹</span><br> <span class="hljs-keyword">for</span> bullet <span class="hljs-keyword">in</span> bullets.sprites(): <br> bullet.draw_bullet() <br> ship.blitme() <br> --snip--<br></code></pre></td></tr></table></figure><p>编组bulltes传递给了check_keydown_events()。玩家按空格键时，创建一颗新子弹（一个名为new_bullet的Bullet实例），并使用方法add()将其加入到编组bullets中；代码bullets.add(new_bullet)将新子弹存储到编组bullets中。</p><p>在check_events()的定义中，我们需要添加形参bullets；调用check_keydown_events()时，我们也需要将bullets作为实参传递给它。</p><p>给在屏幕上绘制子弹的 update_screen() 添加了形参 bullets 。方法bullets.sprites()返回一个列表，其中包含编组bullets中的所有精灵。为在屏幕上绘制发射的所有子弹，我们遍历编组bullets中的精灵，并对每个精灵都调用draw_bullet()。</p><p>如果此时运行alien_invasion.py，将能够左右移动飞船，并发射任意数量的子弹。子弹在屏幕上向上穿行，抵达屏幕顶部后消失。可在settings.py中修改子弹的尺寸、颜色和速度。</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306100918932.webp"></p><p><strong>删除消失的子弹</strong></p><p>子弹抵达屏幕顶端后消失，这仅仅是因为Pygame无法在屏幕外面绘制它们。这些子弹实际上依然存在，它们的<em>y</em>坐标为负数，且越来越小。这是个问题，因为它们将继续消耗内存和处理能力。</p><p>为此，我们需要检测这样的条件，即表示子弹的rect的bottom属性为零，它表明子弹已穿过屏幕顶端：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 删除已消失的子弹</span><br> <span class="hljs-keyword">for</span> bullet <span class="hljs-keyword">in</span> bullets.copy(): <br> <span class="hljs-keyword">if</span> bullet.rect.bottom &lt;= <span class="hljs-number">0</span>: <br> bullets.remove(bullet) <br> <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(bullets))<br></code></pre></td></tr></table></figure><p>在for循环中，不应从列表或编组中删除条目，因此必须遍历编组的副本。我们使用了方法copy()来设置for循环，这让我们能够在循环中修改bullets。我们检查每颗子弹，看看它是否已从屏幕顶端消失。如果是这样，就将其从bullets中删除。我们使用了一条print语句，以显示当前还有多少颗子弹，从而核实已消失的子弹确实删除了。</p><p><strong>限制子弹的数量</strong></p><p>很多射击游戏都对可同时出现在屏幕上的子弹数量进行限制，以鼓励玩家有目标地射击，因此可以修改settings类，并在game_fuctions中新增子弹前检查当前子弹数量是否小于设定值</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306100929748.webp"></p><p><strong>创建update_bullets()函数</strong></p><p>编写并检查子弹管理代码后，可将其移到模块game_functions中，以让主程序文件alien_invasion.py尽可能简单，在game_fuctions.py后面追加一个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_bulltes</span>(<span class="hljs-params">bullets</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;更新子弹位置，并删除已消失的子弹&quot;&quot;&quot;</span><br>    <span class="hljs-comment">#更新子弹位置</span><br>    bullets.update()<br><br>    <span class="hljs-comment">#删除消失的子弹</span><br>    <span class="hljs-keyword">for</span> bullet <span class="hljs-keyword">in</span> bullets.copy():<br>        <span class="hljs-keyword">if</span> bullet.rect.bottom &lt;= <span class="hljs-number">0</span> :<br>            bullets.remove(bullet)  <br></code></pre></td></tr></table></figure><p><strong>创建函数 fire_bullet()</strong></p><p>将发射子弹的代码移到一个独立的函数中，这样，在check_keydown_events()中只需使用一行代码来发射子弹，让elif代码块变得非常简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fire_bullet</span>(<span class="hljs-params">ai_settings,screen,ship,bullets</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;如果还没达到子弹数量限制，就发射一个子弹&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(bullets) &lt; ai_settings.bullets_allowed:<br>        new_bullet = Bullet(ai_settings,screen,ship)<br>        bullets.add(new_bullet)    <br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306100941671.webp"></p><h2 id="3-外星人"><a href="#3-外星人" class="headerlink" title="3.外星人"></a>3.外星人</h2><p>首先，我们在屏幕上边缘附近添加一个外星人，然后生成一群外星人。我们让这群外星人向两边和下面移动，并删除被子弹击中的外星人。最后，我们将显示玩家拥有的飞船数量，并在玩家的飞船用完后结束游戏。</p><h3 id="3-1创建Alien类"><a href="#3-1创建Alien类" class="headerlink" title="3.1创建Alien类"></a>3.1创建Alien类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygame<br><span class="hljs-keyword">from</span> pygame.sprite <span class="hljs-keyword">import</span> Sprite<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Alien</span>(<span class="hljs-title class_ inherited__">Sprite</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;表示单个外星人的类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,ai_settings,screen</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化外星人并设置其初始位置&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.screen = screen<br>        self.ai_settings = ai_settings<br><br>        <span class="hljs-comment">#加载外星人图像并获取其外接矩形</span><br>        self.image = pygame.image.load(ai_settings.alien_image)<br>        self.rect = self.image.get_rect()<br>        self.screen_rect = screen.get_rect()<br><br>        <span class="hljs-comment">#每个外星人都在左上角附近</span><br>        self.rect.x = self.rect.width<br>        self.rect.y = self.rect.height<br><br>        <span class="hljs-comment">#在外星人的准备位置</span><br>        self.x = <span class="hljs-built_in">float</span>(self.rect.x)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">blitme</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;在指定位置绘制飞船&quot;&quot;&quot;</span><br>        self.screen.blit(self.image,self.rect)<br></code></pre></td></tr></table></figure><p>除位置不同外，这个类的大部分代码都与Ship类相似。每个外星人最初都位于屏幕左上角附近，我们将每个外星人的左边距都设置为外星人的宽度，并将上边距设置为外星人的高度</p><p><strong>创建Alien实例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_game</span>(): <br> --snip-- <br> <span class="hljs-comment"># 创建一个外星人</span><br> alien = Alien(ai_settings, screen) <br> <span class="hljs-comment"># 开始游戏主循环</span><br> <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>: <br> gf.check_events(ai_settings, screen, ship, bullets) <br> ship.update() <br> gf.update_bullets(bullets) <br> gf.update_screen(ai_settings, screen, ship, alien, bullets)<br></code></pre></td></tr></table></figure><p>导入了新创建的Alien类，并在进入主while循环前创建了一个Alien实例。我们没有修改外星人的位置，因此该while循环没有任何新东西，但我们修改了对update_screen()的调用，传递了一个外星人实例</p><p><strong>让外星人出现在屏幕上</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_screen</span>(<span class="hljs-params">ai_settings, screen, ship, alien, bullets</span>): <br> --snip-- <br> <br> <span class="hljs-comment"># 在飞船和外星人后面重绘所有的子弹</span><br> <span class="hljs-keyword">for</span> bullet <span class="hljs-keyword">in</span> bullets: <br> bullet.draw_bullet() <br> ship.blitme() <br> alien.blitme() <br> <br> <span class="hljs-comment"># 让最近绘制的屏幕可见</span><br> pygame.display.flip()<br></code></pre></td></tr></table></figure><p>先绘制飞船和子弹，再绘制外星人，让外星人在屏幕上位于最前面</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306101048326.webp"></p><h3 id="3-2创建一群外星人"><a href="#3-2创建一群外星人" class="headerlink" title="3.2创建一群外星人"></a>3.2创建一群外星人</h3><p>要绘制一群外星人，需要确定一行能容纳多少个外星人以及要绘制多少行外星人。我们将首先计算外星人之间的水平间距，并创建一行外星人，再确定可用的垂直空间，并创建整群外星人</p><p><code>available_space_x = ai_settings.screen_width – (2 * alien_width)</code>:为确定一行可容纳多少个外星人，我们来看看可用的水平空间有多大。屏幕宽度存储在ai_settings.screen_width中，但需要在屏幕两边都留下一定的边距，把它设置为外星人的宽度。由于有两个边距，因此可用于放置外星人的水平空间为屏幕宽度减去外星人宽度的两倍</p><p><code>number_aliens_x = available_space_x / (2 * alien_width) </code>:我们还需要在外星人之间留出一定的空间，即外星人宽度。因此，显示一个外星人所需的水平空间为外星人宽度的两倍：一个宽度用于放置外星人，另一个宽度为外星人右边的空白区域。为确定一行可容纳多少个外星人，我们将可用空间除以外星人宽度的两倍</p><p><strong>创建多行外星人</strong></p><p>为创建一行外星人，首先在alien_invasion.py中创建一个名为aliens的空编组，用于存储全部外星人，再调用game_functions.py中创建外星人群的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#创建一个用于存储外星人的编组</span><br>   aliens = Group()<br>   <span class="hljs-comment">#创建外星人群</span><br>   gf.create_fleet(ai_settings,screen,aliens)<br><br>   <span class="hljs-comment">#开始游戏的主循环</span><br>   <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><br>       <span class="hljs-comment">#监视键盘和鼠标事件</span><br>       gf.check_events(ai_settings,screen,ship,bullets)        <br>       ship.update()<br><br>       gf.update_bulltes(bullets)<br><br>       <span class="hljs-comment">#刷新屏幕</span><br>       gf.update_screen(ai_settings,screen,ship,aliens,bullets)<br></code></pre></td></tr></table></figure><ul><li>创建了一个空编组，用于存储所有的外星人。</li><li>调用稍后将编写的函数create_fleet()，并将ai_settings、对象screen和空编组aliens传递给它。</li><li>修改对update_screen()的调用，让它能够访问外星人编组</li></ul><p><strong>创建外星人群</strong></p><p>新函数create_fleet()，我们将它放在game_functions. py的末尾。我们还需要导入Alien类，因此务必在文件game_functions.py开头添加相应的import语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_fleet</span>(<span class="hljs-params">ai_settings,screen,aliens</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;创建外星人群&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 创建一个外星人，并计算一行可容纳多少个外星人</span><br>    <span class="hljs-comment"># 外星人间距为外星人宽度</span><br>    alien = Alien(ai_settings, screen)<br>    alien_width = alien.rect.width<br>    available_space_x = ai_settings.screen_width - <span class="hljs-number">2</span> * alien_width<br>    number_aliens_x = <span class="hljs-built_in">int</span>(available_space_x / (<span class="hljs-number">2</span> * alien_width))<br><br>    <span class="hljs-comment">#创建一行外星人</span><br>    <span class="hljs-keyword">for</span> alien_number <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(number_aliens_x):<br>        <span class="hljs-comment"># 创建一个外星人并将其加入当前行</span><br>        alien = Alien(ai_settings,screen)<br>        alien.x = alien_width + <span class="hljs-number">2</span>*alien_width*alien_number<br>        alien.rect.x = alien.x<br>        aliens.add(alien)<br></code></pre></td></tr></table></figure><p><strong>重构create_fleet()</strong></p><p>将create_fleet()函数拆分为get_number_aliens_x()和create_alien():</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_fleet</span>(<span class="hljs-params">ai_settings,screen,aliens</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;创建外星人群&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 创建一个外星人，并计算一行可容纳多少个外星人</span><br>    <span class="hljs-comment"># 外星人间距为外星人宽度</span><br>    alien = Alien(ai_settings, screen)<br>    number_aliens_x = get_number_aliens_x(ai_settings, alien.rect.width)<br>    <span class="hljs-keyword">for</span> alien_number <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(number_aliens_x): <br>        create_alien(ai_settings, screen, aliens, alien_number)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_number_aliens_x</span>(<span class="hljs-params">ai_settings,alien_width</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;计算每行可容纳多少个外星人&quot;&quot;&quot;</span><br>    available_space_x = ai_settings.screen_width - <span class="hljs-number">2</span> * alien_width<br>    number_aliens_x = <span class="hljs-built_in">int</span>(available_space_x / (<span class="hljs-number">2</span> * alien_width))<br>    <span class="hljs-keyword">return</span> number_aliens_x<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_alien</span>(<span class="hljs-params">ai_settings,screen,aliens,alien_number</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;创建一个外星人并将其放在当前行&quot;&quot;&quot;</span><br>    alien = Alien(ai_settings, screen) <br>    alien_width = alien.rect.width<br>    alien.x = alien_width + <span class="hljs-number">2</span> * alien_width * alien_number <br>    alien.rect.x = alien.x <br>    aliens.add(alien)<br></code></pre></td></tr></table></figure><ul><li>函数get_number_aliens_x()的代码都来自create_fleet()，且未做任何修改。</li><li>函数create_alien()的代码也都来自create_fleet()，且未做任何修改，只是使用刚创建的外星人来获取外星人宽度。</li><li>我们将计算可用水平空间的代码替换为对get_number_aliens_x()的调用，并删除了引用alien_width的代码行，因为现在这是在create_alien()中处理的。然后调用create_alien()。</li></ul><p><strong>添加行</strong></p><p>要创建外星人群，需要计算屏幕可容纳多少行，并对创建一行外星人的循环重复相应的次数.</p><p>为计算可容纳的行数，我们这样计算可用垂直空间：将屏幕高度减去第一行外星人的上边距（外星人高度）、飞船的高度以及最初外星人群与飞船的距离（外星人高度的两倍）：</p><blockquote><p>available_space_y &#x3D; ai_settings.screen_height – 3 * alien_height – ship_height </p></blockquote><p>每行下方都要留出一定的空白区域，并将其设置为外星人的高度。为计算可容纳的行数，我们将可用垂直空间除以外星人高度的两倍（同样，如果这样的计算不对，我们马上就能发现，继而将间距调整为合理的值）。</p><blockquote><p>number_rows &#x3D; available_height_y &#x2F; (2 * alien_height) </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_fleet</span>(<span class="hljs-params">ai_settings,screen,ship,aliens</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;创建外星人群&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 创建一个外星人，并计算一行可容纳多少个外星人</span><br>    <span class="hljs-comment"># 外星人间距为外星人宽度</span><br>    alien = Alien(ai_settings, screen)<br>    number_aliens_x = get_number_aliens_x(ai_settings, alien.rect.width)<br>    number_rows = get_number_aliens_row(ai_settings,ship.rect.height,alien.rect.height)<br>    <span class="hljs-keyword">for</span> row_number <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(number_rows):<br>        <span class="hljs-keyword">for</span> alien_number <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(number_aliens_x): <br>            create_alien(ai_settings, screen, aliens, alien_number,row_number)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_number_aliens_x</span>(<span class="hljs-params">ai_settings,alien_width</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;计算每行可容纳多少个外星人&quot;&quot;&quot;</span><br>    available_space_x = ai_settings.screen_width - <span class="hljs-number">2</span> * alien_width<br>    number_aliens_x = <span class="hljs-built_in">int</span>(available_space_x / (<span class="hljs-number">2</span> * alien_width))<br>    <span class="hljs-keyword">return</span> number_aliens_x<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_number_aliens_row</span>(<span class="hljs-params">ai_settings,ship_height,alien_height</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;计算可容纳多少行外星人&quot;&quot;&quot;</span><br>    available_apace_y = ai_settings.screen_height - <span class="hljs-number">3</span> * alien_height - ship_height<br>    number_rows = <span class="hljs-built_in">int</span>(available_apace_y / (<span class="hljs-number">2</span> * alien_height))<br>    <span class="hljs-keyword">return</span> number_rows<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_alien</span>(<span class="hljs-params">ai_settings,screen,aliens,alien_number,row_number</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;创建一个外星人并将其放在当前行&quot;&quot;&quot;</span><br>    alien = Alien(ai_settings, screen) <br>    alien_width = alien.rect.width<br>    alien.x = alien_width + <span class="hljs-number">2</span> * alien_width * alien_number <br>    alien.rect.x = alien.x <br>    alien.rect.y = alien.rect.height + <span class="hljs-number">2</span> * alien.rect.height * row_number<br>    aliens.add(alien)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306101544095.webp"></p><h3 id="3-3让外星人移动"><a href="#3-3让外星人移动" class="headerlink" title="3.3让外星人移动"></a>3.3让外星人移动</h3><p>下面来让外星人群在屏幕上向右移动，撞到屏幕边缘后下移一定的距离，再沿相反的方向移动。我们将不断地移动所有的外星人，直到所有外星人都被消灭，有外星人撞上飞船，或有外星人抵达屏幕底端</p><p><strong>向右移动外星人</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self</span>): <br> <span class="hljs-string">&quot;&quot;&quot;向右移动外星人&quot;&quot;&quot;</span> <br> self.x += self.ai_settings.alien_speed_factor <br> self.rect.x = self.x<br></code></pre></td></tr></table></figure><p>在settings.py类中增加外星人的移动速度<code>ai_settings.alien_speed_factor </code></p><p>在game_fuctions.py中增加函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_aliens</span>(<span class="hljs-params">aliens</span>): <br> <span class="hljs-string">&quot;&quot;&quot;更新外星人群中所有外星人的位置&quot;&quot;&quot;</span> <br> aliens.update()<br></code></pre></td></tr></table></figure><p><strong>增加移动方向设置</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 外星人设置</span><br>self.alien_speed_factor = <span class="hljs-number">1</span> <br>self.fleet_drop_speed = <span class="hljs-number">10</span> <br><span class="hljs-comment"># fleet_direction为1表示向右移，为-1表示向左移</span><br>self.fleet_direction = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>设置fleet_drop_speed指定了有外星人撞到屏幕边缘时，外星人群向下移动的速度。将这个速度与水平速度分开是有好处的，这样你就可以分别调整这两种速度了。</p><p>要实现fleet_direction设置，可以将其设置为文本值，如’left’或’right’，但这样就必须编写if-elif语句来检查外星人群的移动方向。鉴于只有两个可能的方向，我们使用值1和-1来表示它们，并在外星人群改变方向时在这两个值之间切换。</p><p>另外，鉴于向右移动时需要增大每个外星人的<em>x</em>坐标，而向左移动时需要减小每个外星人的<em>x</em>坐标，使用数字来表示方向更合理.</p><p><strong>检查是否撞到屏幕</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_edges</span>(<span class="hljs-params">self</span>): <br> <span class="hljs-string">&quot;&quot;&quot;如果外星人位于屏幕边缘，就返回True&quot;&quot;&quot;</span> <br> screen_rect = self.screen.get_rect() <br> <span class="hljs-keyword">if</span> self.rect.right &gt;= screen_rect.right: <br> <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <br> <span class="hljs-keyword">elif</span> self.rect.left &lt;= <span class="hljs-number">0</span>: <br> <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <br> <br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self</span>): <br> <span class="hljs-string">&quot;&quot;&quot;向左或向右移动外星人&quot;&quot;&quot;</span> <br> self.x += (self.ai_settings.alien_speed_factor * <br> self.ai_settings.fleet_direction) <br> self.rect.x = self.x<br></code></pre></td></tr></table></figure><p>我们可对任何外星人调用新方法check_edges()，看看它是否位于屏幕左边缘或右边缘。如果外星人的rect的right属性大于或等于屏幕的rect的right属性，就说明外星人位于屏幕右边缘。如果外星人的rect的left属性小于或等于0，就说明外星人位于屏幕左边缘。</p><p>修改了方法update()，将移动量设置为外星人速度和fleet_direction的乘积，让外星人向左或向右移。如果fleet_direction为1，就将外星人当前的<em>x</em>坐标增大alien_speed_factor，从而将外星人向右移；如果fleet_direction为，就将外星人当前的<em>x</em>坐标减去alien_speed_factor，从而将外星人向左移。</p><p><strong>向下移动</strong></p><p>有外星人到达屏幕边缘时，需要将整群外星人下移，并改变它们的移动方向。需要对game_functions.py做重大修改，因为我们要在这里检查是否有外星人到达了左边缘或右边缘。为此，我们编写函数check_fleet_edges()和change_fleet_direction()，并对update_aliens()进行修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_fleet_edges</span>(<span class="hljs-params">ai_settings, aliens</span>): <br> <span class="hljs-string">&quot;&quot;&quot;有外星人到达边缘时采取相应的措施&quot;&quot;&quot;</span> <br> <span class="hljs-keyword">for</span> alien <span class="hljs-keyword">in</span> aliens.sprites(): <br> <span class="hljs-keyword">if</span> alien.check_edges(): <br> change_fleet_direction(ai_settings, aliens) <br> <span class="hljs-keyword">break</span> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change_fleet_direction</span>(<span class="hljs-params">ai_settings, aliens</span>): <br> <span class="hljs-string">&quot;&quot;&quot;将整群外星人下移，并改变它们的方向&quot;&quot;&quot;</span> <br> <span class="hljs-keyword">for</span> alien <span class="hljs-keyword">in</span> aliens.sprites():<br> alien.rect.y += ai_settings.fleet_drop_speed <br> ai_settings.fleet_direction *= -<span class="hljs-number">1</span><br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_aliens</span>(<span class="hljs-params">ai_settings, aliens</span>): <br> <span class="hljs-string">&quot;&quot;&quot; </span><br><span class="hljs-string"> 检查是否有外星人位于屏幕边缘，并更新整群外星人的位置</span><br><span class="hljs-string"> &quot;&quot;&quot;</span><br> check_fleet_edges(ai_settings, aliens)<br> aliens.update()<br></code></pre></td></tr></table></figure><p>在check_fleet_edges()中，我们遍历外星人群，并对其中的每个外星人调用check_edges()。如果check_edges()返回True，我们就知道相应的外星人位于屏幕边缘，需要改变外星人群的方向，因此我们调用change_fleet_direction()并退出循环。在change_fleet_direction()中，我们遍历所有外星人，将每个外星人下移fleet_drop_speed设置的值；然后，将fleet_direction的值修改为其当前值与-1的乘积。</p><p>我们修改了函数update_aliens()，在其中通过调用check_fleet_edges()来确定是否有外星人位于屏幕边缘。现在，函数update_aliens()包含形参ai_settings，因此我们调用它时指定了与ai_settings对应的实参。</p><h3 id="3-4射杀外星人"><a href="#3-4射杀外星人" class="headerlink" title="3.4射杀外星人"></a>3.4射杀外星人</h3><p>游戏编程中，碰撞指的是游戏元素重叠在一起。要让子弹能够击落外星人，我们将使用sprite.groupcollide()检测两个编组的成员之间的碰撞。</p><p><strong>检测子弹与外星人的碰撞</strong></p><p>方法sprite.groupcollide()将每颗子弹的rect同每个外星人的rect进行比较，并返回一个字典，其中包含发生了碰撞的子弹和外星人。在这个字典中，每个键都是一颗子弹，而相应的值都是被击中的外星人</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_bullets</span>(<span class="hljs-params">aliens, bullets</span>): <br> <span class="hljs-string">&quot;&quot;&quot;更新子弹的位置，并删除已消失的子弹&quot;&quot;&quot;</span> <br> --snip-- <br> <span class="hljs-comment"># 检查是否有子弹击中了外星人</span><br> <span class="hljs-comment"># 如果是这样，就删除相应的子弹和外星人</span><br> collisions = pygame.sprite.groupcollide(bullets, aliens, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>新增的这行代码遍历编组bullets中的每颗子弹，再遍历编组aliens中的每个外星人。每当有子弹和外星人的rect重叠时，groupcollide()就在它返回的字典中添加一个键-值对。两个实参True告诉Pygame删除发生碰撞的子弹和外星人(要模拟能够穿行到屏幕顶端的高能子弹——消灭它击中的每个外星人，可将第一个布尔实参设置为False，并让第二个布尔实参为True。这样被击中的外星人将消失，但所有的子弹都始终有效，直到抵达屏幕顶端后消失。)</p><p><strong>为测试创建大子弹</strong></p><p>测试有些功能时，可以修改游戏的某些设置，以便专注于游戏的特定方面。例如，可以缩小屏幕以减少需要击落的外星人数量，也可以提高子弹的速度，以便能够在单位时间内发射大量子弹。</p><p><strong>生成新的外星人群</strong></p><p>要在外星人群被消灭后又显示一群外星人，首先需要检查编组aliens是否为空。如果为空，就调用create_fleet()。我们将在update_bullets()中执行这种检查，因为外星人都是在这里被消灭的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(aliens) == <span class="hljs-number">0</span>:<br>    <span class="hljs-comment"># 删除现有的子弹并生成新的外星人群</span><br>    bullets.empty()<br>    create_fleet(ai_settings,screen,ship,aliens)<br></code></pre></td></tr></table></figure><p><strong>提高子弹速度</strong></p><p>如果你现在尝试在这个游戏中射杀外星人，可能发现子弹的速度比以前慢，这是因为在每次循环中， Pygame 需要做的工作更多了。为提高子弹的速度，可调整 settings.py 中bullet_speed_factor的值。</p><p><strong>重构update_bullets()</strong></p><p>下面来重构update_bullets()，使其不再完成那么多任务。我们将把处理子弹和外星人碰撞的代码移到一个独立的函数中</p><h3 id="3-5结束游戏"><a href="#3-5结束游戏" class="headerlink" title="3.5结束游戏"></a>3.5结束游戏</h3><p><strong>检测外星人与飞船的碰撞</strong></p><p>我们首先检查外星人和飞船之间的碰撞，以便外星人撞上飞船时我们能够作出合适的响应。我们在更新每个外星人的位置后立即检测外星人和飞船之间的碰撞。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_aliens</span>(<span class="hljs-params">ai_settings,ship,aliens</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;更新外星人的位置&quot;&quot;&quot;</span><br>    check_fleet_edges(ai_settings,aliens)<br>    aliens.update()<br><br>    <span class="hljs-comment"># 检测外星人与飞船的碰撞</span><br>    <span class="hljs-keyword">if</span> pygame.sprite.groupcollide(ship,aliens):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;飞船被击中啦！&#x27;</span>)<br></code></pre></td></tr></table></figure><p>方法spritecollideany()接受两个实参：一个精灵和一个编组。它检查编组是否有成员与精灵发生了碰撞，并在找到与精灵发生了碰撞的成员后就停止遍历编组。在这里，它遍历编组aliens，并返回它找到的第一个与飞船发生了碰撞的外星人。</p><p>如果没有发生碰撞，spritecollideany()将返回None，因此Ø处的if代码块不会执行。如果找到了与飞船发生碰撞的外星人，它就返回这个外星人，因此if代码块将执行：打印“Ship hit!!!”。（有外星人撞到飞船时，需要执行的任务很多：需要删除余下的所有外星人和子弹，让飞船重新居中，以及创建一群新的外星人。</p><p><strong>响应外星人与飞船的碰撞</strong></p><p>现在需要确定外星人与飞船发生碰撞时，该做些什么。我们不销毁ship实例并创建一个新的ship实例，而是通过跟踪游戏的统计信息来记录飞船被撞了多少次（跟踪统计信息还有助于记分）。</p><p>下面来编写一个用于跟踪游戏统计信息的新类——GameStats，并将其保存为文件game_stats.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">GameStats</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;跟踪游戏的统计信息&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,ai_settings</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化统计信息&quot;&quot;&quot;</span><br>        self.ai_settings = ai_settings<br>        self.reset_stats()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reset_stats</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化在游戏运行期间可能变化的统计信息&quot;&quot;&quot;</span><br>        self.ships_left = self.ai_settings.ship_limit<br></code></pre></td></tr></table></figure><p>在这个游戏运行期间，我们只创建一个GameStats实例，但每当玩家开始新游戏时，需要重置一些统计信息。为此，我们在方法reset_stats()中初始化大部分统计信息，而不是在__init__()中直接初始化它们。我们在__init__()中调用这个方法，这样创建GameStats实例时将妥善地设置这些统计信息，同时在玩家开始新游戏时也能调用reset_stats()。</p><p>当前只有一项统计信息——ships_left，其值在游戏运行期间将不断变化。一开始玩家拥有的飞船数存储在settings.py的ship_limit中.</p><p>我们还需对alien_invasion.py做些修改，以创建一个GameStats实例：</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306102019847.webp"></p><p>我们导入了新类GameStats，创建了一个名为stats的实例，再调用update_aliens()并添加了实参stats、screen和ship。在有外星人撞到飞船时，我们将使用这些实参来跟踪玩家还有多少艘飞船，以及创建一群新的外星人.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">update_aliens</span>(<span class="hljs-params">ai_settings,stats,screen,ship,aliens</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;更新外星人的位置&quot;&quot;&quot;</span><br>    check_fleet_edges(ai_settings,aliens)<br>    aliens.update()<br><br>    <span class="hljs-comment"># 检测外星人与飞船的碰撞</span><br>    <span class="hljs-keyword">if</span> pygame.sprite.spritecollideany(ship,aliens):<br>        ship_hit(ai_settings,screen,ship,aliens)<br>        <span class="hljs-comment"># print(f&#x27;飞船被击中啦！&#x27;)</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ship_hit</span>(<span class="hljs-params">ai_settings, stats, screen, ship, aliens, bullets</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;响应被外星人碰撞到的飞船&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 将ships_left减1</span><br>    stats.ships_left -= <span class="hljs-number">1</span><br><br>    <span class="hljs-comment">#清空外星人列表和子弹列表</span><br>    aliens.empty()<br>    bullets.empty()<br><br>    <span class="hljs-comment">#创建一群外星人，并将飞船放到屏幕底端中央</span><br>    create_fleet(ai_settings,screen,ship,aliens)<br>    ship.center_ship()<br><br>    <span class="hljs-comment"># 暂停</span><br>    sleep(<span class="hljs-number">0.5</span>)<br></code></pre></td></tr></table></figure><p>我们首先从模块time中导入了函数sleep()，以便使用它来让游戏暂停。新函数ship_hit()在飞船被外星人撞到时作出响应。在这个函数内部，将余下的飞船数减1，然后清空编组aliens和bullets。</p><p>接下来，我们创建一群新的外星人，并将飞船居中，稍后将在Ship类中添加方法center_ship()。最后，我们更新所有元素后（但在将修改显示到屏幕前）暂停，让玩家知道其飞船被撞到了。屏幕将暂时停止变化，让玩家能够看到外星人撞到了飞船。函数sleep()执行完毕后，将接着执行函数update_screen().</p><p>更新了update_aliens()的定义，使其包含形参stats、screen和bullets，让它能够在调用ship_hit()时传递这些值.</p><p><strong>有外星人到达屏幕底端</strong></p><p>如果有外星人到达屏幕底端，我们将像有外星人撞到飞船那样作出响应。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_aliens_bottom</span>(<span class="hljs-params">ai_settings, stats,screen,ship,aliens,bullets</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;检测是否有外星人抵达屏幕底端&quot;&quot;&quot;</span><br>    screen_rect = screen.get_rect()<br>    <span class="hljs-keyword">for</span> alien <span class="hljs-keyword">in</span> aliens.sprites():<br>        <span class="hljs-keyword">if</span> alien.rect.bottom &gt;= screen_rect.bottom:<br>            <span class="hljs-comment">#像与飞船碰撞一样的处理</span><br>            ship_hit(ai_settings,stats,screen,ship,aliens,bullets)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>函数check_aliens_bottom()检查是否有外星人到达了屏幕底端。到达屏幕底端后，外星人的属性rect.bottom的值大于或等于屏幕的属性rect.bottom的值。如果有外星人到达屏幕底端，我们就调用ship_hit()；只要检测到一个外星人到达屏幕底端，就无需检查其他外星人，因此我们在调用ship_hit()后退出循环。</p><p>我们在更新所有外星人的位置并检测是否有外星人和飞船发生碰撞后调用check_aliens_bottom()</p><p><strong>结束游戏</strong></p><p>现在这个游戏看起来更完整了，但它永远都不会结束，只是ships_left不断变成更小的负数。</p><p>下面在GameStats中添加一个作为标志的属性game_active，以便在玩家的飞船用完后结束游戏.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, settings</span>): <br>--snip-- <br><span class="hljs-comment"># 游戏刚启动时处于活动状态</span><br>self.game_active = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>现在在ship_hit()中添加代码，在玩家的飞船都用完后将game_active设置为False</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ship_hit</span>(<span class="hljs-params">ai_settings, stats, screen, ship, aliens, bullets</span>): <br> <span class="hljs-string">&quot;&quot;&quot;响应飞船被外星人撞到&quot;&quot;&quot;</span> <br> <span class="hljs-keyword">if</span> stats.ships_left &gt; <span class="hljs-number">0</span>: <br>     <span class="hljs-comment"># 将ships_left减1 </span><br>     stats.ships_left -= <span class="hljs-number">1</span> <br>     --snip-- <br>     <span class="hljs-comment">#暂停一会儿</span><br>     sleep(<span class="hljs-number">0.5</span>) <br> <span class="hljs-keyword">else</span>: <br> stats.game_active = <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p><strong>确定应运行游戏的哪个部分</strong></p><p>在alien_invasion.py中，我们需要确定游戏的哪些部分在任何情况下都应运行，哪些部分仅在游戏处于活动状态时才运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><br>    <span class="hljs-comment">#监视键盘和鼠标事件</span><br>    gf.check_events(ai_settings,screen,ship,bullets) <br><br>    <span class="hljs-keyword">if</span> stats.game_active:       <br>        ship.update()      <br>        gf.update_bulltes(ai_settings,screen,ship,bullets,aliens)<br>        gf.update_aliens(ai_settings, stats, screen, ship, aliens,bullets)<br><br><br>    <span class="hljs-comment">#刷新屏幕</span><br>    gf.update_screen(ai_settings,screen,ship,aliens,bullets)<br></code></pre></td></tr></table></figure><h2 id="4-记分系统"><a href="#4-记分系统" class="headerlink" title="4.记分系统"></a>4.记分系统</h2><h3 id="4-1添加PLAY按钮"><a href="#4-1添加PLAY按钮" class="headerlink" title="4.1添加PLAY按钮"></a>4.1添加PLAY按钮</h3><p>将添加一个Play按钮，它在游戏开始前出现，并在游戏结束后再次出现，让玩家能够开始新游戏</p><p>下面让游戏一开始处于非活动状态，并提示玩家单击Play按钮来开始游戏。为此，在game_stats.py中将<code>self.game_active = False</code></p><p><strong>创建button类</strong></p><p>由于Pygame没有内置创建按钮的方法，我们创建一个Button类，用于创建带标签的实心矩形</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygame.font<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Button</span>():<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,ai_settings,screen,msg</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化按钮&quot;&quot;&quot;</span><br>        self.screen = screen<br>        self.screen_rect = screen.get_rect()<br><br>        <span class="hljs-comment">#设置按钮的大小和其他属性</span><br>        self.width, self.height = <span class="hljs-number">200</span>, <span class="hljs-number">50</span><br>        self.button_color = (<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>)<br>        self.text_color = (<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>)<br>        self.font = pygame.font.SysFont(<span class="hljs-literal">None</span>,<span class="hljs-number">48</span>)<br><br>        <span class="hljs-comment">#创建按钮的rect对象，并使其居中</span><br>        self.rect = pygame.Rect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,self.width,self.height)<br>        self.rect.center = self.screen_rect.center<br><br>        <span class="hljs-comment">#按钮标签只需创建一次</span><br>        self.prep_msg(msg)<br></code></pre></td></tr></table></figure><p>首先，我们导入了模块pygame.font，它让Pygame能够将文本渲染到屏幕上。方法__init__()接受参数self，对象ai_settings和screen，以及msg，其中msg是要在按钮中显示的文本。</p><p>我们设置按钮的尺寸，然后通过设置button_color让按钮的rect对象为亮绿色，并通过设置text_color让文本为白色。</p><p>指定使用什么字体来渲染文本。实参None让Pygame使用默认字体，而48指定了文本的字号。</p><p>为让按钮在屏幕上居中，我们创建一个表示按钮的rect对象，并将其center属性设置为屏幕的center属性。</p><p>Pygame通过将你要显示的字符串渲染为图像来处理文本。调用prep_msg()来处理这样的渲染。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">prep_msg</span>(<span class="hljs-params">self,msg</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;将msg渲染为图像，并使其在按钮居中&quot;&quot;&quot;</span><br>    self.msg_image = self.font.render(msg,<span class="hljs-literal">True</span>,self.text_color,<br>                                      self.button_color)<br>    self.msg_image_rect = self.msg_image.get_rect()<br>    self.msg_image_rect.center = self.rect.center<br></code></pre></td></tr></table></figure><p>调用screen.fill()来绘制表示按钮的矩形，再调用screen.blit()，并向它传递一幅图像以及与该图像相关联的rect对象，从而在屏幕上绘制文本图像</p><p><strong>在屏幕上绘制按钮</strong></p><p>使用Button类来创建一个Play按钮。鉴于只需要一个Play按钮，我们直接在alien_invasion.py中创建它</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#绘制一个开始按钮</span><br>play_button = Button(ai_settings,screen,<span class="hljs-string">&#x27;Play&#x27;</span>)<br><span class="hljs-comment">#开始游戏的主循环</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><br>    <span class="hljs-comment">#监视键盘和鼠标事件</span><br>    gf.check_events(ai_settings,screen,ship,bullets) <br><br>    <span class="hljs-keyword">if</span> stats.game_active:       <br>        ship.update()      <br>        gf.update_bulltes(ai_settings,screen,ship,bullets,aliens)<br>        gf.update_aliens(ai_settings, stats, screen, ship, aliens,<br>                         bullets)<br><br><br>    <span class="hljs-comment">#刷新屏幕</span><br>    gf.update_screen(ai_settings,screen,stats,ship,aliens,bullets,<br>                     play_button)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306102120748.webp"></p><p><strong>开始游戏</strong></p><p>为在玩家单击Play按钮时开始新游戏，需在game_functions.py中添加如下代码，以监视与这个按钮相关的鼠标事件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_events</span>(<span class="hljs-params">ai_settings,screen,stats,play_button,ship,bullets</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;响应屏幕和鼠标事件&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>        <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>            sys.exit()<br>        <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYDOWN:<br>            check_keydown_events(event,ai_settings,screen,ship,bullets)<br><br>        <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYUP:<br>            <span class="hljs-comment">#按键松开时，结束向右移动飞船</span><br>            check_keyup_events(event,ship)<br>        <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.K_q:<br>            <span class="hljs-comment">#按q退出游戏</span><br>            sys.exit()<br>        <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.MOUSEBUTTONDOWN:<br>            <span class="hljs-comment">#鼠标按下</span><br>            mouse_x, mouse_y = pygame.mouse.get_pos()<br>            check_play_button(stats,play_button,mouse_x,mouse_y)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_play_button</span>(<span class="hljs-params">stats,play_button,mouse_x,mouse_y</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;在玩家单击Play按钮时开始新游戏&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> play_button.rect.collidepoint(mouse_x, mouse_y):<br>        stats.game_active = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p><strong>重置游戏</strong></p><p>为在玩家每次单击Play按钮时都重置游戏，需要重置统计信息、删除现有的外星人和子弹、创建一群新的外星人，并让飞船居中，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_play_button</span>(<span class="hljs-params">ai_settings,screen,stats,play_button,ship,aliens,</span><br><span class="hljs-params">                      bullets,mouse_x,mouse_y</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;在玩家单击Play按钮时开始新游戏&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> play_button.rect.collidepoint(mouse_x, mouse_y):<br>        <span class="hljs-comment">#重置统计信息</span><br>        stats.reset_stats()<br>        stats.game_active = <span class="hljs-literal">True</span><br><br>        <span class="hljs-comment">#清空外星人信息及子弹信息</span><br>        aliens.empty()<br>        bullets.empty()<br><br>        <span class="hljs-comment">#创建一群新的外星人和飞船，并让飞船居中</span><br>        create_fleet(ai_settings,screen,ship,aliens)<br>        ship.center_ship()<br></code></pre></td></tr></table></figure><p><strong>将 Play 按钮切换到非活动状态</strong></p><p>当前，Play按钮存在一个问题，那就是即便Play按钮不可见，玩家单击其原来所在的区域时，游戏依然会作出响应。游戏开始后，如果玩家不小心单击了Play按钮原来所处的区域，游戏将重新开始！</p><p>为修复这个问题，可让游戏仅在game_active为False时才开始</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_play_button</span>(<span class="hljs-params">ai_settings,screen,stats,play_button,ship,aliens,</span><br><span class="hljs-params">                      bullets,mouse_x,mouse_y</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;在玩家单击Play按钮时开始新游戏&quot;&quot;&quot;</span><br>    button_clicked = play_button.rect.collidepoint(mouse_x, mouse_y)<br>    <span class="hljs-keyword">if</span> button_clicked <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> stats.game_active:<br>        <span class="hljs-comment">#重置统计信息</span><br>        stats.reset_stats()<br>        stats.game_active = <span class="hljs-literal">True</span><br><br>        <span class="hljs-comment">#清空外星人信息及子弹信息</span><br>        aliens.empty()<br>        bullets.empty()<br><br>        <span class="hljs-comment">#创建一群新的外星人和飞船，并让飞船居中</span><br>        create_fleet(ai_settings,screen,ship,aliens)<br>        ship.center_ship()<br></code></pre></td></tr></table></figure><p>标志button_clicked的值为True或False，仅当玩家单击了Play按钮且游戏当前处于非活动状态时，游戏才重新开始。</p><p><strong>隐藏光标</strong></p><p>为让玩家能够开始游戏，我们要让光标可见，但游戏开始后，光标只会添乱。为修复这种问题，我们在游戏处于活动状态时让光标不可见：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> button_clicked <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> stats.game_active:<br>    <span class="hljs-comment"># 隐藏光标</span><br>    pygame.mouse.set_visible(<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>通过向set_visible()传递False，让Pygame在光标位于游戏窗口内时将其隐藏起来</p><h3 id="4-2提高等级"><a href="#4-2提高等级" class="headerlink" title="4.2提高等级"></a>4.2提高等级</h3><p>当前，将整群外星人都消灭干净后，玩家将提高一个等级，但游戏的难度并没有变。下面来增加一点趣味性：每当玩家将屏幕上的外星人都消灭干净后，加快游戏的节奏，让游戏玩起来更难</p><p><strong>修改速度设置</strong></p><p>先重新组织Settings类，将游戏设置划分成静态的和动态的两组。对于随着游戏进行而变化的设置，我们还确保它们在开始新游戏时被重置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#以什么样的速度加快游戏节奏</span><br>self.speedup_scale = <span class="hljs-number">1.1</span><br><br>self.initialize_dynamic_settings()<br></code></pre></td></tr></table></figure><p>我们添加了设置speedup_scale，用于控制游戏节奏的加快速度：2表示玩家每提高一个等级，游戏的节奏就翻倍；1表示游戏节奏始终不变。将其设置为1.1能够将游戏节奏提高到够快，让游戏既有难度，又并非不可完成。最后，我们调用initialize_dynamic_settings()，以初始化随游戏进行而变化的属性.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">initialize_dynamic_settings</span>(<span class="hljs-params">self</span>): <br>    <span class="hljs-string">&quot;&quot;&quot;初始化随游戏进行而变化的设置&quot;&quot;&quot;</span> <br>    self.ship_speed_factor = <span class="hljs-number">1.5</span> <br>    self.bullet_speed_factor = <span class="hljs-number">3</span> <br>    self.alien_speed_factor = <span class="hljs-number">1</span> <br>    <span class="hljs-comment"># fleet_direction为1表示向右；为-1表示向左</span><br>    self.fleet_direction = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>这个方法设置了飞船、子弹和外星人的初始速度。随游戏的进行，我们将提高这些速度，而每当玩家开始新游戏时，都将重置这些速度。在这个方法中，我们还设置了fleet_direction，使得游戏刚开始时，外星人总是向右移动。每当玩家提高一个等级时，我们都使用increase_speed()来提高飞船、子弹和外星人的速度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">increase_speed</span>(<span class="hljs-params">self</span>): <br>    <span class="hljs-string">&quot;&quot;&quot;提高速度设置&quot;&quot;&quot;</span> <br>    self.ship_speed_factor *= self.speedup_scale <br>    self.bullet_speed_factor *= self.speedup_scale <br>    self.alien_speed_factor *= self.speedup_scale<br></code></pre></td></tr></table></figure><p>为提高这些游戏元素的速度，我们将每个速度设置都乘以speedup_scale的值。</p><p>在check_bullet_alien_collisions()中，我们在整群外星人都被消灭后调用increase_speed()来加快游戏的节奏，再创建一群新的外星人</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306102150797.webp"></p><p><strong>重置速度</strong></p><p>每当玩家开始新游戏时，我们都需要将发生了变化的设置重置为初始值，否则新游戏开始时，速度设置将是前一次游戏增加了的值</p><h3 id="4-3记分"><a href="#4-3记分" class="headerlink" title="4.3记分"></a>4.3记分</h3><p>下面来实现一个记分系统，以实时地跟踪玩家的得分，并显示最高得分、当前等级和余下的飞船数。</p><p>得分是游戏的一项统计信息，因此我们在GameStats中添加一个score属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">reset_stats</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;初始化在游戏运行期间可能变化的统计信息&quot;&quot;&quot;</span><br>    self.ships_left = self.ai_settings.ship_limit<br>    self.score = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>为在每次开始游戏时都重置得分，我们在reset_stats()而不是__init__()中初始化score</p><p><strong>显示得分</strong></p><p>为在屏幕上显示得分，我们首先创建一个新类Scoreboard。就当前而言，这个类只显示当前得分，但后面我们也将使用它来显示最高得分、等级和余下的飞船数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygame.font<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Scoreboard</span>(): <br>    <span class="hljs-string">&quot;&quot;&quot;显示得分信息的类&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ai_settings, screen, stats</span>): <br>        <span class="hljs-string">&quot;&quot;&quot;初始化显示得分涉及的属性&quot;&quot;&quot;</span> <br>        self.screen = screen <br>        self.screen_rect = screen.get_rect() <br>        self.ai_settings = ai_settings <br>        self.stats = stats <br> <br>        <span class="hljs-comment"># 显示得分信息时使用的字体设置</span><br>        self.text_color = (<span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>)<br>        self.font = pygame.font.SysFont(<span class="hljs-literal">None</span>, <span class="hljs-number">48</span>) <br>        <span class="hljs-comment"># 准备初始得分图像</span><br>        self.prep_score()<br></code></pre></td></tr></table></figure><p>由于Scoreboard在屏幕上显示文本，因此我们首先导入模块pygame.font。接下来，我们在__init__()中包含形参ai_settings、screen和stats，让它能够报告我们跟踪的值。然后，我们设置文本颜色并实例化一个字体对象。为将要显示的文本转换为图像，我们调用了prep_score()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">prep_score</span>(<span class="hljs-params">self</span>): <br>    <span class="hljs-string">&quot;&quot;&quot;将得分转换为一幅渲染的图像&quot;&quot;&quot;</span><br>    score_str = <span class="hljs-built_in">str</span>(self.stats.score)<br>    self.score_image = self.font.render(score_str, <span class="hljs-literal">True</span>, self.text_color<br>                                        , self.ai_settings.bg_color) <br> <br>    <span class="hljs-comment"># 将得分放在屏幕右上角</span><br>    self.score_rect = self.score_image.get_rect() <br>    self.score_rect.right = self.screen_rect.right - <span class="hljs-number">20</span> <br>    self.score_rect.top = <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>在prep_score()中，我们首先将数字值stats.score转换为字符串（见），再将这个字符串传递给创建图像的render()。为在屏幕上清晰地显示得分，我们向render()传递了屏幕背景色，以及文本颜色。</p><p>我们将得分放在屏幕右上角，并在得分增大导致这个数字更宽时让它向左延伸。为确保得分始终锚定在屏幕右边，我们创建了一个名为score_rect的rect，让其右边缘与屏幕右边缘相距20像素，并让其上边缘与屏幕上边缘也相距20像素。</p><p>最后，我们创建方法show_score()，用于显示渲染好的得分图像。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_score</span>(<span class="hljs-params">self</span>): <br>    <span class="hljs-string">&quot;&quot;&quot;在屏幕上显示得分&quot;&quot;&quot;</span> <br>    self.screen.blit(self.score_image, self.score_rect)<br></code></pre></td></tr></table></figure><p><strong>创建记分牌</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建存储游戏统计信息的实例，并创建记分牌</span><br>stats = GameStats(ai_settings) <br>sb = Scoreboard(ai_settings, screen, stats)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306102203282.webp"></p><p>为显示得分，将update_screen()修改成下面这样:</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306102204866.webp"></p><p><strong>在外星人被消灭时更新得分</strong></p><p>为在屏幕上实时地显示得分，每当有外星人被击中时，我们都更新stats.score的值，再调用prep_score()更新得分图像。但在此之前，我们需要指定玩家每击落一个外星人都将得到多少个点<code>self.alien_points = 50</code></p><p>在check_bullet_alien_collisions()中，每当有外星人被击落时，都更新得分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_bullet_alien_collisions</span>(<span class="hljs-params">ai_settings, screen, ship, stats,</span><br><span class="hljs-params">                                  sb,aliens, bullets</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;响应子弹和外星人的碰撞&quot;&quot;&quot;</span> <br>    <span class="hljs-comment"># 删除发生碰撞的子弹和外星人</span><br>    collisions =  pygame.sprite.groupcollide(bullets,aliens,<span class="hljs-literal">True</span>,<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-keyword">if</span> collisions:<br>        stats.score += ai_settings.alien_points<br>        sb.prep_score()<br></code></pre></td></tr></table></figure><p>更新check_bullet_alien_collisions()的定义，在其中包含了形参stats和sb，让它能够更新得分和记分牌。有子弹撞到外星人时，Pygame返回一个字典（collisions）。我们检查这个字典是否存在，如果存在，就将得分加上一个外星人值的点数。接下来，我们调用prep_score()来创建一幅显示最新得分的新图像</p><p><strong>将消灭的每个外星人的点数都计入得分</strong></p><p>当前，我们的代码可能遗漏了一些被消灭的外星人。例如，如果在一次循环中有两颗子弹射中了外星人，或者因子弹更宽而同时击中了多个外星人，玩家将只能得到一个被消灭的外星人的点数。为修复这种问题，我们来调整检测子弹和外星人碰撞的方式。</p><p>在check_bullet_alien_collisions()中，与外星人碰撞的子弹都是字典collisions中的一个键；而与每颗子弹相关的值都是一个列表，其中包含该子弹撞到的外星人。我们遍历字典collisions，确保将消灭的每个外星人的点数都记入得分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_bullet_alien_collisions</span>(<span class="hljs-params">ai_settings, screen, ship, stats,</span><br><span class="hljs-params">                                  sb,aliens, bullets</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;响应子弹和外星人的碰撞&quot;&quot;&quot;</span> <br>    <span class="hljs-comment"># 删除发生碰撞的子弹和外星人</span><br>    collisions =  pygame.sprite.groupcollide(bullets,aliens,<span class="hljs-literal">True</span>,<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-keyword">if</span> collisions:<br>        <span class="hljs-keyword">for</span> aliens <span class="hljs-keyword">in</span> collisions.values():<br>            stats.score += ai_settings.alien_points * <span class="hljs-built_in">len</span>(aliens)<br>            sb.prep_score()<br></code></pre></td></tr></table></figure><p><strong>提高点数</strong></p><p>玩家每提高一个等级，游戏都变得更难，因此处于较高的等级时，外星人的点数应更高。</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111129704.webp"></p><p>我们定义了点数提高的速度，并称之为score_scale。很小的节奏加快速度（1.1）让游戏很快就变得极具挑战性，但为让记分发生显著的变化，需要将点数的提高速度设置为更大的值（1.5）。现在，我们在加快游戏节奏的同时，提高了每个外星人的点数。为让点数为整数，我们使用了函数int()。</p><p><strong>将得分整圆</strong></p><p>大多数街机风格的射击游戏都将得分显示为10的整数倍，下面让我们的记分系统遵循这个原则。我们还将设置得分的格式，在大数字中添加用逗号表示的千位分隔符。我们在Scoreboard中修改成这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">prep_score</span>(<span class="hljs-params">self</span>): <br>    <span class="hljs-string">&quot;&quot;&quot;将得分转换为一幅渲染的图像&quot;&quot;&quot;</span><br>    rounded_score = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">round</span>(self.stats.score, -<span class="hljs-number">1</span>))<br>    score_str =  <span class="hljs-string">&quot;&#123;:,&#125;&quot;</span>.<span class="hljs-built_in">format</span>(rounded_score)<br></code></pre></td></tr></table></figure><p>函数round()通常让小数精确到小数点后多少位，其中小数位数是由第二个实参指定的。然而，如果将第二个实参指定为负数，round()将圆整到最近的10、100、1000等整数倍。让Python将stats.score的值圆整到最近的10的整数倍，并将结果存储到rounded_score中.</p><p>使用了一个字符串格式设置指令，它让Python将数值转换为字符串时在其中插入逗号，例如，输出1,000,000而不是1000000。如果你现在运行这个游戏，看到的将是10的整数倍的整洁得分</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111134567.webp"></p><p><strong>最高得分</strong></p><p>每个玩家都想超过游戏的最高得分记录。下面来跟踪并显示最高得分，给玩家提供要超越的目标。我们将最高得分存储在GameStats中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">GameStats</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;跟踪游戏的统计信息&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,ai_settings</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化统计信息&quot;&quot;&quot;</span><br>        self.ai_settings = ai_settings<br>        <span class="hljs-comment">#游戏刚启动时处于非活动状态</span><br>        self.game_active = <span class="hljs-literal">False</span><br>        self.reset_stats()<br>        <span class="hljs-comment"># 在任何情况下都不应重置最高得分</span><br>        self.high_score = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>下面来修改Scoreboard以显示最高得分。先来修改方法_<em>init</em>_()：</p><p><code>self.prep_high_score()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">prep_high_score</span>(<span class="hljs-params">self</span>): <br>    <span class="hljs-string">&quot;&quot;&quot;将最高得分转换为渲染的图像&quot;&quot;&quot;</span> <br>    high_score = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">round</span>(self.stats.high_score, -<span class="hljs-number">1</span>))<br>    high_score_str = <span class="hljs-string">&quot;&#123;:,&#125;&quot;</span>.<span class="hljs-built_in">format</span>(high_score)<br>    self.high_score_image = self.font.render(high_score_str, <span class="hljs-literal">True</span>, <br>    self.text_color, self.ai_settings.bg_color) <br><br>    <span class="hljs-comment">#将最高得分放在屏幕顶部中央</span><br>    self.high_score_rect = self.high_score_image.get_rect() <br>    self.high_score_rect.centerx = self.screen_rect.centerx <br>    self.high_score_rect.top = self.score_rect.top<br></code></pre></td></tr></table></figure><p>我们将最高得分圆整到最近的10的整数倍，并添加了用逗号表示的千分位分隔符。然后，我们根据最高得分生成一幅图像，使其水平居中，并将其top属性设置为当前得分图像的top属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_score</span>(<span class="hljs-params">self</span>): <br>    <span class="hljs-string">&quot;&quot;&quot;在屏幕上显示得分&quot;&quot;&quot;</span> <br>    self.screen.blit(self.score_image, self.score_rect)<br>    self.screen.blit(self.high_score_image, self.high_score_rect)<br></code></pre></td></tr></table></figure><p>为检查是否诞生了新的最高得分，我们在game_functions.py中添加一个新函数check_high_score()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_high_score</span>(<span class="hljs-params">stats, sb</span>): <br>    <span class="hljs-string">&quot;&quot;&quot;检查是否诞生了新的最高得分&quot;&quot;&quot;</span> <br>    <span class="hljs-keyword">if</span> stats.score &gt; stats.high_score: <br>        stats.high_score = stats.score <br>        sb.prep_high_score()<br></code></pre></td></tr></table></figure><p>函数check_high_score()包含两个形参：stats和sb。它使用stats来比较当前得分和最高得分，并在必要时使用sb来修改最高得分图像.</p><p>在check_bullet_alien_collisions()中，每当有外星人被消灭，都需要在更新得分后调用check_high_score()</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111142623.webp"></p><p><strong>显示等级</strong></p><p>为在游戏中显示玩家的等级，首先需要在GameStats中添加一个表示当前等级的属性。为确保每次开始新游戏时都重置等级，在reset_stats()中初始化它</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">reset_stats</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;初始化在游戏运行期间可能变化的统计信息&quot;&quot;&quot;</span><br>    self.ships_left = self.ai_settings.ship_limit<br>    self.score = <span class="hljs-number">0</span><br>    self.level = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>为让Scoreboard能够在当前得分下方显示当前等级，我们在__init__()中调用了一个新方法prep_level()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">prep_level</span>(<span class="hljs-params">self</span>): <br>    <span class="hljs-string">&quot;&quot;&quot;将等级转换为渲染的图像&quot;&quot;&quot;</span><br>    self.level_image = self.font.render(<span class="hljs-built_in">str</span>(self.stats.level), <span class="hljs-literal">True</span>, <br>    self.text_color, self.ai_settings.bg_color) <br><br>    <span class="hljs-comment"># 将等级放在得分下方</span><br>    self.level_rect = self.level_image.get_rect()<br>    self.level_rect.right = self.score_rect.right<br>    self.level_rect.top = self.score_rect.bottom + <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>方法prep_level()根据存储在stats.level中的值创建一幅图像，并将其right属性设置为得分的right属性。然后，将top属性设置为比得分图像的bottom属性大10像素，以便在得分和等级之间留出一定的空间。</p><p>修改show_score()函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_score</span>(<span class="hljs-params">self</span>): <br>    <span class="hljs-string">&quot;&quot;&quot;在屏幕上显示得分&quot;&quot;&quot;</span> <br>    self.screen.blit(self.score_image, self.score_rect)<br>    self.screen.blit(self.high_score_image, self.high_score_rect)<br>    self.screen.blit(self.level_image, self.level_rect)<br></code></pre></td></tr></table></figure><p>在check_bullet_alien_collisions()中提高等级，并更新等级图像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 如果外星人都被消灭了，重新生成新的外星人群</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(aliens) == <span class="hljs-number">0</span>:<br>    <span class="hljs-comment">#如果外星人都被消灭，则提高一个等级</span><br>    bullets.empty()<br>    ai_settings.increase_speed()<br><br>    <span class="hljs-comment">#提高等级</span><br>    stats.level += <span class="hljs-number">1</span><br>    sb.prep_level()<br>    create_fleet(ai_settings,screen,ship,aliens)<br></code></pre></td></tr></table></figure><p>如果整群外星人都被消灭，我们就将stats.level的值加1，并调用prep_level()，以确保正确地显示新等级.</p><p>为确保开始新游戏时更新记分和等级图像，在按钮Play被单击时触发重置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_play_button</span>(<span class="hljs-params">ai_settings,screen,stats,sb,play_button,ship,aliens,</span><br><span class="hljs-params">                      bullets,mouse_x,mouse_y</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;在玩家单击Play按钮时开始新游戏&quot;&quot;&quot;</span><br>    button_clicked = play_button.rect.collidepoint(mouse_x, mouse_y)<br>    <span class="hljs-keyword">if</span> button_clicked <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> stats.game_active:<br>        <span class="hljs-comment">#重置游戏设置</span><br>        ai_settings.initialize_dynamic_settings()<br><br>        <span class="hljs-comment"># 隐藏光标</span><br>        pygame.mouse.set_visible(<span class="hljs-literal">False</span>)<br>        <span class="hljs-comment">#重置统计信息</span><br>        stats.reset_stats()<br>        stats.game_active = <span class="hljs-literal">True</span><br><br>        <span class="hljs-comment">#重置记分牌图像</span><br>        sb.prep_score() <br>        sb.prep_high_score() <br>        sb.prep_level()<br></code></pre></td></tr></table></figure><p>check_play_button()的定义需要包含对象sb。为重置记分牌图像，我们在重置相关游戏设置后调用prep_score()、prep_high_score()和prep_level(),在check_events()中，现在需要向check_play_button()传递sb，让它能够访问记分牌对象.</p><p><strong>显示余下的飞船</strong></p><p>最后，我们来显示玩家还有多少艘飞船，但使用图形而不是数字。为此，我们在屏幕左上角绘制飞船图像来指出还余下多少艘飞船，就像众多经典的街机游戏那样</p><p>需要让Ship继承Sprite，以便能够创建飞船编组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ship</span>():<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,ai_settings,screen</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化飞船并设置其初始位置&quot;&quot;&quot;</span><br>        <span class="hljs-built_in">super</span>().__init__()<br></code></pre></td></tr></table></figure><p>导入了Sprite，让Ship继承Sprite （见），并在__init__()的开头就调用了super()</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111201900.webp"></p><p>修改Scoreboard，在其中创建一个可供显示的飞船编组。下面是其中的import语句和方法__init__():</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111204156.webp"></p><p>鉴于要创建一个飞船编组，我们导入Group和Ship类。调用prep_level()后，我们调用了prep_ships()。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">prep_ships</span>(<span class="hljs-params">self</span>): <br>    <span class="hljs-string">&quot;&quot;&quot;显示还余下多少艘飞船&quot;&quot;&quot;</span><br>    self.ships = Group()<br>    <span class="hljs-keyword">for</span> ship_number <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.stats.ships_left): <br>        ship = Ship(self.ai_settings, self.screen)<br>        ship.rect.x = <span class="hljs-number">10</span> + ship_number * ship.rect.width<br>        ship.rect.y = <span class="hljs-number">10</span><br>        self.ships.add(ship)<br></code></pre></td></tr></table></figure><p>方法prep_ships()创建一个空编组self.ships，用于存储飞船实例。为填充这个编组，根据玩家还有多少艘飞船运行一个循环相应的次数。在这个循环中，我们创建一艘新飞船，并设置其<em>x</em>坐标，让整个飞船编组都位于屏幕左边，且每艘飞船的左边距都为10像素。</p><p>我们还将<em>y</em>坐标设置为离屏幕上边缘10像素，让所有飞船都与得分图像对齐。最后，我们将每艘新飞船都添加到编组ships中</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111205355.webp"></p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111206473.webp"></p><p>我们还在飞船被外星人撞到时调用prep_ships()，从而在玩家损失一艘飞船时更新飞船图像</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111211315.webp"></p><p>首先，我们在update_aliens()的定义中添加了形参sb。然后，我们向ship_hit()和check_aliens_bottom()都传递了sb，让它们都能够访问记分牌对象。</p><p>接下来，我们更新了ship_hit()的定义，使其包含形参sb。我们在将ships_left的值减1后调用了prep_ships()，这样每次损失了飞船时，显示的飞船数都是正确的。</p><p>在check_aliens_bottom()中需要调用ship_hit()，因此对这个函数进行更新</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111214776.webp"></p><p>现在，check_aliens_bottom()包含形参sb，并在调用ship_hit()时传递了实参sb。</p><p>最后，在alien_invasion.py中修改调用update_aliens()的代码，向它传递实参sb</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111434045.webp"></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用API-Web应用编程</title>
    <link href="/2023/06/08/%E4%BD%BF%E7%94%A8API-Web%E5%BA%94%E7%94%A8%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/06/08/%E4%BD%BF%E7%94%A8API-Web%E5%BA%94%E7%94%A8%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="使用github的API接口获取项目信息并生成图形化展示"><a href="#使用github的API接口获取项目信息并生成图形化展示" class="headerlink" title="使用github的API接口获取项目信息并生成图形化展示"></a>使用github的API接口获取项目信息并生成图形化展示</h1><p>利用github提供的API接口：<strong><a href="https://api.github.com/search/repositories?q=language:python&sort=stars">https://api.github.com/search/repositories?q=language:python&amp;sort=stars</a></strong>，通过python实现对获取数据的分析展示。</p><p>范例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> pygal<br><br><span class="hljs-keyword">from</span> pygal.style <span class="hljs-keyword">import</span> LightColorizedStyle <span class="hljs-keyword">as</span> LCS, LightenStyle <span class="hljs-keyword">as</span> LS<br><br>url = <span class="hljs-string">&#x27;https://api.github.com/search/repositories?q=language:python&amp;sort=stars&#x27;</span><br><span class="hljs-comment">#获取请求</span><br>r = requests.get(url)<br><br><span class="hljs-keyword">if</span> r.status_code != <span class="hljs-number">200</span>:<br>    <span class="hljs-comment">#根据返回码判断是否访问成功</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;连接失败，请检查网络连接&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment">#将获取到的返回值items部分内容赋值给repo_dicts</span><br>    repo_dicts = r.json()[<span class="hljs-string">&#x27;items&#x27;</span>]<br>    <br>    <span class="hljs-comment">#创建两个空列表，用于存储仓库名称及仓库对应的星数及描述</span><br>    names, plot_dicts = [], []<br><br>    <span class="hljs-comment">#遍历列表，将名称加入到列表中</span><br>    <span class="hljs-keyword">for</span> repo_dict <span class="hljs-keyword">in</span> repo_dicts:<br>        names.append(repo_dict[<span class="hljs-string">&#x27;name&#x27;</span>])<br>        <span class="hljs-comment">#plot_dict列表中存储的是字典，字典由value,labele及xlink三个键</span><br>        plot_dict = &#123;<br>            <span class="hljs-string">&#x27;value&#x27;</span>:repo_dict[<span class="hljs-string">&#x27;stargazers_count&#x27;</span>],<br>            <span class="hljs-string">&#x27;label&#x27;</span>:repo_dict[<span class="hljs-string">&#x27;description&#x27;</span>],<br>            <span class="hljs-string">&#x27;xlink&#x27;</span>:repo_dict[<span class="hljs-string">&#x27;html_url&#x27;</span>]<br>        &#125;<br>        plot_dicts.append(plot_dict)<br> <br>    <span class="hljs-comment">#定义可视化展示柱形图的样式</span><br>    my_style = LS(<span class="hljs-string">&#x27;#333366&#x27;</span>, base_style=LCS)<br><br>    <span class="hljs-comment">#Pygal类Config的实例，并将其命名为my_config</span><br>    my_config = pygal.Config()<br>    <span class="hljs-comment">#让标签绕x轴旋转45度</span><br>    my_config.x_label_rotation = <span class="hljs-number">45</span> <br>    <span class="hljs-comment">#隐藏图例</span><br>    my_config.show_legend = <span class="hljs-literal">False</span><br>    <span class="hljs-comment">#设置图表标题、副标题和主标签的字体大小</span><br>    my_config.title_font_size = <span class="hljs-number">24</span> <br>    my_config.label_font_size = <span class="hljs-number">14</span> <br>    my_config.major_label_font_size = <span class="hljs-number">18</span><br>    <span class="hljs-comment">#将较长的项目名缩短为15个字符（如果你将鼠标指向屏幕上被截短的项目名，将显示完整的项目名）</span><br>    my_config.truncate_label = <span class="hljs-number">15</span><br>    <span class="hljs-comment">#隐藏图表中的水平线</span><br>    my_config.show_y_guides = <span class="hljs-literal">False</span><br>    <span class="hljs-comment">#设置宽度</span><br>    my_config.width = <span class="hljs-number">1000</span><br><br>    chart = pygal.Bar(my_config, style=my_style) <br>    chart.title = <span class="hljs-string">&#x27;Github上的Python项目排名&#x27;</span> <br>    chart.x_labels = names<br><br>    chart.add(<span class="hljs-string">&#x27;&#x27;</span>,plot_dicts)<br>    chart.render_to_file(<span class="hljs-string">&#x27;python_repos2.svg&#x27;</span>)<br></code></pre></td></tr></table></figure><p>最终展示如下：</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306081634826.webp"></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用pyecharts绘制中国地图</title>
    <link href="/2023/06/08/%E4%BD%BF%E7%94%A8pyecharts%E7%BB%98%E5%88%B6%E4%B8%AD%E5%9B%BD%E5%9C%B0%E5%9B%BE/"/>
    <url>/2023/06/08/%E4%BD%BF%E7%94%A8pyecharts%E7%BB%98%E5%88%B6%E4%B8%AD%E5%9B%BD%E5%9C%B0%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>转载自：<a href="https://blog.csdn.net/qq_38161040/article/details/122464517">(18条消息) 2022见证中国崛起从Python绘制中国地图开始：使用pyecharts最新版本绘制中国地图实例详解，个性化地图定制及常用参数解析_挣扎的蓝藻的博客-CSDN博客</a></p><p><a href="https://lanzao.blog.csdn.net/article/details/122850961"><strong>Python</strong> 地图篇 - 使用 <strong>pyecharts</strong> 绘制世界地图、中国地图、省级地图、市级地图实例详解</a></p><p>先给大家看下效果图哈。<br><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111505612.webp"></p><p>首先需要安装 <strong>pyecharts</strong> 库，直接 <code>pip install pyecharts</code> 就好了。<br>新版本的话不需要单独安装地图，如果是 <strong>0.5</strong> 版本是需要单独安装的，目前演示的是当前最新版本 <strong>1.9.1</strong><br><strong>地图数据如下：</strong><br>因为是中国地图，所以对标的省份，我设置了 <strong>2</strong> 组，里面的数据是随机生成的。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pyecharts <span class="hljs-keyword">import</span> options <span class="hljs-keyword">as</span> opts<br><span class="hljs-keyword">from</span> pyecharts.charts <span class="hljs-keyword">import</span> Map<br><span class="hljs-keyword">import</span> random<br><br><br>ultraman = [<br>[<span class="hljs-string">&#x27;四川&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;台湾&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;新疆&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;江西&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;河南&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;辽宁&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;西藏&#x27;</span>, <span class="hljs-number">0</span>]<br>]<br><br><br>monster = [<br>[<span class="hljs-string">&#x27;广东&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;江西&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;湖南&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;浙江&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;江苏&#x27;</span>, <span class="hljs-number">0</span>]<br>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">data_filling</span>(<span class="hljs-params">array</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27; </span><br><span class="hljs-string">     作用：给数组数据填充随机数</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> array:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i:<br>        i[<span class="hljs-number">1</span>] = random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>)<br>        <span class="hljs-comment">#print(i)</span><br><br>data_filling(ultraman)<br>data_filling(monster)<br><br></code></pre></td></tr></table></figure><p>首先演示下添加一组数据，运行后会生成一个 <strong>html</strong> 文件，打开后就可以查看生成的地图了。<br><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111505139.webp"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_china_map</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27; </span><br><span class="hljs-string">     作用：生成中国地图</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    (<br>        Map()<br>        .add(<br>            series_name=<span class="hljs-string">&quot;怪兽&quot;</span>, <br>            data_pair=monster, <br>            maptype=<span class="hljs-string">&quot;china&quot;</span>, <br>        )<br>        <br>        .set_global_opts(title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;中国地图&quot;</span>))<br>        <br>        .render(<span class="hljs-string">&quot;中国地图.html&quot;</span>)<br>    )<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111505637.webp"></p><p>然后演示下添加两组数据，只要再加个 <strong>add()</strong> 函数就好了，非常方便。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_china_map</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27; </span><br><span class="hljs-string">     作用：生成中国地图</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    (<br>        Map()<br>        .add(<br>            series_name=<span class="hljs-string">&quot;奥特曼&quot;</span>, <br>            data_pair=ultraman, <br>            maptype=<span class="hljs-string">&quot;china&quot;</span>, <br>        )<br>        .add(<br>            series_name=<span class="hljs-string">&quot;怪兽&quot;</span>, <br>            data_pair=monster, <br>            maptype=<span class="hljs-string">&quot;china&quot;</span>, <br>        )<br>        <br>        .set_global_opts(title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;中国地图&quot;</span>))<br>        <br>        .render(<span class="hljs-string">&quot;中国地图.html&quot;</span>)<br>    )<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111504059.webp"></p><p>给大家加了块完整源码，直接运行即可哈。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> pyecharts <span class="hljs-keyword">import</span> options <span class="hljs-keyword">as</span> opts<br><span class="hljs-keyword">from</span> pyecharts.charts <span class="hljs-keyword">import</span> Map<br><span class="hljs-keyword">import</span> random<br><br><br>ultraman = [<br>[<span class="hljs-string">&#x27;四川&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;台湾&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;新疆&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;江西&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;河南&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;辽宁&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;西藏&#x27;</span>, <span class="hljs-number">0</span>]<br>]<br><br><br>monster = [<br>[<span class="hljs-string">&#x27;广东&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;江西&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;湖南&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;浙江&#x27;</span>, <span class="hljs-number">0</span>],<br>[<span class="hljs-string">&#x27;江苏&#x27;</span>, <span class="hljs-number">0</span>]<br>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">data_filling</span>(<span class="hljs-params">array</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27; </span><br><span class="hljs-string">     作用：给数组数据填充随机数</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> array:<br>        <br>        i[<span class="hljs-number">1</span>] = random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>)<br>        <span class="hljs-built_in">print</span>(i)<br><br>data_filling(ultraman)<br>data_filling(monster)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_china_map</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27; </span><br><span class="hljs-string">     作用：生成中国地图</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    (<br>        Map()<br>        .add(<br>            series_name=<span class="hljs-string">&quot;奥特曼&quot;</span>, <br>            data_pair=ultraman, <br>            maptype=<span class="hljs-string">&quot;china&quot;</span>, <br>        )<br>        .add(<br>            series_name=<span class="hljs-string">&quot;怪兽&quot;</span>, <br>            data_pair=monster, <br>            maptype=<span class="hljs-string">&quot;china&quot;</span>, <br>        )<br>        <br>        .set_global_opts(title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;中国地图&quot;</span>))<br>        <br>        .render(<span class="hljs-string">&quot;中国地图.html&quot;</span>)<br>    )<br><br>create_china_map()<br><br></code></pre></td></tr></table></figure><p>默认是选中的，添加 <code>is_selected=False</code> 参数可以设置默认不显示。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_china_map</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27; </span><br><span class="hljs-string">     作用：生成中国地图</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    (<br>        Map()<br>        .add(<br>            series_name=<span class="hljs-string">&quot;奥特曼&quot;</span>, <br>            data_pair=ultraman, <br>            maptype=<span class="hljs-string">&quot;china&quot;</span>, <br>            <br>            is_selected=<span class="hljs-literal">False</span><br>        )<br>        .add(<br>            series_name=<span class="hljs-string">&quot;怪兽&quot;</span>, <br>            data_pair=monster, <br>            maptype=<span class="hljs-string">&quot;china&quot;</span>, <br>        )<br>        <br>        .set_global_opts(title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;中国地图&quot;</span>))<br>        <br>        .render(<span class="hljs-string">&quot;中国地图.html&quot;</span>)<br>    )<br><br>create_china_map()<br><br></code></pre></td></tr></table></figure><p>可以看到默认只显示了怪兽的数据。<br><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111504927.webp"></p><p>视觉映射配置项 <code>visualmap_opts=opts.VisualMapOpts(max_=1000, is_piecewise=True)</code> 可以设置为地图颜色类型分段显示，<code>max_</code> 的值对应的是数据的范围，参数 <code>is_piecewise=True</code> 表示为分段显示。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_china_map</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27; </span><br><span class="hljs-string">     作用：生成中国地图</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    (<br>        Map()<br>        .add(<br>            series_name=<span class="hljs-string">&quot;奥特曼&quot;</span>, <br>            data_pair=ultraman, <br>            maptype=<span class="hljs-string">&quot;china&quot;</span>, <br>            <br>            is_selected=<span class="hljs-literal">True</span><br>        )<br>        .add(<br>            series_name=<span class="hljs-string">&quot;怪兽&quot;</span>, <br>            data_pair=monster, <br>            maptype=<span class="hljs-string">&quot;china&quot;</span>, <br>        )<br>        .set_global_opts(<br>        <br>        title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;中国地图&quot;</span>),<br>        <br>        visualmap_opts=opts.VisualMapOpts(max_=<span class="hljs-number">1000</span>, is_piecewise=<span class="hljs-literal">True</span>)<br>        )<br>        <br>        .render(<span class="hljs-string">&quot;中国地图.html&quot;</span>)<br>    )<br><br></code></pre></td></tr></table></figure><p>分段显示效果图：<br><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111504190.webp"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_china_map</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27; </span><br><span class="hljs-string">     作用：生成中国地图</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    (<br>        Map()<br>        .add(<br>            series_name=<span class="hljs-string">&quot;奥特曼&quot;</span>, <br>            data_pair=ultraman, <br>            maptype=<span class="hljs-string">&quot;china&quot;</span>, <br>            <br>            is_selected=<span class="hljs-literal">True</span><br>        )<br>        .add(<br>            series_name=<span class="hljs-string">&quot;怪兽&quot;</span>, <br>            data_pair=monster, <br>            maptype=<span class="hljs-string">&quot;china&quot;</span>, <br>        )<br>        .set_global_opts(<br>        <br>        title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;中国地图&quot;</span>),<br>        <br>        visualmap_opts=opts.VisualMapOpts(max_=<span class="hljs-number">1000</span>, is_piecewise=<span class="hljs-literal">False</span>)<br>        )<br>        <br>        .render(<span class="hljs-string">&quot;中国地图.html&quot;</span>)<br>    )<br><br></code></pre></td></tr></table></figure><p>这是参数为 <code>is_piecewise=False</code> 的标准显示。<br><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111504592.webp"></p><p>参数 <code>is_roam=False</code> 会控制不可进行鼠标缩放和平移。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_china_map</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27; </span><br><span class="hljs-string">     作用：生成中国地图</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    (<br>        Map()<br>        .add(<br>            series_name=<span class="hljs-string">&quot;奥特曼&quot;</span>, <br>            data_pair=ultraman, <br>            maptype=<span class="hljs-string">&quot;china&quot;</span>, <br>            <br>            is_selected=<span class="hljs-literal">True</span>,<br>            <br>            is_roam=<span class="hljs-literal">False</span><br>        )<br>        .add(<br>            series_name=<span class="hljs-string">&quot;怪兽&quot;</span>, <br>            data_pair=monster, <br>            maptype=<span class="hljs-string">&quot;china&quot;</span>, <br>        )<br>        .set_global_opts(<br>        <br>        title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;中国地图&quot;</span>),<br>        <br>        visualmap_opts=opts.VisualMapOpts(max_=<span class="hljs-number">1000</span>, is_piecewise=<span class="hljs-literal">False</span>)<br>        )<br>        <br>        .render(<span class="hljs-string">&quot;中国地图.html&quot;</span>)<br>    )<br><br><br></code></pre></td></tr></table></figure><p>参数启用时鼠标滚轮可以放大缩小图像。<br><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111504323.webp"></p><p>鼠标可以左右拖动使地图平移。<br><strong>优先级声明：</strong>  <strong>a</strong> 数据设置为 <strong>False</strong>，<strong>b</strong> 数据设置为 <strong>True</strong>，不选中 <strong>a</strong> 数据，也可以进行缩放和平移拖动。<br><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111503414.webp"></p><p>参数 <code>is_map_symbol_show=False</code> 可以关闭图形标记，关闭就不显示点了。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_china_map</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27; </span><br><span class="hljs-string">     作用：生成中国地图</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    (<br>        Map()<br>        .add(<br>            series_name=<span class="hljs-string">&quot;奥特曼&quot;</span>, <br>            data_pair=ultraman, <br>            maptype=<span class="hljs-string">&quot;china&quot;</span>, <br>            <br>            is_selected=<span class="hljs-literal">True</span>,<br>            <br>            is_roam=<span class="hljs-literal">True</span>,<br>            <br>            is_map_symbol_show=<span class="hljs-literal">False</span><br>        )<br>        .add(<br>            series_name=<span class="hljs-string">&quot;怪兽&quot;</span>, <br>            data_pair=monster, <br>            maptype=<span class="hljs-string">&quot;china&quot;</span>, <br>        )<br>        .set_global_opts(<br>        <br>        title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;中国地图&quot;</span>),<br>        <br>        visualmap_opts=opts.VisualMapOpts(max_=<span class="hljs-number">1000</span>, is_piecewise=<span class="hljs-literal">False</span>)<br>        )<br>        <br>        .render(<span class="hljs-string">&quot;中国地图.html&quot;</span>)<br>    )<br><br></code></pre></td></tr></table></figure><p>可以看到奥特曼相关区域的点已经没有了。<br><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111503621.webp"></p><p>系列配置项的参数 <code>label_opts=opts.LabelOpts(is_show=False)</code> 可以关闭标签名称显示。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_china_map</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27; </span><br><span class="hljs-string">     作用：生成中国地图</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    (<br>        Map()<br>        .add(<br>            series_name=<span class="hljs-string">&quot;奥特曼&quot;</span>, <br>            data_pair=ultraman, <br>            maptype=<span class="hljs-string">&quot;china&quot;</span>, <br>            <br>            is_selected=<span class="hljs-literal">True</span>,<br>            <br>            is_roam=<span class="hljs-literal">True</span>,<br>            <br>            is_map_symbol_show=<span class="hljs-literal">False</span><br>        )<br>        .add(<br>            series_name=<span class="hljs-string">&quot;怪兽&quot;</span>, <br>            data_pair=monster, <br>            maptype=<span class="hljs-string">&quot;china&quot;</span>, <br>        )<br>        <br>        .set_global_opts(<br>        <br>        title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;中国地图&quot;</span>),<br>        <br>        visualmap_opts=opts.VisualMapOpts(max_=<span class="hljs-number">1000</span>, is_piecewise=<span class="hljs-literal">False</span>),<br>        )<br>        <br>        <br>        .set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="hljs-literal">False</span>))<br>        <br>        .render(<span class="hljs-string">&quot;中国地图.html&quot;</span>)<br>    )<br><br></code></pre></td></tr></table></figure><p>可以看到省份的名称不显示了。<br><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111503351.webp"></p><p>将 <code>label_opts=opts.LabelOpts(is_show=False)</code> 添加到 <strong>add()</strong> 里，可以实现局部显示标签名的效果，显示标签的为另一组数据，可以根据此特性灵活进行应用。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_china_map</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27; </span><br><span class="hljs-string">     作用：生成中国地图</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    (<br>        Map()<br>        .add(<br>            series_name=<span class="hljs-string">&quot;奥特曼&quot;</span>, <br>            data_pair=ultraman, <br>            maptype=<span class="hljs-string">&quot;china&quot;</span>, <br>            <br>            is_selected=<span class="hljs-literal">True</span>,<br>            <br>            is_roam=<span class="hljs-literal">True</span>,<br>            <br>            is_map_symbol_show=<span class="hljs-literal">False</span>,<br>            <br>            label_opts=opts.LabelOpts(is_show=<span class="hljs-literal">False</span>)<br>        )<br>        .add(<br>            series_name=<span class="hljs-string">&quot;怪兽&quot;</span>, <br>            data_pair=monster, <br>            maptype=<span class="hljs-string">&quot;china&quot;</span>, <br>        )<br>        <br>        .set_global_opts(<br>        <br>        title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;中国地图&quot;</span>),<br>        <br>        visualmap_opts=opts.VisualMapOpts(max_=<span class="hljs-number">1000</span>, is_piecewise=<span class="hljs-literal">False</span>),<br>        )<br>        <br>        .render(<span class="hljs-string">&quot;中国地图.html&quot;</span>)<br>    )<br><br></code></pre></td></tr></table></figure><p>可以看到局部省份的名称有显示。<br><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111503054.webp"></p><p>系列配置项里的标签加上 <code>color=&quot;bule&quot;</code> 参数可设置标签颜色为蓝色。<br>图元样式配置的 <code>areaColor</code> 为区域颜色， <code>borderColor</code> 为边框颜色，<br>其中 <code>normal</code> 为常规模式下的，<code>emphasis</code> 为强调样式下的，即鼠标移动到区域上的显示。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py">itemstyle_opts=&#123;<br>    <br>    <span class="hljs-string">&quot;normal&quot;</span>: &#123;<span class="hljs-string">&quot;areaColor&quot;</span>: <span class="hljs-string">&quot;white&quot;</span>, <span class="hljs-string">&quot;borderColor&quot;</span>: <span class="hljs-string">&quot;red&quot;</span>&#125;,<br>    <br>    <span class="hljs-string">&quot;emphasis&quot;</span>: &#123;<span class="hljs-string">&quot;areaColor&quot;</span>: <span class="hljs-string">&quot;rgba(0,0,0,1)&quot;</span>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看到我鼠标移动到新疆显示的为我设置的黑色，透明度为 <strong>1</strong>。<br><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111502927.webp"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_china_map</span>():<br>    <span class="hljs-string">&#x27;&#x27;&#x27; </span><br><span class="hljs-string">     作用：生成中国地图</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    (<br>        Map()<br>        .add(<br>            series_name=<span class="hljs-string">&quot;奥特曼&quot;</span>, <br>            data_pair=ultraman, <br>            maptype=<span class="hljs-string">&quot;china&quot;</span>, <br>            <br>            is_selected=<span class="hljs-literal">True</span>,<br>            <br>            is_roam=<span class="hljs-literal">True</span>,<br>            <br>            is_map_symbol_show=<span class="hljs-literal">False</span>,<br>            <br>            itemstyle_opts=&#123;<br>                <br>                <span class="hljs-string">&quot;normal&quot;</span>: &#123;<span class="hljs-string">&quot;areaColor&quot;</span>: <span class="hljs-string">&quot;white&quot;</span>, <span class="hljs-string">&quot;borderColor&quot;</span>: <span class="hljs-string">&quot;red&quot;</span>&#125;,<br>                <br>                <span class="hljs-string">&quot;emphasis&quot;</span>: &#123;<span class="hljs-string">&quot;areaColor&quot;</span>: <span class="hljs-string">&quot;rgba(0,0,0,1)&quot;</span>&#125;<br>            &#125;<br>        )<br>        .add(<br>            series_name=<span class="hljs-string">&quot;怪兽&quot;</span>, <br>            data_pair=monster, <br>            maptype=<span class="hljs-string">&quot;china&quot;</span>, <br>        )<br>        <br>        .set_global_opts(<br>            <br>            title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;中国地图&quot;</span>),<br>            <br>            visualmap_opts=opts.VisualMapOpts(max_=<span class="hljs-number">1000</span>, is_piecewise=<span class="hljs-literal">False</span>)<br>        )<br>        <br>        .set_series_opts(<br>            <br>            label_opts=opts.LabelOpts(is_show=<span class="hljs-literal">True</span>, color=<span class="hljs-string">&quot;blue&quot;</span>)<br>        )<br>        <br>        .render(<span class="hljs-string">&quot;中国地图.html&quot;</span>)<br>    )<br><br></code></pre></td></tr></table></figure><p><strong>Map()</strong> 里通过添加 <strong>init_opts</strong> 参数可以配置初始化画布大小。<br><strong>例如：</strong> <code>Map(init_opts=opts.InitOpts(height=&quot;1000px&quot;, width=&quot;1500px&quot;))</code><br><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306111502999.webp"></p><p>喜欢的点个赞❤吧！</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pyecharts</tag>
      
      <tag>转载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习杂记</title>
    <link href="/2023/06/05/Python%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%AE%B0/"/>
    <url>/2023/06/05/Python%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="学习过程中的一些零散问题记录"><a href="#学习过程中的一些零散问题记录" class="headerlink" title="学习过程中的一些零散问题记录"></a>学习过程中的一些零散问题记录</h1><h2 id="1-print-函数打印输出时不输出默认的换行符"><a href="#1-print-函数打印输出时不输出默认的换行符" class="headerlink" title="1.print()函数打印输出时不输出默认的换行符"></a>1.print()函数打印输出时不输出默认的换行符</h2><p>在Python中，可以通过在<code>print()</code>函数中设置<code>end</code>参数来控制打印结束时的字符，默认为换行符 <code>\n</code>。如果你想要在打印结束时不换行，可以将<code>end</code>参数设置为空字符串 <code>&#39;&#39;</code>，如下所示：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Hello, world!&#x27;</span>, <span class="hljs-attribute">end</span>=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;This is a test.&#x27;</span>)<br></code></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight mercury"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mercury">Hello, world!This <span class="hljs-keyword">is</span> a test.<br></code></pre></td></tr></table></figure><p>注意，通过将<code>end</code>参数设置为空字符串，你需要手动控制换行的位置，以确保打印输出的格式符合你的预期。</p><h2 id="2-如何将两个列表组合成一个元组列表"><a href="#2-如何将两个列表组合成一个元组列表" class="headerlink" title="2.如何将两个列表组合成一个元组列表"></a>2.如何将两个列表组合成一个元组列表</h2><p>可以使用<code>zip()</code>函数将两个列表组合成一个元组列表。<code>zip()</code>函数将按索引位置将两个列表中的元素逐个配对，返回一个包含元组的迭代器。然后，你可以将迭代器转换为列表。以下是示例代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">list1 = <span class="hljs-selector-attr">[1, 2, 3]</span><br>list2 = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]</span><br><br>combined_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(list1, list2))<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(combined_list)</span></span><br></code></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[(<span class="hljs-name">1</span>, <span class="hljs-symbol">&#x27;a</span>&#x27;), (<span class="hljs-name">2</span>, <span class="hljs-symbol">&#x27;b</span>&#x27;), (<span class="hljs-name">3</span>, <span class="hljs-symbol">&#x27;c</span>&#x27;)]<br></code></pre></td></tr></table></figure><p>在示例中，<code>zip(list1, list2)</code>将列表<code>list1</code>和<code>list2</code>中的元素逐个配对，得到一个元组的迭代器。然后，通过<code>list()</code>函数将迭代器转换为列表，得到了一个包含元组的列表<code>combined_list</code>。</p><h2 id="3-双for循环遍历如何转为列表解析"><a href="#3-双for循环遍历如何转为列表解析" class="headerlink" title="3.双for循环遍历如何转为列表解析"></a>3.双for循环遍历如何转为列表解析</h2><p>双重循环可以通过嵌套的列表解析来转换。下面是一个示例：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">result</span> <span class="hljs-operator">=</span> [expression for outer_item in outer_list for inner_item in inner_list]<br></code></pre></td></tr></table></figure><p>其中，<code>expression</code> 是要在循环中计算或执行的表达式，<code>outer_list</code> 和 <code>inner_list</code> 是两个要遍历的列表。</p><p>举个例子，假设有两个列表 <code>list1</code> 和 <code>list2</code>，你想要通过双重循环生成它们的所有组合，可以使用列表解析来实现：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">list1</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-attr">list2</span> = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><span class="hljs-attr">combinations</span> = [(x, y) for x in list1 for y in list2]<br></code></pre></td></tr></table></figure><p>这将生成一个包含所有组合的列表 <code>combinations</code>，其中每个元素都是一个二元组 <code>(x, y)</code>，其中 <code>x</code> 是来自 <code>list1</code> 的元素，<code>y</code> 是来自 <code>list2</code> 的元素。</p><p>注意，内层循环在外层循环之后。你可以根据实际需要调整循环的顺序。</p><h2 id="4-多重赋值与顺序赋值的不同"><a href="#4-多重赋值与顺序赋值的不同" class="headerlink" title="4.多重赋值与顺序赋值的不同"></a>4.多重赋值与顺序赋值的不同</h2><p>多重赋值（Multiple Assignment），或者叫作元组赋值（Tuple Assignment）。它允许同时为多个变量赋值，使用逗号分隔多个变量名，并且可以将一个元组、列表或其他可迭代对象的值一次性赋给这些变量。</p><p>在给多个变量赋值时，右侧的表达式会先计算出所有中间结果，并按照从左到右的顺序一次性地赋值给相应的变量。这样可以简洁地交换变量的值，同时也可以将多个变量与多个表达式的结果关联起来。</p><p>下面这两段代码表示的意思是完全不同：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">m1 = me + m3<br>m2 = m1<br>m3 = m2<br>me = me + m3<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">m1, m2 ,m3 ,me = me+m3, m1, m2,me+m3<br></code></pre></td></tr></table></figure><p>这两段代码的区别在于变量的赋值顺序不同。</p><p>第一段代码中，赋值操作是从上到下按顺序执行的。每个变量的新值都是基于之前变量的旧值计算得到的。具体地：</p><ul><li><code>m1</code> 的新值是 <code>me + m3</code>，即 <code>me</code> 和 <code>m3</code> 的和。</li><li><code>m2</code> 的新值是 <code>m1</code>，即将 <code>m1</code> 的值赋给 <code>m2</code>。</li><li><code>m3</code> 的新值是 <code>m2</code>，即将 <code>m2</code> 的值赋给 <code>m3</code>。</li><li><code>me</code> 的新值是 <code>me + m3</code>，即 <code>me</code> 和 <code>m3</code> 的和。</li></ul><p>第二段代码中，赋值操作是一次性地同时进行的，使用了多重赋值语句。右侧的表达式会先计算出所有中间结果，然后依次赋值给左侧的变量。具体地：</p><ul><li><code>me + m3</code> 的值赋给 <code>m1</code>。</li><li><code>m1</code> 的旧值赋给 <code>m2</code>。</li><li><code>m2</code> 的旧值赋给 <code>m3</code>。</li><li><code>me + m3</code> 的值赋给 <code>me</code>。</li></ul><p>总结起来，第一段代码是逐个赋值的过程，每个变量的新值都是基于之前变量的旧值计算得到的。而第二段代码则是一次性地同时进行多个赋值操作，右侧的表达式会计算出所有中间结果，然后依次赋值给左侧的变量。两段代码的最终结果可能是不同的，取决于初始变量的值和具体的赋值逻辑。</p><h2 id="5-json-load-与json-loads-的区别"><a href="#5-json-load-与json-loads-的区别" class="headerlink" title="5.json.load()与json.loads()的区别"></a>5.json.load()与json.loads()的区别</h2><p><code>json.load()</code> 和 <code>json.loads()</code> 都是 Python 中用于解析 JSON 数据的函数，但它们有一些区别：</p><ul><li><code>json.load()</code> 用于从文件中读取 JSON 数据。它接受一个文件对象作为参数，读取文件内容并将其解析为 JSON 对象或列表。示例：<code>json.load(file_object)</code></li><li><code>json.loads()</code> 用于将字符串解析为 JSON 数据。它接受一个 JSON 字符串作为参数，将其解析为 JSON 对象或列表。示例：<code>json.loads(json_string)</code></li></ul><p>总结来说，<code>json.load()</code> 适用于读取文件中的 JSON 数据，而 <code>json.loads()</code> 适用于将字符串中的 JSON 数据解析为 Python 对象。</p><h2 id="6-让python支持中文目录路径"><a href="#6-让python支持中文目录路径" class="headerlink" title="6.让python支持中文目录路径"></a>6.让python支持中文目录路径</h2><p>要在Python代码中支持中文文件目录，可以使用以下两种方法：</p><ol><li>使用原始字符串（raw string）表示文件路径：在字符串前添加字母 “r”，以告诉Python将其作为原始字符串处理。这将确保Python不会对字符串中的特殊字符进行转义。例如：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data_dir = <span class="hljs-string">r&#x27;E:\Learning\python\LSTM_MODEL\data&#x27;</span><br></code></pre></td></tr></table></figure><ol><li>使用Unicode字符串：在字符串前添加 “u”，以告诉Python将其作为Unicode字符串处理。Unicode字符串可以包含非ASCII字符，包括中文字符。例如：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data_dir = <span class="hljs-string">u&#x27;E:\Learning\python\LSTM_MODEL\data&#x27;</span><br></code></pre></td></tr></table></figure><p>使用其中一种方法将文件路径作为字符串表示，即可在Python代码中支持中文文件目录。请注意，如果使用的是非ASCII字符集（如UTF-8），确保代码文件本身以相应的编码保存。</p><h2 id="7-统计字符串中各类字符的数量"><a href="#7-统计字符串中各类字符的数量" class="headerlink" title="7.统计字符串中各类字符的数量"></a>7.统计字符串中各类字符的数量</h2><p>一、正则表达式：</p><p>使用正则表达式可以表示字母、数字、符号和中文。下面是一些常用的正则表达式模式：</p><ul><li>字母：使用 <code>[a-zA-Z]</code> 表示所有的字母。</li><li>数字：使用 <code>\d</code> 表示所有的数字。</li><li>符号：使用 <code>[!@#$%^&amp;*()]</code> 等字符集合来表示不同的符号。例如，<code>[!@#$%^&amp;*()]</code> 表示常见的特殊符号。</li><li>符号：使用 <code>[^\w\s\u4e00-\u9fa5]</code> 用于匹配除了字母、数字、空格和中文以外的其他字符</li><li>中文：使用 <code>[\u4e00-\u9fa5]</code> 表示所有的中文字符。</li></ul><p>下面是一个示例，演示如何使用正则表达式匹配不同类型的字符并统计它们的数量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>text = <span class="hljs-string">&quot;Hello 123 你好！@#&quot;</span><br><br><span class="hljs-comment"># 匹配字母</span><br>letters = re.findall(<span class="hljs-string">r&#x27;[a-zA-Z]&#x27;</span>, text)<br>letter_count = <span class="hljs-built_in">len</span>(letters)<br><br><span class="hljs-comment"># 匹配数字</span><br>numbers = re.findall(<span class="hljs-string">r&#x27;\d&#x27;</span>, text)<br>number_count = <span class="hljs-built_in">len</span>(numbers)<br><br><span class="hljs-comment"># 匹配符号</span><br>symbols = re.findall(<span class="hljs-string">r&#x27;[!@#$%^&amp;*()]&#x27;</span>, text)<br>symbol_count = <span class="hljs-built_in">len</span>(symbols)<br><br><span class="hljs-comment"># 匹配中文</span><br>chinese_chars = re.findall(<span class="hljs-string">r&#x27;[\u4e00-\u9fa5]&#x27;</span>, text)<br>chinese_count = <span class="hljs-built_in">len</span>(chinese_chars)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;字母数量:&quot;</span>, letter_count)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数字数量:&quot;</span>, number_count)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;符号数量:&quot;</span>, symbol_count)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;中文数量:&quot;</span>, chinese_count)<br></code></pre></td></tr></table></figure><p>二、使得字符串的内置方法实现：</p><p>使用字符串的内置方法来判断字符是否为字母、数字或空格，然后进行计数。这里是一个使用 <code>isdigit()</code>、<code>isalpha()</code> 和 <code>isspace()</code> 方法的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_characters</span>(<span class="hljs-params">text</span>):<br>    letter_count = <span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> text <span class="hljs-keyword">if</span> char.isalpha())<br>    number_count = <span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> text <span class="hljs-keyword">if</span> char.isdigit())<br>    space_count = <span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> text <span class="hljs-keyword">if</span> char.isspace())<br>    chinese_count = <span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> text <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;\u4e00&#x27;</span> &lt;= char &lt;= <span class="hljs-string">&#x27;\u9fa5&#x27;</span>)<br>    other_count = <span class="hljs-built_in">len</span>(text) - letter_count - number_count - space_count - chinese_count<br>    <span class="hljs-keyword">return</span> letter_count, number_count, space_count, chinese_count, other_count<br><br>text = <span class="hljs-string">&quot;Hello 123 你好！@# 这是一个示例文本。&quot;</span><br>letter_count, number_count, space_count, chinese_count, other_count = count_characters(text)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;字母数量:&quot;</span>, letter_count)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数字数量:&quot;</span>, number_count)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;空格数量:&quot;</span>, space_count)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;中文数量:&quot;</span>, chinese_count)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;其他符号数量:&quot;</span>, other_count)<br></code></pre></td></tr></table></figure><h2 id="8-集合set的用法"><a href="#8-集合set的用法" class="headerlink" title="8.集合set的用法"></a>8.集合set的用法</h2><p>集合（Set）是Python中的一种无序、可变的数据类型，它用于存储一组不重复的元素。集合中的元素是唯一的，不会重复出现。下面是一些常用的集合操作和方法：</p><ol><li><p>创建集合：可以使用花括号 <code>&#123;&#125;</code> 或 <code>set()</code> 函数来创建集合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">my_set = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;  <span class="hljs-comment"># 使用花括号创建集合</span><br>my_set = <span class="hljs-built_in">set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])  <span class="hljs-comment"># 使用set()函数创建集合</span><br></code></pre></td></tr></table></figure></li><li><p>添加元素：使用 <code>add()</code> 方法向集合中添加单个元素，使用 <code>update()</code> 方法向集合中添加多个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">my_set = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>my_set.add(<span class="hljs-number">4</span>)  <span class="hljs-comment"># 添加单个元素</span><br>my_set.update([<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>])  <span class="hljs-comment"># 添加多个元素</span><br></code></pre></td></tr></table></figure></li><li><p>移除元素：使用 <code>remove()</code> 方法从集合中移除指定元素，如果元素不存在会抛出 <code>KeyError</code> 异常。使用 <code>discard()</code> 方法也可以移除元素，但如果元素不存在不会抛出异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">my_set = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>my_set.remove(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 移除元素2</span><br>my_set.discard(<span class="hljs-number">4</span>)  <span class="hljs-comment"># 移除元素4，如果不存在不会抛出异常</span><br></code></pre></td></tr></table></figure></li><li><p>集合操作：可以使用运算符和方法进行集合的交集、并集、差集和对称差集等操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">set1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>set2 = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br><br>intersection = set1 &amp; set2  <span class="hljs-comment"># 交集</span><br>union = set1 | set2  <span class="hljs-comment"># 并集</span><br>difference = set1 - set2  <span class="hljs-comment"># 差集</span><br>symmetric_difference = set1 ^ set2  <span class="hljs-comment"># 对称差集</span><br></code></pre></td></tr></table></figure></li><li><p>遍历集合：可以使用循环语句遍历集合中的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">my_set = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> my_set:<br>    <span class="hljs-built_in">print</span>(element)<br></code></pre></td></tr></table></figure></li><li><p>其他常用方法：集合还提供了其他一些常用的方法，如 <code>len()</code> 获取集合的元素个数，<code>clear()</code> 清空集合中的元素等。</p></li></ol><p>集合在处理需要唯一元素且顺序不重要的场景中非常有用，例如去除列表中的重复元素、检查两个集合是否有交集等。注意，集合中的元素必须是可哈希的（不可变类型），因此集合本身不能作为集合的元素，但可以包含元组等可哈希的数据类型。</p><h2 id="9-数字集合可以直接进行计算"><a href="#9-数字集合可以直接进行计算" class="headerlink" title="9.数字集合可以直接进行计算"></a>9.数字集合可以直接进行计算</h2><p>数字集合可以直接使用计算函数进行常见的数学运算。Python 提供了许多内置的数学函数和操作符，可以直接应用于数字集合。</p><p>以下是一些常见的数学函数和操作符的示例：</p><ul><li><p>求和：使用内置函数 <code>sum()</code> 可以对数字集合进行求和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">my_set = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>total = <span class="hljs-built_in">sum</span>(my_set)<br><span class="hljs-built_in">print</span>(total)  <span class="hljs-comment"># 输出结果: 15</span><br></code></pre></td></tr></table></figure></li><li><p>最大值和最小值：使用内置函数 <code>max()</code> 和 <code>min()</code> 可以找到数字集合中的最大值和最小值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">my_set = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">20</span>, <span class="hljs-number">8</span>, <span class="hljs-number">15</span>&#125;<br>max_value = <span class="hljs-built_in">max</span>(my_set)<br>min_value = <span class="hljs-built_in">min</span>(my_set)<br><span class="hljs-built_in">print</span>(max_value)  <span class="hljs-comment"># 输出结果: 20</span><br><span class="hljs-built_in">print</span>(min_value)  <span class="hljs-comment"># 输出结果: 5</span><br></code></pre></td></tr></table></figure></li><li><p>平均值：使用 <code>sum()</code> 和 <code>len()</code> 函数可以计算数字集合的平均值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">my_set = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>average = <span class="hljs-built_in">sum</span>(my_set) / <span class="hljs-built_in">len</span>(my_set)<br><span class="hljs-built_in">print</span>(average)  <span class="hljs-comment"># 输出结果: 3.0</span><br></code></pre></td></tr></table></figure></li></ul><p>除了上述示例中的基本数学函数，还可以使用其他数学函数，如幂函数 <code>pow()</code>、绝对值函数 <code>abs()</code>、四舍五入函数 <code>round()</code> 等，根据具体的需求进行选择和使用。</p><h2 id="10-递归函数的调用"><a href="#10-递归函数的调用" class="headerlink" title="10.递归函数的调用"></a>10.递归函数的调用</h2><p>递归调用是指在函数内部调用自身的过程。通过递归调用，可以解决一些需要重复执行相同操作的问题。</p><p>下面是一个简单的示例，演示了如何使用递归调用来计算阶乘：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">factorial</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 基线条件，当 n 等于 0 时，直接返回 1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 递归条件，当 n 大于 0 时，调用自身并乘以 n</span><br>        <span class="hljs-keyword">return</span> n * factorial(n-<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 调用函数计算阶乘</span><br>result = factorial(<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment"># 输出结果: 120</span><br></code></pre></td></tr></table></figure><p>在这个示例中，函数 <code>factorial()</code> 通过递归调用自身来计算阶乘。当输入参数 <code>n</code> 等于 0 时，函数返回 1，作为递归的基线条件。当输入参数 <code>n</code> 大于 0 时，函数调用自身并将 <code>n</code> 乘以递归结果，实现了递归条件。</p><p>需要注意的是，使用递归调用时要确保存在合适的终止条件（基线条件），以避免无限递归导致程序崩溃。在编写递归函数时，确保每次递归调用都使问题规模减小，最终达到基线条件，从而实现问题的解决。</p><h2 id="11-pygal世界地图上的国家名称显示为中文"><a href="#11-pygal世界地图上的国家名称显示为中文" class="headerlink" title="11.pygal世界地图上的国家名称显示为中文"></a>11.pygal世界地图上的国家名称显示为中文</h2><p>在 Pygal 中，要将地图上的国家名称显示为中文，可以使用 <code>pygal.style.Style</code> 对象来设置样式，并通过设置 <code>label_font_size</code> 和 <code>major_label_font_size</code> 参数来指定标签和主要标签的字体大小。此外，还可以使用 <code>pygal_config</code> 参数来设置全局配置选项。</p><p>以下是一个示例代码，展示如何将地图上的国家名称显示为中文：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygal.maps.world <span class="hljs-keyword">as</span> pygal_maps<br><br><span class="hljs-comment"># 创建地图对象</span><br>world_map = pygal_maps.World(style=pygal_maps.style.Style(label_font_size=<span class="hljs-number">14</span>, major_label_font_size=<span class="hljs-number">16</span>))<br><br><span class="hljs-comment"># 设置地图标题</span><br>world_map.title = <span class="hljs-string">&#x27;世界地图&#x27;</span><br><br><span class="hljs-comment"># 设置国别代码和对应的中文名称</span><br>country_names = &#123;<br>    <span class="hljs-string">&#x27;cn&#x27;</span>: <span class="hljs-string">&#x27;中国&#x27;</span>,<br>    <span class="hljs-string">&#x27;us&#x27;</span>: <span class="hljs-string">&#x27;美国&#x27;</span>,<br>    <span class="hljs-string">&#x27;jp&#x27;</span>: <span class="hljs-string">&#x27;日本&#x27;</span>,<br>    <span class="hljs-comment"># 添加其他国家...</span><br>&#125;<br><br><span class="hljs-comment"># 设置地图数据</span><br>world_map.add(<span class="hljs-string">&#x27;国家&#x27;</span>, country_names)<br><br><span class="hljs-comment"># 渲染地图并保存为SVG文件</span><br>world_map.render_to_file(<span class="hljs-string">&#x27;world_map.svg&#x27;</span>)<br></code></pre></td></tr></table></figure><p>在上述示例中，我们创建了一个地图对象 <code>world_map</code>，并使用 <code>pygal_maps.style.Style</code> 对象来设置样式，其中 <code>label_font_size</code> 设置为 14，<code>major_label_font_size</code> 设置为 16，以调整标签的字体大小。然后，使用 <code>add()</code> 方法将国别代码和对应的中文名称添加到地图中。最后，使用 <code>render_to_file()</code> 方法将地图渲染为 SVG 文件。</p><p>通过以上方式，你可以将地图上的国家名称显示为中文。请注意，确保你的环境中已安装支持中文的字体，以便能够正确显示中文文本。</p><h2 id="12-字符串的一些内置方法"><a href="#12-字符串的一些内置方法" class="headerlink" title="12.字符串的一些内置方法"></a>12.字符串的一些内置方法</h2><p>字符串是 Python 中的内置数据类型之一，它有许多内置方法可以用于对字符串进行各种操作。以下是一些常用的字符串内置方法：</p><ol><li><code>len()</code>: 返回字符串的长度。</li><li><code>lower()</code>: 将字符串转换为小写形式。</li><li><code>upper()</code>: 将字符串转换为大写形式。</li><li><code>capitalize()</code>: 将字符串的第一个字符转换为大写，其他字符转换为小写。</li><li><code>title()</code>: 将字符串中每个单词的首字母转换为大写。</li><li><code>strip()</code>: 去除字符串两端的空格或指定的字符。</li><li><code>split()</code>: 将字符串按指定的分隔符拆分成列表。</li><li><code>join()</code>: 将列表中的字符串元素连接成一个字符串。</li><li><code>replace()</code>: 将字符串中指定的子串替换为新的子串。</li><li><code>startswith()</code>: 检查字符串是否以指定的子串开头。</li><li><code>endswith()</code>: 检查字符串是否以指定的子串结尾。</li><li><code>find()</code>: 查找指定的子串在字符串中的位置。</li><li><code>count()</code>: 统计指定的子串在字符串中出现的次数。</li><li><code>isalpha()</code>: 检查字符串是否只包含字母字符。</li><li><code>isdigit()</code>: 检查字符串是否只包含数字字符。</li></ol><p>这只是一些常用的字符串方法，还有更多方法可供使用。你可以查阅 Python 的官方文档或使用 <code>help()</code> 函数来获取关于字符串方法的详细信息和用法示例。</p><h2 id="13-列表的一些内置方法"><a href="#13-列表的一些内置方法" class="headerlink" title="13.列表的一些内置方法"></a>13.列表的一些内置方法</h2><p>列表是 Python 中的内置数据类型之一，它提供了丰富的内置方法来操作和处理列表。以下是一些常用的列表内置方法：</p><ol><li><code>append()</code>: 在列表末尾添加一个元素。</li><li><code>extend()</code>: 将一个列表的元素追加到另一个列表中。</li><li><code>insert()</code>: 在指定位置插入一个元素。</li><li><code>remove()</code>: 移除列表中指定的元素。</li><li><code>pop()</code>: 移除并返回列表中指定位置的元素。</li><li><code>index()</code>: 返回指定元素在列表中的索引位置。</li><li><code>count()</code>: 统计指定元素在列表中出现的次数。</li><li><code>sort()</code>: 对列表进行排序。</li><li><code>reverse()</code>: 反转列表中的元素顺序。</li><li><code>copy()</code>: 创建一个列表的副本。</li><li><code>clear()</code>: 清空列表中的所有元素。</li><li><code>len()</code>: 返回列表的长度。</li></ol><p>这只是一些常用的列表方法，还有更多方法可供使用。你可以查阅 Python 的官方文档或使用 <code>help()</code> 函数来获取关于列表方法的详细信息和用法示例。</p><h2 id="14-列表切片"><a href="#14-列表切片" class="headerlink" title="14.列表切片"></a>14.列表切片</h2><p>列表切片是一种常用的操作，可以通过切片来获取列表中的部分元素，创建新的列表或对原列表进行修改。以下是一些常见的列表切片的内置方法：</p><ol><li>切片操作：使用冒号（<code>:</code>）来表示切片操作，可以指定起始位置、终止位置和步长。示例：<code>list[start:stop:step]</code>。</li><li><code>list[start:stop]</code>：获取从起始位置到终止位置的元素（不包括终止位置）。</li><li><code>list[start:]</code>：获取从起始位置到列表末尾的元素。</li><li><code>list[:stop]</code>：获取从列表开头到终止位置的元素（不包括终止位置）。</li><li><code>list[:]</code>：获取整个列表的副本。</li><li><code>list[start:stop:step]</code>：指定步长来获取指定间隔的元素。</li></ol><p>除了切片操作，还有一些其他常见的列表方法：</p><ol><li><code>list.append(item)</code>：将元素添加到列表的末尾。</li><li><code>list.extend(iterable)</code>：将可迭代对象中的元素添加到列表的末尾。</li><li><code>list.insert(index, item)</code>：在指定索引位置插入元素。</li><li><code>list.remove(item)</code>：从列表中删除指定的元素。</li><li><code>list.pop(index)</code>：删除并返回指定索引位置的元素。</li><li><code>list.index(item)</code>：返回指定元素在列表中的索引。</li><li><code>list.count(item)</code>：返回指定元素在列表中出现的次数。</li><li><code>list.sort()</code>：对列表进行排序。</li><li><code>list.reverse()</code>：反转列表中的元素顺序。</li></ol><h2 id="15-使用pyecharts画中国、省、市地图"><a href="#15-使用pyecharts画中国、省、市地图" class="headerlink" title="15.使用pyecharts画中国、省、市地图"></a>15.使用pyecharts画中国、省、市地图</h2><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#! -*- coding:utf-8 -*-</span><br><br><span class="hljs-keyword">from</span> pyecharts <span class="hljs-keyword">import</span> options <span class="hljs-keyword">as</span> opts<br><span class="hljs-keyword">from</span> pyecharts.charts <span class="hljs-keyword">import</span> Map<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-comment">#设置两组数据列表，一组为省份，一组为城市</span><br>province = <span class="hljs-string">&#x27;安徽省,北京市,重庆市,福建省,甘肃省,广东省,广西壮族自治区,贵州省,海南省,河北省,黑龙江省,河南省,湖北省,湖南省,内蒙古自治区,江苏省,江西省,吉林省,辽宁省,宁夏回族自治区,青海省,山东省,山西省,陕西省,上海市,四川省,天津市,西藏自治区,新疆维吾尔自治区,云南省,浙江省,台湾省&#x27;</span><br>province = province.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br><br><span class="hljs-comment"># print(province)</span><br><span class="hljs-comment">#将省份转换为[[&#x27;省1&#x27;,值1],[&#x27;省2&#x27;,值2]....]这种格式，并存储到province_data列表中</span><br>province_data = []<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> province:<br>    temp = []<br>    temp.append(x)<br>    temp.append(random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>))<br>    province_data.append(temp)<br><br><span class="hljs-comment">#另一种幅值方法</span><br>cities_data = [<br>    [<span class="hljs-string">&#x27;福州市&#x27;</span>,<span class="hljs-number">0</span>],<br>    [<span class="hljs-string">&#x27;厦门市&#x27;</span>,<span class="hljs-number">0</span>],<br>    [<span class="hljs-string">&#x27;泉州市&#x27;</span>,<span class="hljs-number">0</span>],<br>    [<span class="hljs-string">&#x27;莆田市&#x27;</span>,<span class="hljs-number">0</span>],<br>    [<span class="hljs-string">&#x27;漳州市&#x27;</span>,<span class="hljs-number">0</span>],<br>    [<span class="hljs-string">&#x27;龙岩市&#x27;</span>,<span class="hljs-number">0</span>],<br>    [<span class="hljs-string">&#x27;三明市&#x27;</span>,<span class="hljs-number">0</span>],<br>    [<span class="hljs-string">&#x27;南平市&#x27;</span>,<span class="hljs-number">0</span>],<br>    [<span class="hljs-string">&#x27;宁德市&#x27;</span>,<span class="hljs-number">0</span>]<br>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">data_filling</span>(<span class="hljs-params">array</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;给数据数据填充随机数&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> array:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i:<br>            i[<span class="hljs-number">1</span>] = random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>)<br><br><span class="hljs-comment">#调用data_filling函数给cities_data赋随机值</span><br>data_filling(cities_data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_china_map</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;生成一个中国地图&quot;&quot;&quot;</span><br>    (<br>        Map(init_opts=opts.InitOpts(height=<span class="hljs-string">&quot;860px&quot;</span>, width=<span class="hljs-string">&quot;1800px&quot;</span>))<br>        .add(<br>            series_name=<span class="hljs-string">&#x27;全国&#x27;</span>,<br>            data_pair=province_data,<br>            maptype=<span class="hljs-string">&quot;china&quot;</span>,<br>            <span class="hljs-comment">#默认是否选中</span><br>            <span class="hljs-comment"># is_selected=False,</span><br>            <span class="hljs-comment"># 是否启用鼠标滚轮缩放和拖动平移，默认为True</span><br>            is_roam=<span class="hljs-literal">True</span>,<br>            <span class="hljs-comment"># 是否显示图形标记，默认为True</span><br>            is_map_symbol_show=<span class="hljs-literal">False</span>,<br>            <span class="hljs-comment"># 局部关闭标签显示</span><br>            label_opts=opts.LabelOpts(is_show=<span class="hljs-literal">False</span>),<br>            <span class="hljs-comment"># 图元样式配置</span><br>            <span class="hljs-comment"># itemstyle_opts=&#123;</span><br>            <span class="hljs-comment">#     # 常规显示</span><br>            <span class="hljs-comment">#     &quot;normal&quot;: &#123;&quot;areaColor&quot;: &quot;white&quot;, &quot;borderColor&quot;: &quot;red&quot;&#125;,</span><br>            <span class="hljs-comment">#     # 强调颜色</span><br>            <span class="hljs-comment">#     &quot;emphasis&quot;: &#123;&quot;areaColor&quot;: &quot;rgba(0,0,0,1)&quot;&#125;</span><br>            <span class="hljs-comment"># &#125;</span><br>        )<br>        .add(<br>            series_name=<span class="hljs-string">&#x27;福建省&#x27;</span>,<br>            data_pair=cities_data,<br>            maptype=<span class="hljs-string">&quot;china-cities&quot;</span>,<br>            <span class="hljs-comment">#默认是否选中</span><br>            <span class="hljs-comment"># is_selected=False</span><br>        )<br>        <span class="hljs-comment">#设置标题</span><br>        .set_global_opts(title_opts=opts.TitleOpts(title=<span class="hljs-string">&#x27;中国地图&#x27;</span>),<br>                         <span class="hljs-comment">#设置分段显示</span><br>                         visualmap_opts=opts.VisualMapOpts(max_=<span class="hljs-number">1000</span>,is_piecewise=<span class="hljs-literal">False</span>)<br>                         )<br>        <span class="hljs-comment"># 系列配置项</span><br>        <span class="hljs-comment"># 关闭标签名称显示</span><br>        .set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="hljs-literal">False</span>))<br>        <span class="hljs-comment">#生成本地html文件</span><br>        .render(<span class="hljs-string">&quot;中国地图.html&quot;</span>)<br>    )<br><br>create_china_map()<br></code></pre></td></tr></table></figure><p>其中maptype可选择：</p><ul><li><code>china</code>：全国地图，最小单元的省份</li></ul><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306081044518.webp"></p><ul><li><code>省份名称</code>：显示指定省份地图（如福建）显示的为福建地图</li></ul><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306081044082.webp"></p><ul><li><code>市名</code>：显示的为指定市地图，如（宁德）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306081048134.webp"></p><ul><li><code>china-cities</code>：显示的为中国地图，按城市划分</li></ul><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306081044833.webp"></p><ul><li><code>worrld</code>：世界地图</li></ul><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306081046154.webp"></p><h2 id="16-对字典根据关键字进行排序"><a href="#16-对字典根据关键字进行排序" class="headerlink" title="16.对字典根据关键字进行排序"></a>16.对字典根据关键字进行排序</h2><p>要对字典列表根据关键字进行排序，可以使用 <code>itemgetter()</code> 函数配合 <code>sorted()</code> 函数来实现。</p><p><code>itemgetter()</code> 函数可以用于获取字典中的特定键的值，它接受一个键作为参数，并返回一个函数，该函数用于获取给定键的值。<code>sorted()</code> 函数可以接受一个可迭代对象和一个关键字参数 <code>key</code>，用于指定排序的依据。</p><p>下面是一个示例，演示如何对字典列表根据关键字进行排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> operator <span class="hljs-keyword">import</span> itemgetter<br><br><span class="hljs-comment"># 假设有一个字典列表</span><br>data = [&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">25</span>&#125;, &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">30</span>&#125;, &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Charlie&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>&#125;]<br><br><span class="hljs-comment"># 按照 &#x27;name&#x27; 关键字进行排序</span><br>sorted_data = <span class="hljs-built_in">sorted</span>(data, key=itemgetter(<span class="hljs-string">&#x27;name&#x27;</span>))<br><span class="hljs-built_in">print</span>(sorted_data)<br><br><span class="hljs-comment"># 按照 &#x27;age&#x27; 关键字进行排序</span><br>sorted_data = <span class="hljs-built_in">sorted</span>(data, key=itemgetter(<span class="hljs-string">&#x27;age&#x27;</span>))<br><span class="hljs-built_in">print</span>(sorted_data)<br></code></pre></td></tr></table></figure><p>可以加上<code>resverse=True</code>实现倒序</p><h2 id="17-打印输出文字设置颜色"><a href="#17-打印输出文字设置颜色" class="headerlink" title="17.打印输出文字设置颜色"></a>17.打印输出文字设置颜色</h2><p>在标准输出中，Python 没有直接支持设置文本颜色的功能。然而，你可以通过使用 ANSI 转义序列来实现在终端中设置文本颜色。</p><p>下面是一个示例，展示了如何使用 ANSI 转义序列设置输出文本的颜色：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ANSI 转义序列设置文本颜色</span><br>BLACK = <span class="hljs-string">&quot;\033[0;30m&quot;</span><br>RED = <span class="hljs-string">&quot;\033[0;31m&quot;</span><br>GREEN = <span class="hljs-string">&quot;\033[0;32m&quot;</span><br>YELLOW = <span class="hljs-string">&quot;\033[0;33m&quot;</span><br>BLUE = <span class="hljs-string">&quot;\033[0;34m&quot;</span><br>MAGENTA = <span class="hljs-string">&quot;\033[0;35m&quot;</span><br>CYAN = <span class="hljs-string">&quot;\033[0;36m&quot;</span><br>WHITE = <span class="hljs-string">&quot;\033[0;37m&quot;</span><br>RESET = <span class="hljs-string">&quot;\033[0m&quot;</span><br><br><span class="hljs-comment"># 示例输出</span><br><span class="hljs-built_in">print</span>(RED + <span class="hljs-string">&quot;这是红色文本&quot;</span> + RESET)<br><span class="hljs-built_in">print</span>(GREEN + <span class="hljs-string">&quot;这是绿色文本&quot;</span> + RESET)<br><span class="hljs-built_in">print</span>(YELLOW + <span class="hljs-string">&quot;这是黄色文本&quot;</span> + RESET)<br><span class="hljs-built_in">print</span>(BLUE + <span class="hljs-string">&quot;这是蓝色文本&quot;</span> + RESET)<br><span class="hljs-built_in">print</span>(MAGENTA + <span class="hljs-string">&quot;这是品红色文本&quot;</span> + RESET)<br><span class="hljs-built_in">print</span>(CYAN + <span class="hljs-string">&quot;这是青色文本&quot;</span> + RESET)<br><span class="hljs-built_in">print</span>(WHITE + <span class="hljs-string">&quot;这是白色文本&quot;</span> + RESET)<br></code></pre></td></tr></table></figure><p>上述代码使用 ANSI 转义序列设置了不同颜色的文本，并通过 <code>print</code> 函数打印到终端。输出结果将根据设置的颜色显示不同的文本颜色。要恢复默认的文本颜色，可以使用 <code>RESET</code> 序列。</p><p>请注意，ANSI 转义序列的可用性和效果可能因终端类型和操作系统而异。在某些情况下，它可能无法在某些终端或操作系统上正常工作。</p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化-python</title>
    <link href="/2023/06/05/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-python/"/>
    <url>/2023/06/05/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-python/</url>
    
    <content type="html"><![CDATA[<h1 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h1><p>matplotlib，它是一个数学绘图库，我们将使用它来制作简单的图表，如折线图和散点图。然后，我们将基于随机漫步概念生成一个更有趣的数据集——根据一系列随机决策生成的图表。</p><p>Pygal包，它专注于生成适合在数字设备上显示的图表。通过使用Pygal，可在用户与图表交互时突出元素以及调整其大小，还可轻松地调整整个图表的尺寸，使其适合在微型智能手表或巨型显示器上显示。</p><h2 id="1-生成数据"><a href="#1-生成数据" class="headerlink" title="1.生成数据"></a>1.生成数据</h2><h3 id="1-1matplotlib画廊"><a href="#1-1matplotlib画廊" class="headerlink" title="1.1matplotlib画廊"></a>1.1matplotlib画廊</h3><p>要查看使用matplotlib可制作的各种图表，请访问<a href="http://matplotlib.org/">https://matplotlib.org</a>的示例画廊。单击画廊中的图表，就可查看用于生成图表的代码。</p><p>中文文档地址：<a href="https://www.matplotlib.org.cn/">Matplotlib</a></p><h3 id="1-2绘制简单折线图"><a href="#1-2绘制简单折线图" class="headerlink" title="1.2绘制简单折线图"></a>1.2绘制简单折线图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>squares = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>]<br>plt.plot(squares)<br>plt.show()<br></code></pre></td></tr></table></figure><p>我们首先导入了模块pyplot，并给它指定了别名plt，以免反复输入pyplot。在线示例大都这样做，因此这里也这样做。模块pyplot包含很多用于生成图表的函数。</p><p>我们创建了一个列表，在其中存储了前述平方数，再将这个列表传递给函数plot()，这个函数尝试根据这些数字绘制出有意义的图形。</p><p><strong>如何让显示中文</strong></p><p>如何电脑已安装了相应的字体如‘微软雅黑’，则可以设置<code>plt.rcParams[&#39;font.sans-serif&#39;] = [&#39;Microsoft YaHei&#39;]</code>指定字体，即可实现中文显示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-comment"># from matplotlib.font_manager import FontProperties</span><br><br><span class="hljs-comment"># # 指定中文字体文件路径</span><br><span class="hljs-comment"># font_path = &#x27;C:\Windows\Fonts\msyh.ttc&#x27;</span><br><br><span class="hljs-comment"># # 加载字体文件</span><br><span class="hljs-comment"># font_prop = FontProperties(fname=font_path)</span><br><br><span class="hljs-comment"># 设置中文显示</span><br><span class="hljs-comment"># plt.rcParams[&#x27;font.family&#x27;] = font_prop.get_name()</span><br>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]<br><br>squares = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>]<br>plt.plot(squares,linewidth=<span class="hljs-number">5</span>)<br><br>plt.title(<span class="hljs-string">&quot;平方数折线图&quot;</span>,fontsize=<span class="hljs-number">24</span>)<br>plt.xlabel(<span class="hljs-string">&quot;数值&quot;</span>,fontsize=<span class="hljs-number">14</span>)<br>plt.ylabel(<span class="hljs-string">&quot;值的平方&quot;</span>,fontsize=<span class="hljs-number">14</span>)<br><br>plt.tick_params(axis=<span class="hljs-string">&#x27;both&#x27;</span>,labelsize=<span class="hljs-number">24</span>)<br><br>plt.show()<br></code></pre></td></tr></table></figure><p><strong><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306050939247.webp"></strong></p><h3 id="1-3使用scatter-绘制一系列点"><a href="#1-3使用scatter-绘制一系列点" class="headerlink" title="1.3使用scatter()绘制一系列点"></a>1.3使用scatter()绘制一系列点</h3><p>要绘制一系列的点，可向scatter()传递两个分别包含<em>x</em>值和<em>y</em>值的列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment">#图表标签及标题支持中文显示</span><br>plt.rcParams[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>] = [<span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>]<br><br><br>x_values = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>y_values = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>]<br><br>plt.scatter(x_values,y_values,s=<span class="hljs-number">100</span>,c=<span class="hljs-string">&#x27;#80bee1&#x27;</span>,linewidths=<span class="hljs-number">0.5</span>)<br><br>plt.title(<span class="hljs-string">&quot;平方数散点图&quot;</span>,fontsize=<span class="hljs-number">18</span>)<br>plt.xlabel(<span class="hljs-string">&quot;X轴&quot;</span>,fontsize=<span class="hljs-number">10</span>)<br>plt.ylabel(<span class="hljs-string">&quot;Y轴&quot;</span>,fontsize=<span class="hljs-number">10</span>)<br><br>plt.tick_params(axis=<span class="hljs-string">&#x27;both&#x27;</span>,labelsize=<span class="hljs-number">14</span>)<br><br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306050948560.webp"></p><h3 id="1-4自动计算数据"><a href="#1-4自动计算数据" class="headerlink" title="1.4自动计算数据"></a>1.4自动计算数据</h3><p>手工计算列表要包含的值可能效率低下，需要绘制的点很多时尤其如此。可以不必手工计算包含点坐标的列表，而让Python循环来替我们完成这种计算。</p><p>matplotlib允许你给散点图中的各个点指定颜色。默认为蓝色点和黑色轮廓，在散点图包含的数据点不多时效果很好。但绘制很多点时，黑色轮廓可能会粘连在一起。要删除数据点的轮廓，可在调用scatter()时传递实参edgecolor&#x3D;’none’</p><p><strong>自定义颜色</strong></p><p>要修改数据点的颜色，可向scatter()传递参数c，并将其设置为要使用的颜色的名称，如下所示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.scatter(x_values, y_values, c=<span class="hljs-string">&#x27;red&#x27;</span>, dgecolor=<span class="hljs-string">&#x27;none&#x27;</span>, s=<span class="hljs-number">40</span>)<br></code></pre></td></tr></table></figure><p>你还可以使用RGB颜色模式自定义颜色：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.scatter(x_values, y_values, c=(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.8</span>), edgecolor=<span class="hljs-string">&#x27;none&#x27;</span>, s=<span class="hljs-number">40</span>)<br></code></pre></td></tr></table></figure><p>值越接近0，指定的颜色越深，值越接近1，指定的颜色越浅。</p><p><strong>颜色映射</strong></p><p>颜色映射（colormap）是一系列颜色，它们从起始颜色渐变到结束颜色。在可视化中，颜色映射用于突出数据的规律，例如，你可能用较浅的颜色来显示较小的值，并使用较深的颜色来显示较大的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.scatter(x_values, y_values, c=y_values, cmap=plt.cm.Blues, <br> edgecolor=<span class="hljs-string">&#x27;none&#x27;</span>, s=<span class="hljs-number">40</span>)<br></code></pre></td></tr></table></figure><p>我们将参数c设置成了一个<em>y</em>值列表，并使用参数cmap告诉pyplot使用哪个颜色映射。这些代码将<em>y</em>值较小的点显示为浅蓝色，并将<em>y</em>值较大的点显示为深蓝色.</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306051039323.webp"></p><p><em>注意：要了解pyplot中所有的颜色映射，请访问<a href="http://matplotlib.org/%EF%BC%8C%E5%8D%95%E5%87%BBExamples%EF%BC%8C%E5%90%91%E4%B8%8B%E6%BB%9A%E5%8A%A8%E5%88%B0Color">http://matplotlib.org/，单击Examples，向下滚动到Color</a> Examples，再单击olormaps_reference。</em></p><p><img src="https://matplotlib.org/stable/_images/sphx_glr_colormap_reference_001.png"></p><p><img src="https://matplotlib.org/stable/_images/sphx_glr_colormap_reference_002.png"></p><p><img src="https://matplotlib.org/stable/_images/sphx_glr_colormap_reference_003.png"></p><p><img src="https://matplotlib.org/stable/_images/sphx_glr_colormap_reference_004.png"></p><p><img src="https://matplotlib.org/stable/_images/sphx_glr_colormap_reference_005.png"></p><p><img src="https://matplotlib.org/stable/_images/sphx_glr_colormap_reference_006.png"></p><p><img src="https://matplotlib.org/stable/_images/sphx_glr_colormap_reference_007.png"></p><h3 id="1-5自动保存图片"><a href="#1-5自动保存图片" class="headerlink" title="1.5自动保存图片"></a>1.5自动保存图片</h3><p>要让程序自动将图表保存到文件中，可将对plt.show()的调用替换为对plt.savefig()的调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.savefig(<span class="hljs-string">&#x27;squares_plot.png&#x27;</span>, bbox_inches=<span class="hljs-string">&#x27;tight&#x27;</span>)<br></code></pre></td></tr></table></figure><p>第一个实参指定要以什么样的文件名保存图表，这个文件将存储到scatter_squares.py所在的目录中；第二个实参指定将图表多余的空白区域裁剪掉</p><h3 id="1-6随机漫步"><a href="#1-6随机漫步" class="headerlink" title="1.6随机漫步"></a>1.6随机漫步</h3><p>随机漫步是这样行走得到的路径：每次行走都完全是随机的，没有明确的方向，结果是由一系列随机决策决定的。</p><p>在自然界、物理学、生物学、化学和经济领域，随机漫步都有其实际用途。例如，漂浮在水滴上的花粉因不断受到水分子的挤压而在水面上移动。水滴中的分子运动是随机的，因此花粉在水面上的运动路径犹如随机漫步。我们稍后将编写的代码模拟了现实世界的很多情形。</p><p>RandomWalk类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomWalk</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;&quot;一个生成随机漫步数据的类&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,num_points=<span class="hljs-number">5000</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;&quot;初始化随机漫步的属性&quot;&quot;&quot;</span><br>        self.num_points = num_points<br><br>        <span class="hljs-comment">#所有的随机漫步都始于(0,0)</span><br>        self.x_values = [<span class="hljs-number">0</span>]<br>        self.y_vlaues = [<span class="hljs-number">0</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fill_walk</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;计算随机漫步包含的所有点&quot;&quot;&quot;</span><br><br>        <span class="hljs-comment">#不断漫步，直到列表达到指定的长度</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(self.x_values) &lt; self.num_points:<br>            <span class="hljs-comment">#决定前进的方向及沿这个方向前进的距离</span><br>            x_direction = choice([<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>])<br>            x_distance = choice([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br>            x_step = x_direction * x_distance<br><br>            y_direction = choice([<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>])<br>            y_distance = choice([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<br>            y_step = y_direction * y_distance<br><br>            <span class="hljs-comment">#拒绝原地踏步</span><br>            <span class="hljs-keyword">if</span> x_step ==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> y_step ==<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-comment">#计算下一个点的x和y值</span><br>            next_x = self.x_values[-<span class="hljs-number">1</span>] + x_step<br>            next_y = self.y_vlaues[-<span class="hljs-number">1</span>] + y_step<br><br>            self.x_values.append(next_x)<br>            self.y_vlaues.append(next_y)<br><br></code></pre></td></tr></table></figure><p>图形化展示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-keyword">from</span> random_walk <span class="hljs-keyword">import</span> RandomWalk<br><br><span class="hljs-comment">#只要程序处于活动状态，就不断地模拟随机漫步</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment">#创建一个RandomWalk实例，并将其包含的点都绘制出来</span><br>    my_randomwalk = RandomWalk()<br>    my_randomwalk.fill_walk()<br><br>    <span class="hljs-comment">#图形化显示</span><br>    plt.scatter(my_randomwalk.x_values,my_randomwalk.y_vlaues,s=<span class="hljs-number">10</span>)<br>    plt.suptitle(<span class="hljs-string">&quot;随机漫步&quot;</span>,fontproperties=<span class="hljs-string">&#x27;SimHei&#x27;</span>)<br>    plt.show()<br><br>    keep_running = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;进行一个随机漫步吗？(y/n)&quot;</span>)<br>    <span class="hljs-keyword">if</span> keep_running == <span class="hljs-string">&#x27;n&#x27;</span>:<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p><strong>给点着色</strong></p><p>我们将使用颜色映射来指出漫步中各点的先后顺序，并删除每个点的黑色轮廓，让它们的颜色更明显。为根据漫步中各点的先后顺序进行着色，我们传递参数c，并将其设置为一个列表，其中包含各点的先后顺序。由于这些点是按顺序绘制的，因此给参数c指定的列表只需包含数字1~5000</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">point_numbers = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(rw.num_points)) <br> plt.scatter(rw.x_values, rw.y_values, c=point_numbers, cmap=plt.cm.Blues, <br> edgecolor=<span class="hljs-string">&#x27;none&#x27;</span>, s=<span class="hljs-number">15</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306051501014.webp"></p><p><strong>隐藏坐标轴</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 隐藏坐标轴,plt.scatter模式下：</span><br>plt.axis(<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># ax.scatter模式下两种方式都可以：</span><br>ax.axis(<span class="hljs-literal">False</span>)<br>ax.xaxis.set_visible(<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>为修改坐标轴，使用了函数plt.axes()（见Ø）来将每条坐标轴的可见性都设置为False。随着你越来越多地进行数据可视化，经常会看到这种串接方法的方式。为修改坐标轴，使用了函数plt.axes()（见Ø）来将每条坐标轴的可见性都设置为False。随着你越来越多地进行数据可视化，经常会看到这种串接方法的方式。</p><p><strong>chatgpt解释plt.scatter与ax.scatter的区别：</strong></p><blockquote><p><code>plt.scatter</code> 和 <code>ax.scatter</code> 都用于绘制散点图，它们的区别在于使用的绘图方式和用法上略有不同。</p><p><code>plt.scatter</code> 是 <code>pyplot</code> 模块提供的函数，它是面向过程的绘图方式。你可以直接调用 <code>plt.scatter</code> 来创建一个散点图，并且在同一个函数调用中设置图形的各种属性，如点的大小、颜色、标签等。这种方式适合简单的绘图需求。</p><p>示例：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&gt;import matplotlib<span class="hljs-selector-class">.pyplot</span> as plt<br><br>&gt;x = <span class="hljs-selector-attr">[1, 2, 3, 4]</span><br>&gt;y = <span class="hljs-selector-attr">[5, 6, 7, 8]</span><br><br>&gt;plt<span class="hljs-selector-class">.scatter</span>(x, y, marker=<span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-attribute">color</span>=<span class="hljs-string">&#x27;blue&#x27;</span>)<br>&gt;plt<span class="hljs-selector-class">.xlabel</span>(<span class="hljs-string">&#x27;X&#x27;</span>)<br>&gt;plt<span class="hljs-selector-class">.ylabel</span>(<span class="hljs-string">&#x27;Y&#x27;</span>)<br>&gt;plt<span class="hljs-selector-class">.title</span>(<span class="hljs-string">&#x27;Scatter Plot&#x27;</span>)<br>&gt;plt<span class="hljs-selector-class">.show</span>()<br></code></pre></td></tr></table></figure><p><code>ax.scatter</code> 是使用面向对象的方式进行绘图，它需要先创建一个图形对象 <code>fig</code> 和一个子图对象 <code>ax</code>，然后通过 <code>ax.scatter</code> 调用子图对象的方法来创建散点图，并设置图形的属性。这种方式更灵活，适合复杂的图形绘制需求，可以通过操作子图对象来进行更多的自定义设置。</p><p>示例：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&gt;import matplotlib<span class="hljs-selector-class">.pyplot</span> as plt<br><br>&gt;x = <span class="hljs-selector-attr">[1, 2, 3, 4]</span><br>&gt;y = <span class="hljs-selector-attr">[5, 6, 7, 8]</span><br><br>&gt;fig, ax = plt<span class="hljs-selector-class">.subplots</span>()<br>&gt;ax<span class="hljs-selector-class">.scatter</span>(x, y, marker=<span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-attribute">color</span>=<span class="hljs-string">&#x27;blue&#x27;</span>)<br>&gt;ax<span class="hljs-selector-class">.set_xlabel</span>(<span class="hljs-string">&#x27;X&#x27;</span>)<br>&gt;ax<span class="hljs-selector-class">.set_ylabel</span>(<span class="hljs-string">&#x27;Y&#x27;</span>)<br>&gt;ax<span class="hljs-selector-class">.set_title</span>(<span class="hljs-string">&#x27;Scatter Plot&#x27;</span>)<br>&gt;plt<span class="hljs-selector-class">.show</span>()<br></code></pre></td></tr></table></figure><p>总结来说，<code>plt.scatter</code> 是面向过程的方式，直接在当前图形上绘制散点图，而 <code>ax.scatter</code> 是面向对象的方式，需要先创建图形对象和子图对象，然后调用子图对象的方法来绘制散点图。使用面向对象的方式可以更灵活地控制图形的各个元素和属性。</p></blockquote><h3 id="1-7调整尺寸以适应屏幕"><a href="#1-7调整尺寸以适应屏幕" class="headerlink" title="1.7调整尺寸以适应屏幕"></a>1.7调整尺寸以适应屏幕</h3><p>图表适合屏幕大小时，更能有效地将数据中的规律呈现出来。为让绘图窗口更适合屏幕大小，可像下面这样调整matplotlib输出的尺寸。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.figure(figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">6</span>))<br></code></pre></td></tr></table></figure><p>可以增加分辨率参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">plt.figure(dpi=<span class="hljs-number">128</span>, figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">6</span>))<br><br>fig , ax = plt.subplots(dpi=<span class="hljs-number">128</span>,figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">6</span>))<br></code></pre></td></tr></table></figure><h3 id="1-8使用Pygal模拟掷骰子"><a href="#1-8使用Pygal模拟掷骰子" class="headerlink" title="1.8使用Pygal模拟掷骰子"></a>1.8使用Pygal模拟掷骰子</h3><p>在数学领域，常常利用掷骰子来解释各种数据分析。</p><p>要了解使用Pygal可创建什么样的图表，请查看图表类型画廊：访问<a href="http://www.pygal.org/%EF%BC%8C%E5%8D%95%E5%87%BBDocumentation%EF%BC%8C%E5%86%8D%E5%8D%95%E5%87%BBChart">http://www.pygal.org/，单击Documentation，再单击Chart</a> types。每个示例都包含源代码，让你知道这些图表是如何生成的</p><p><strong>设置刻度标签中文</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">ax.tick_params(axis=<span class="hljs-string">&#x27;x&#x27;</span>)  <span class="hljs-comment"># 设置刻度标签旋转角度</span><br><span class="hljs-keyword">for</span> label <span class="hljs-keyword">in</span> ax.get_xticklabels():<br>    label.set_fontproperties(<span class="hljs-string">&#x27;SimHei&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>zip()函数的使用：</strong></p><blockquote><p>可以使用<code>zip()</code>函数将两个列表组合成一个元组列表。<code>zip()</code>函数将按索引位置将两个列表中的元素逐个配对，返回一个包含元组的迭代器。然后，你可以将迭代器转换为列表。以下是示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>&gt;list2 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br><br>&gt;combined_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(list1, list2))<br><br>&gt;<span class="hljs-built_in">print</span>(combined_list)<br></code></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;[(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;b&#x27;</span>), (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;c&#x27;</span>)]<br></code></pre></td></tr></table></figure><p>在示例中，<code>zip(list1, list2)</code>将列表<code>list1</code>和<code>list2</code>中的元素逐个配对，得到一个元组的迭代器。然后，通过<code>list()</code>函数将迭代器转换为列表，得到了一个包含元组的列表<code>combined_list</code>。</p></blockquote><h2 id="2-下载数据"><a href="#2-下载数据" class="headerlink" title="2.下载数据"></a>2.下载数据</h2><p>要在文本文件中存储数据，最简单的方式是将数据作为一系列以逗号分隔的值（CSV）写入文件</p><p>csv模块包含在Python标准库中，可用于分析CSV文件中的数据行。</p><ul><li>enumerate()：用来获取每个元素的索引及其值。</li></ul><h3 id="2-1模块datetime"><a href="#2-1模块datetime" class="headerlink" title="2.1模块datetime()"></a>2.1模块datetime()</h3><p>方法strptime()可接受各种实参，并根据它们来决定如何解读日期:</p><table><thead><tr><th>实参</th><th>含义</th></tr></thead><tbody><tr><td>%A</td><td>星期的名称，如Monday</td></tr><tr><td>%B</td><td>月份名，如January</td></tr><tr><td>%m</td><td>用数字表示的月份（01~12）</td></tr><tr><td>%d</td><td>用数字表示月份中的一天（01~31）</td></tr><tr><td>%Y</td><td>四位的年份，如2015</td></tr><tr><td>%y</td><td>两位的年份，如15</td></tr><tr><td>%H</td><td>24小时制的小时数（00~23）</td></tr><tr><td>%I</td><td>12小时制的小时数（01~12）</td></tr><tr><td>%p</td><td>am或pm</td></tr><tr><td>%M</td><td>分钟数（00~59）</td></tr><tr><td>%S</td><td>秒数（00~61）</td></tr></tbody></table><h3 id="2-2fill-between-方法"><a href="#2-2fill-between-方法" class="headerlink" title="2.2fill_between()方法"></a>2.2fill_between()方法</h3><p>fill_between()，它接受一个<em>x</em>值系列和两个<em>y</em>值系列，并填充两个<em>y</em>值系列之间的空间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python">plt.plot(dates, highs, c=<span class="hljs-string">&#x27;red&#x27;</span>, alpha=<span class="hljs-number">0.5</span>) <br>plt.plot(dates, lows, c=<span class="hljs-string">&#x27;blue&#x27;</span>, alpha=<span class="hljs-number">0.5</span>)<br>plt.fill_between(dates, highs, lows, facecolor=<span class="hljs-string">&#x27;blue&#x27;</span>, alpha=<span class="hljs-number">0.1</span>)<br></code></pre></td></tr></table></figure><p>实参alpha指定颜色的透明度。Alpha值为0表示完全透明，1（默认设置）表示完全不透明。通过将alpha设置为0.5，可让红色和蓝色折线的颜色看起来更浅。</p><p>我们向fill_between()传递了一个<em>x</em>值系列：列表dates，还传递了两个<em>y</em>值系列：highs和lows。实参facecolor指定了填充区域的颜色，我们还将alpha设置成了较小的值0.1，让填充区域将两个数据系列连接起来的同时不分散观察者的注意力</p><h2 id="3-人口地图数据"><a href="#3-人口地图数据" class="headerlink" title="3.人口地图数据"></a>3.人口地图数据</h2><p>Pygal中的地图制作工具要求数据为特定的格式：用国别码表示国家，以及用数字表示人口数量。处理地理政治数据时，经常需要用到几个标准化国别码集。</p><p>我们的数据中，国别码是三位的，而pygal的地图工具使用两位国别码。要使用pygal绘制世界地图。需要安装依赖包。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install pygal_maps_world<br></code></pre></td></tr></table></figure><p>国别码位于<code>i18n</code>模块</p><p><code>from pygal_maps_world.i18n import COUNTRIES</code>这样就导入了, COUNTRIES是一个字典，键是两位国别码，值是具体国家名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> code, name <span class="hljs-keyword">in</span> COUNTRIES.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;name&#125;</span> : <span class="hljs-subst">&#123;code&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> pygal<br><br><span class="hljs-keyword">from</span> countries_codes <span class="hljs-keyword">import</span> get_country_code<br><br>filename = <span class="hljs-string">r&#x27;E:\Learning\python\16_下载数据\population_json.json&#x27;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> f:<br>    pop_data = json.load(f)<br><br>cc_population = &#123;&#125;<br><span class="hljs-keyword">for</span> pop_dict <span class="hljs-keyword">in</span> pop_data:<br>    <span class="hljs-keyword">if</span> pop_dict[<span class="hljs-string">&#x27;Year&#x27;</span>] == <span class="hljs-number">2016</span>:<br>        country = pop_dict[<span class="hljs-string">&#x27;Country Name&#x27;</span>]<br>        population = pop_dict[<span class="hljs-string">&#x27;Value&#x27;</span>]<br>        code = get_country_code(country)<br>        <span class="hljs-keyword">if</span> code:<br>            cc_population[code] = population<br><br><span class="hljs-comment"># print(cc_population)</span><br>cc_pops_1, cc_pops_2, cc_pops_3 = &#123;&#125;, &#123;&#125;, &#123;&#125;<br><br><span class="hljs-keyword">for</span> cc,pop <span class="hljs-keyword">in</span> cc_population.items():<br>    <span class="hljs-keyword">if</span> pop &lt; <span class="hljs-number">100000000</span>:<br>        cc_pops_1[cc] = pop<br>    <span class="hljs-keyword">elif</span> pop &lt; <span class="hljs-number">1000000000</span>:<br>        cc_pops_2[cc] = pop<br>    <span class="hljs-keyword">else</span>:<br>        cc_pops_3[cc] = pop<br><br>wm = pygal.maps.world.World()<br>wm.title = <span class="hljs-string">&#x27;2016年世界人口分布&#x27;</span><br><br>wm.add(<span class="hljs-string">&#x27;0-10m&#x27;</span>, cc_pops_1) <br>wm.add(<span class="hljs-string">&#x27;10m-1bn&#x27;</span>, cc_pops_2) <br>wm.add(<span class="hljs-string">&#x27;&gt;1bn&#x27;</span>, cc_pops_3)<br><br><span class="hljs-comment"># wm.add(&#x27;2016&#x27;,cc_population)</span><br><span class="hljs-comment"># wm.add(&#x27;North America&#x27;, [&#x27;us&#x27;,&#x27;ca&#x27;,&#x27;mx&#x27;])</span><br><span class="hljs-comment"># wm.add(&#x27;Central America&#x27;, [&#x27;bz&#x27;, &#x27;cr&#x27;, &#x27;gt&#x27;, &#x27;hn&#x27;, &#x27;ni&#x27;, &#x27;pa&#x27;, &#x27;sv&#x27;]) </span><br><span class="hljs-comment"># wm.add(&#x27;South America&#x27;, [&#x27;ar&#x27;, &#x27;bo&#x27;, &#x27;br&#x27;, &#x27;cl&#x27;, &#x27;co&#x27;, &#x27;ec&#x27;, &#x27;gf&#x27;, </span><br><span class="hljs-comment">#                          &#x27;gy&#x27;, &#x27;pe&#x27;, &#x27;py&#x27;, &#x27;sr&#x27;, &#x27;uy&#x27;, &#x27;ve&#x27;])</span><br><br>wm.render_to_file(<span class="hljs-string">&quot;world-population.svg&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pygal_maps_world.i18n <span class="hljs-keyword">import</span> COUNTRIES<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_country_code</span>(<span class="hljs-params">country_name</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;根据国家名，返回2位的国别代码&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> code,name <span class="hljs-keyword">in</span> COUNTRIES.items():<br>        <span class="hljs-keyword">if</span> country_name == name:<br>            <span class="hljs-keyword">return</span> code<br>        <span class="hljs-keyword">elif</span> country_name == <span class="hljs-string">&#x27;Congo, Rep.&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;cg&#x27;</span><br>        <span class="hljs-keyword">elif</span> country_name == <span class="hljs-string">&#x27;Congo, Dem. Rep.&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;cd&#x27;</span><br>        <span class="hljs-keyword">elif</span> country_name == <span class="hljs-string">&#x27;Yemen, Rep.&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;ye&#x27;</span><br>        <span class="hljs-keyword">elif</span> country_name == <span class="hljs-string">&#x27;Korea, Dem. People’s Rep.&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;kp&#x27;</span><br>        <span class="hljs-keyword">elif</span> country_name == <span class="hljs-string">&#x27;Korea, Rep.&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;kr&#x27;</span><br>        <span class="hljs-keyword">elif</span> country_name == <span class="hljs-string">&#x27;Libya&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;ly&#x27;</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202306071919358.webp"></p><p>人口数据：</p><p><a href="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/img/population_json.json">population_json.json</a></p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习笔记</title>
    <link href="/2023/06/01/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/01/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Python学习笔记摘要"><a href="#Python学习笔记摘要" class="headerlink" title="Python学习笔记摘要"></a>Python学习笔记摘要</h1><h2 id="1-起步"><a href="#1-起步" class="headerlink" title="1.起步"></a>1.起步</h2><h3 id="1-1Python的安装等"><a href="#1-1Python的安装等" class="headerlink" title="1.1Python的安装等"></a>1.1Python的安装等</h3><p>略</p><h3 id="1-2设置代码格式"><a href="#1-2设置代码格式" class="headerlink" title="1.2设置代码格式"></a>1.2设置代码格式</h3><ul><li><p>PEP 8建议每级缩进都使用四个空格，这既可提高可读性，又留下了足够的多级缩进空间。</p></li><li><p>在程序中混合使用制表符和空格可能导致极难解决的问题。如果你混合使用了制表符和空格，可将文件中所有的制表符转换为空格，大多数编辑器都提供了这样的功能。</p></li><li><p>很多Python程序员都建议每行不超过80字符。</p></li><li><p>PEP 8还建议注释的行长都不超过72字符，因为有些工具为大型项目自动生成文档时，会在每行注释开头添加格式化字符。</p></li><li><p>要将程序的不同部分分开，可使用空行，但是也不应该滥用，空行不会影响代码的运行，但会影响代码的可读性。</p></li></ul><p>在vscode中设置80字符参考线：</p><p>设置-文本编辑器-Rulers-在settings.json中编辑加入下列这段代码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;[python]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;editor.rulers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-number">80</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;editor.defaultFormatter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ms-python.python&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="1-3编码风格"><a href="#1-3编码风格" class="headerlink" title="1.3编码风格"></a>1.3编码风格</h3><ul><li><p>类名应采用驼峰命名法，即将类名中的每个单词的首字母都大写，而不使用下划线。</p></li><li><p>实例名和模块名都采用小写格式，并在单词之间加上下划线。</p></li><li><p>对于每个类，都应紧跟在类定义后面包含一个文档字符串</p></li><li><p>可使用空行来组织代码，但不要滥用</p></li><li><p>需要同时导入标准库中的模块和你编写的模块时，先编写导入标准库模块的import语句，再添加一个空行，然后编写导入你自己编写的模块的import语句</p></li></ul><h2 id="2-变量和数据类型"><a href="#2-变量和数据类型" class="headerlink" title="2.变量和数据类型"></a>2.变量和数据类型</h2><h3 id="2-1变量"><a href="#2-1变量" class="headerlink" title="2.1变量"></a>2.1变量</h3><p>变量的命名规则：</p><ul><li>变量名只能包含字母、数字和下划线。变量名可以字母或下划线打头，但不能以数字打头，例如，可将变量命名为message_1，但不能将其命名为1_message</li><li>变量名不能包含空格，但可使用下划线来分隔其中的单词。例如，变量名greeting_message可行，但变量名greeting message会引发错误</li><li>不要将Python关键字和函数名用作变量名，即不要使用Python保留用于特殊用途的单词，如print（大部分编辑器会有提示）</li><li>变量名应既简短又具有描述性。例如，name比n好，student_name比s_n好，name_length比length_of_persons_name好</li><li>慎用小写字母l和大写字母O，因为它们可能被人错看成数字1和0</li></ul><h3 id="2-2字符串"><a href="#2-2字符串" class="headerlink" title="2.2字符串"></a>2.2字符串</h3><p>字符串在python中表示为被引号括起来的，引号可以是单引号也可以是双引号。因此如果一个字符串内是有单引号或者撇号的，外面使用双引号，如果字符串内是要包含双引号的，外面用单引号。</p><p><strong>字符串的一些方法：</strong></p><ul><li><p><code>title()</code>,将每个单词的首字母改为大写</p></li><li><p><code>upper()</code>,将所有字母都改为大写</p></li><li><p><code>lower()</code>,将所有字母都改为小写</p></li><li><p><code>rstrip()</code>,在输出时删除字符串末尾的空白（空白包括空格、制表符<code>\t</code>、换行符<code>\n</code>等），只在输出是去除空白，实际并没有改变字符串的值</p><blockquote><p>&gt;&gt;&gt; <strong>favorite_language &#x3D; ‘python ‘</strong></p><p>&gt;&gt;&gt; <strong>favorite_language</strong> </p><p>‘python ‘ </p><p>&gt;&gt;&gt; <strong>favorite_language.rstrip()</strong></p><p>‘python’ </p><p>&gt;&gt;&gt; <strong>favorite_language</strong></p><p>‘python ‘ </p></blockquote></li><li><p><code>lstrip()</code>,在输出时删除字符串开头的空白</p></li><li><p><code>strip()</code>,在输出时删除字符串前后的空白</p></li></ul><h3 id="2-3数字"><a href="#2-3数字" class="headerlink" title="2.3数字"></a>2.3数字</h3><p><strong>整数</strong></p><p>Python使用两个乘号表示乘方运算，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">3</span> ** <span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p><strong>浮点数</strong></p><p>Python也存在小数位的精度问题，例如存在下面这些情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">0.2</span> + <span class="hljs-number">0.1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">0.30000000000000004</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">3</span>* <span class="hljs-number">0.1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">0.30000000000000004</span><br></code></pre></td></tr></table></figure><p><strong>str()函数</strong></p><p>通过str()函数来避免类型错误，在输出包含字符串及整数的信息时，将整数转换为字符串，从而实现信息的拼接</p><h3 id="2-3注释"><a href="#2-3注释" class="headerlink" title="2.3注释"></a>2.3注释</h3><p>养成写注释的习惯！养成写注释的习惯！养成写注释的习惯！重要的事情说三遍。</p><h2 id="3列表"><a href="#3列表" class="headerlink" title="3列表"></a>3列表</h2><p>列表由一系列按特定顺序排列的元素组成，在Python中，用方括号（[]）来表示列表，并用逗号来分隔其中的元素。</p><h3 id="3-1访问列表"><a href="#3-1访问列表" class="headerlink" title="3.1访问列表"></a>3.1访问列表</h3><p>列表是有序集合，只需要将该元素的位置或索引告诉Python即可，当你请求获取列表元素时，Python只返回该元素，而不包括方括号和引号。</p><ul><li>可以对从列表取出的元素使用字符串方法。</li><li>列表元素的索引从0开始，而不是从 1开始，这点要注意。</li><li>-1表示列表的最后一个元素</li></ul><h3 id="3-2列表的增、删、改"><a href="#3-2列表的增、删、改" class="headerlink" title="3.2列表的增、删、改"></a>3.2列表的增、删、改</h3><ul><li>修改：修改列表元素的语法与访问列表元素的语法类似。要修改列表元素，可指定列表名和要修改的元素的索引，再指定该元素的新值。</li><li>末尾添加元素：使用append()函数,可以在列表的末尾添加元素</li><li>列表中插入元素：使用insert()函数,可以在列表的任何位置添加新元素</li><li>列表中删除元素：使用del语句可以删除列表中的任何元素，前提是你要知道你删除的元素索引</li><li>使用pop()删除元素：pop()函数可删除列表末尾的元素，并允许使得它的值。</li><li>使用pop()删除任何位置元素：只需在括号中指定要删除的元素的索引即可。</li><li>根据值删除元素：不知道要从列表中删除的值所处的位置。如果你只知道要删除的元素的值，可使用方法remove()。<ul><li>注意：remove()只删除第一个指定的值。如果要删除的值可能在列表中出现多次，就需要使用循环来判断是否删除了所有这样的值</li></ul></li></ul><h3 id="3-3组织列表"><a href="#3-3组织列表" class="headerlink" title="3.3组织列表"></a>3.3组织列表</h3><p>创建的列表中，元素的排列顺序常常是无法预测的，因为你并非总能控制用户提供数据的顺序。这虽然在大多数情况下都是不可避免的，但你经常需要以特定的顺序呈现信息。有时候，你希望保留列表元素最初的排列顺序，而有时候又需要调整排列顺序。Python提供了很多组织列表的方式，可根据具体情况选用。</p><p><strong>永久排序</strong></p><p>可以通过sort()函数对列表进行排序，并且是永久性地修改了列表元素的排列顺序。</p><ul><li><code>sort()</code>:按字母顺序进行排列</li><li><code>sort(reverse=True)</code>:按字母顺序相反的顺序排列</li></ul><p><strong>临时排序</strong></p><p>要保留列表元素原来的排列顺序，同时以特定的顺序呈现它们，可使用函数sorted()。</p><p><strong>倒序打印</strong></p><p>要反转列表元素的排列顺序，可使用方法reverse()，永久性地修改列表元素的排列顺序，但可随时恢复到原来的排列顺序，为此只需对列表再次调用reverse()即可。</p><p><strong>确定列表的长度</strong></p><p>使用函数len()可快速获悉列表的长度</p><h2 id="4-操作列表"><a href="#4-操作列表" class="headerlink" title="4.操作列表"></a>4.操作列表</h2><p>如何<strong>遍历</strong>整个列表，这只需要几行代码，无论列表有多长。循环让你能够对列表的每个元素都采取一个或一系列相同的措施，从而高效地处理任何长度的列表，包括包含数千乃至数百万个元素的列表。</p><h3 id="4-1遍历整个列表"><a href="#4-1遍历整个列表" class="headerlink" title="4.1遍历整个列表"></a>4.1遍历整个列表</h3><p><strong>for循环</strong></p><ul><li>通过使用for循环，实现对列表的快速遍历。</li><li>在for循环中，可对每个元素执行任何操作。</li><li>在for循环后面，没有缩进的代码都只执行一次，而不会重复执行。</li></ul><h3 id="4-2避免缩进错误"><a href="#4-2避免缩进错误" class="headerlink" title="4.2避免缩进错误"></a>4.2避免缩进错误</h3><p>Python根据缩进来判断代码行与前一个代码行的关系。</p><h3 id="4-3创建数值列表"><a href="#4-3创建数值列表" class="headerlink" title="4.3创建数值列表"></a>4.3创建数值列表</h3><p>列表非常适合用于存储数字集合，而Python提供了很多工具，可帮助你高效地处理数字列表。</p><p><strong>range()函数</strong></p><p>函数range()让你能够轻松地生成一系列的数字。例如下面的语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(value)<br></code></pre></td></tr></table></figure><p>括号内的参数表示从1开始包括1到5结束但不包括5。</p><p><strong>使用range()创建数字列表</strong></p><p>可使用函数list()将range()的结果直接转换为列表，如果将range()作为list()的参数，输出将是一个数字列表。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">numbers=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>))<br><span class="hljs-built_in">print</span>(nubmers)<br></code></pre></td></tr></table></figure><p>numbers是一个列表，预期结果将会是：</p><blockquote><p>[1, 2, 3, 4, 5] </p></blockquote><p><strong>range()函数指定步长</strong></p><p>range()函数还可以指定步长，例如下面的代码将打印1-10内的偶数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">even_numbers=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-number">11</span>,<span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p>使用函数range()几乎能够创建任何需要的数字集，例如，如何创建一个列表，其中包含前10个整数（即1~10）的平方呢？在Python中，两个星号（**）表示乘方运算。下面的代码演示了如何将前10个整数的平方加入到一个列表中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">squares = []<br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>):<br>    square = value**<span class="hljs-number">2</span><br>    squares.append(square)<br><span class="hljs-built_in">print</span>(squares)<br></code></pre></td></tr></table></figure><p><strong>对数字列表执行简单的统计计算</strong></p><p>有几个专门用于处理数字列表的Python函数。例如，你可以轻松地找出数字列表的最大值、最小值和总和：</p><ul><li>min()</li><li>max()</li><li>sum()</li><li>···</li></ul><p><strong>列表解析</strong></p><p>列表解析将for循环和创建新元素的代码合并成一行，并自动附加新元素，下面这两段代码的结果是一样的：</p><p>使用for循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">squares=[]<br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>):<br>    squares.append(value**<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(squares)<br></code></pre></td></tr></table></figure><p>使用列表解析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">squares = [value**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>)]<br><span class="hljs-built_in">print</span>(squares)<br></code></pre></td></tr></table></figure><p>要使用这种语法，首先指定一个描述性的列表名，如squares；然后，指定一个左方括号，并定义一个表达式，用于生成你要存储到列表中的值。在这个示例中，表达式为value**2，它计算平方值。接下来，编写一个for循环，用于给表达式提供值，再加上右方括号。在这个示例中，for循环为for value in range(1,11)，它将值1~10提供给表达式value**2。请注意，这里的for语句末尾没有冒号。</p><h3 id="4-4使用列表的一部分"><a href="#4-4使用列表的一部分" class="headerlink" title="4.4使用列表的一部分"></a>4.4使用列表的一部分</h3><p>以处理列表的部分元素——Python称之为切片。</p><p><strong>切片</strong></p><p>要创建切片，可指定要使用的第一个元素和最后一个元素的索引要创建切片，可指定要使用的第一个元素和最后一个元素的索引，下面的范例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">players = [<span class="hljs-string">&#x27;charles&#x27;</span>, <span class="hljs-string">&#x27;martina&#x27;</span>, <span class="hljs-string">&#x27;michael&#x27;</span>, <span class="hljs-string">&#x27;florence&#x27;</span>, <span class="hljs-string">&#x27;eli&#x27;</span>] <br><span class="hljs-built_in">print</span>(players[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><ul><li><p>print(players[0:3])表示打印列表的一个切片，包含1-3名队员，输出的也是一个列表；</p></li><li><p>print(players[１:4])表示提取列表第2-4个元素</p></li><li><p>print(players[:4])表示从列表开头到第4个元素</p></li><li><p>print(players[2:])表示从第3个元素到最后</p></li><li><p>print(players[-3:])表示末尾的3个元素</p></li></ul><p><strong>遍历切片</strong></p><p>如果要遍历列表的部分元素，可在for循环中使用切片。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">players = [<span class="hljs-string">&#x27;charles&#x27;</span>, <span class="hljs-string">&#x27;martina&#x27;</span>, <span class="hljs-string">&#x27;michael&#x27;</span>, <span class="hljs-string">&#x27;florence&#x27;</span>, <span class="hljs-string">&#x27;eli&#x27;</span>] <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Here are the first three players on my team:&quot;</span>) <br><span class="hljs-keyword">for</span> player <span class="hljs-keyword">in</span> players[:<span class="hljs-number">3</span>]:<br>    <span class="hljs-built_in">print</span>(player.title())<br></code></pre></td></tr></table></figure><p><strong>复制列表</strong></p><p>要复制列表，可创建一个包含整个列表的切片，方法是同时省略起始索引和终止索引（[:]）。这让Python创建一个始于第一个元素，终止于最后一个元素的切片，即复制整个列表。</p><p>如果使用“&#x3D;”将一个列表赋给另一个列表，其表示的并非是将列表的内容复制到新的列表，仅是将两个列表指向同一个列表的内容。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">my_foods = [<span class="hljs-string">&#x27;pizza&#x27;</span>, <span class="hljs-string">&#x27;falafel&#x27;</span>, <span class="hljs-string">&#x27;carrot cake&#x27;</span>]<br>friend_foods = my_foods<br></code></pre></td></tr></table></figure><p>这里将my_foods赋给friend_foods，而不是将my_foods的副本存储到friend_foods。这种语法实际上是让Python将新变量friend_foods关联到包含在my_foods中的列表，因此这两个变量都指向同一个列表。鉴于此，当我们将’cannoli’添加到my_foods中时，它也将出现在friend_foods中；同样，虽然’ice cream’好像只被加入到了friend_foods中，但它也将出现在这两个列表中。输出表明，两个列表是相同的。</p><h3 id="4-5元组"><a href="#4-5元组" class="headerlink" title="4.5元组"></a>4.5元组</h3><p>Python将不能修改的值称为不可变的，而不可变的列表被称为元组。</p><p><strong>定义元组</strong></p><p>元组看起来犹如列表，但<strong>使用圆括号而不是方括号来标识</strong>。定义元组后，就可以使用索引来访问其元素，就像访问列表元素一样。</p><p><strong>遍历元组中的所有值</strong></p><p>像列表一样，也可以使用for循环来遍历元组中的所有值。</p><p><strong>修改元组变量</strong></p><p>虽然不能修改元组的元素，但可以给存储元组的变量赋值，从而实现重新定义元组。</p><p>相比于列表，元组是更简单的数据结构。如果需要存储的一组值在程序的整个生命周期内都不变，可使用元组。</p><h2 id="5-if语句"><a href="#5-if语句" class="headerlink" title="5.if语句"></a>5.if语句</h2><h3 id="5-1条件测试"><a href="#5-1条件测试" class="headerlink" title="5.1条件测试"></a>5.1条件测试</h3><p>每条if语句的核心都是一个值为True或False的表达式，这种表达式被称为条件测试。</p><p>Python根据条件测试的值为True还是False来决定是否执行if语句中的代码。如果条件测试的值为True，Python就执行紧跟在if语句后面的代码；如果为False，Python就忽略这些代码。</p><p><strong>检查是否相等</strong></p><p>使用两个等（&#x3D;&#x3D;）来进行相等判断，<code>==</code>运算符两边的值相等时返回True，否则返回False。</p><p><strong>检查是否相等时不考虑大小写</strong></p><p>在Python中检查是否相等时区分大小写，如果在判断时不需要考虑大小写，那我们可使用lower()函数后再进行比较。常见的场景类似如下：</p><blockquote><p>网站采用类似的方式让用户输入的数据符合特定的格式。例如，网站可能使用类似的测试来确保用户名是独一无二的，而并非只是与另一个用户名的大小写不同。用户提交新的用户名时，将把它转换为小写，并与所有既有用户名的小写版本进行比较。执行这种检查时，如果已经有用户名’john’（不管大小写如何），则用户提交用户名’John’时将遭到拒绝。</p></blockquote><p><strong>检查是否不相等</strong></p><p>使用惊叹号和等号(!&#x3D;)来表示不等于。</p><p><strong>比较数字</strong></p><p>条件语句中可包含各种数学比较，如小于、小于等于、大于、大于等于：</p><ul><li>&#x3D;</li><li>&lt;&#x3D;</li><li>&gt;</li><li>&gt;&#x3D;</li><li>!&#x3D;</li></ul><p><strong>检查多个条件</strong></p><p>你可能想同时检查多个条件，例如，有时候你需要在两个条件都为True时才执行相应的操作，而有时候你只要求一个条件为True时就执行相应的操作。在这些情况下，关键字and和or可助你一臂之力。</p><ul><li><code>and</code>:只有两个都为True时才为True</li><li><code>or</code>:只要有一个为True时就为True，两个条件都为False是才返回False</li></ul><p><strong>检查特定值是否包含在列表中</strong></p><p>要判断特定的值是否已包含在列表中，可使用关键字<code>in</code></p><p><strong>检查特定值是否不包含在列表中</strong></p><p>要判断特定的值是否<strong>不包含</strong>在列表中，可使用关键字<code>not in</code></p><p><strong>布尔表达式</strong></p><p>布尔表达式，是条件测试的别名。与条件表达式一样，布尔表达式的结果要么为True，要么为False。</p><h3 id="5-2-if语句"><a href="#5-2-if语句" class="headerlink" title="5.2 if语句"></a>5.2 if语句</h3><p><strong>if</strong></p><p>在if语句中，缩进的作用与for循环中相同。如果测试通过了，将执行if语句后面所有缩进的代码行，否则将忽略它们</p><p><strong>if-else</strong></p><p>if-else语句块类似于简单的if语句，但其中的else语句让你能够指定条件测试未通过时要执行的操作。</p><p>if-else结构非常适合用于要让Python执行两种操作之一的情形。在这种简单的if-else结构中，总是会执行两个操作中的一个。</p><p><strong>if-elif-else</strong></p><p>经常需要检查超过两个的情形，为此可使用Python提供的if-elif-else结构。</p><p>Python只执行if-elif-else结构中的一个代码块，它依次检查每个条件测试，直到遇到通过了的条件测试。</p><p><strong>省略else代码块</strong></p><p>Python并不要求if-elif结构后面必须有else代码块。</p><p>else是一条包罗万象的语句，只要不满足任何if或elif中的条件测试，其中的代码就会执行，这可能会引入无效甚至恶意的数据。</p><p><strong>测试多个条件</strong></p><p>在可能有多个条件为True，且你需要在每个条件为True时都采取相应措施时，适合使用这种方法。</p><h3 id="5-4使用if语句处理列表"><a href="#5-4使用if语句处理列表" class="headerlink" title="5.4使用if语句处理列表"></a>5.4使用if语句处理列表</h3><p>通过结合使用if语句和列表，可完成一些有趣的任务：对列表中特定的值做特殊处理。</p><h3 id="5-5设置if语句的格式"><a href="#5-5设置if语句的格式" class="headerlink" title="5.5设置if语句的格式"></a>5.5设置if语句的格式</h3><p>在条件测试的格式设置方面，PEP 8提供的唯一建议是，在诸如&#x3D;&#x3D;、&gt;&#x3D;和&lt;&#x3D;等比较运算符两边各添加一个空格。</p><h2 id="6-字典"><a href="#6-字典" class="headerlink" title="6.字典"></a>6.字典</h2><p>在Python中，字典是一系列键—值对。每个键都与一个值相关联，你可以使用键来访问与之相关联的值。与键相关联的值可以是数字、字符串、列表乃至字典。事实上，可将任何Python对象用作字典中的值。</p><p><strong>在Python中，字典用放在花括号{}中的一系列键—值对表示</strong></p><p>键—值对是两个相关联的值。指定键时，Python将返回与之相关联的值。键和值之间用冒号分隔，而键—值对之间用逗号分隔。在字典中，你想<strong>存储多少个键—值对都可以</strong>。</p><h3 id="6-1使用字典"><a href="#6-1使用字典" class="headerlink" title="6.1使用字典"></a>6.1使用字典</h3><p><strong>添加键-值对</strong></p><p>字典是一种动态结构，可随时在其中添加键—值对。要添加键—值对，可依次指定字典名、用方括号括起的键和相关联的值。</p><p><strong>修改字典的值</strong></p><p>要修改字典中的值，可依次指定字典名、用方括号括起的键以及与该键相关联的新值。</p><p><strong>删除键-值对</strong></p><p>对于字典中不再需要的信息，可使用del语句将相应的键—值对彻底删除。<strong>使用del语句时，必须指定字典名和要删除的键。</strong></p><p><strong>由类似对象组成的字典</strong></p><p>字典存储的是一个对象的多种信息，但你也可以使用字典来存储众多对象的同一种信息。</p><p>确定需要使用多行来定义字典时，在输入左花括号后按回车键，再在下一行缩进四个空格，指定第一个键—值对，并在它后面加上一个逗号</p><h3 id="6-2遍历字典"><a href="#6-2遍历字典" class="headerlink" title="6.2遍历字典"></a>6.2遍历字典</h3><p>通过for语句结合字典的方法items()，实现对字典的遍历，范例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> xxx.items()<br></code></pre></td></tr></table></figure><p>在不需要使用字典的值时，可以使用方法keys()获取字典中的key，当然在实际应用中，可以不加上keys()方法。</p><p><strong>按顺序遍历字典中的所有键</strong></p><p>字典总是明确地记录键和值之间的关联关系，但获取字典的元素时，获取顺序是不可预测的。要以特定的顺序返回元素，一种办法是在for循环中对返回的键进行排序，为此，可使用函数sorted()来获得按特定顺序排列的键列表的副本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(dictionary.keys()):<br></code></pre></td></tr></table></figure><p><strong>遍历字典中的所有值</strong></p><p>如果你感兴趣的主要是字典包含的值，可使用方法values()，它返回一个值列表，而不包含任何键。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> dictionary.values():<br></code></pre></td></tr></table></figure><p>这种做法提取字典中所有的值，而没有考虑是否重复。涉及的值很少时，这也许不是问题，但如果被调查者很多，最终的列表可能包含大量的重复项。为剔除重复项，可使用集合（set）。</p><p>集合类似于列表，但每个元素都必须是独一无二的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span>(dictionary.values()):<br></code></pre></td></tr></table></figure><p>通过对包含重复元素的列表调用set()，可让Python找出列表中独一无二的元素，并使用这些元素来创建一个集合.</p><h3 id="6-4嵌套"><a href="#6-4嵌套" class="headerlink" title="6.4嵌套"></a>6.4嵌套</h3><p>有时候，需要将一系列字典存储在列表中，或将列表作为值存储在字典中，这称为嵌套。你可以在列表中嵌套字典、在字典中嵌套列表甚至在字典中嵌套字典。</p><p><strong>字典列表</strong></p><p>经常需要在列表中包含大量的字典，而其中每个字典都包含特定对象的众多信息。例如，你可能需要为网站的每个用户创建一个字典，并将这些字典存储在一个名为users的列表中。在这个列表中，所有字典的结构都相同，因此你可以遍历这个列表，并以相同的方式处理其中的每个字典。</p><p><strong>在字典中存储列表</strong></p><p>有时候，需要将列表存储在字典中，而不是将字典存储在列表中。</p><p>每当需要在字典中将一个键关联到多个值时，都可以在字典中嵌套一个列表</p><p><strong>在字典中存储字典</strong></p><p>可在字典中嵌套字典，但这样做时，代码可能很快复杂起来。</p><h2 id="7-用户输入和while循环"><a href="#7-用户输入和while循环" class="headerlink" title="7.用户输入和while循环"></a>7.用户输入和while循环</h2><h3 id="7-1函数input-的工作原理"><a href="#7-1函数input-的工作原理" class="headerlink" title="7.1函数input()的工作原理"></a>7.1函数input()的工作原理</h3><p>函数input()让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其存储在一个变量中，以方便你使用。</p><p><strong>编写清晰的程序</strong></p><p>每当你使用函数input()时，都应指定清晰而易于明白的提示，准确地指出你希望用户提供什么样的信息——指出用户该输入任何信息的提示都行。</p><p>有时候，提示可能超过一行，例如，你可能需要指出获取特定输入的原因。在这种情况下，可将提示存储在一个变量中，再将该变量传递给函数input()，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">prompt = <span class="hljs-string">&quot;If you tell us who you are, we can personalize the messages you see.&quot;</span> <br>prompt += <span class="hljs-string">&quot;\nWhat is your first name? &quot;</span><br>name = <span class="hljs-built_in">input</span>(prompt)<br></code></pre></td></tr></table></figure><p><strong>使用int()来获取数值输入</strong></p><p>使用函数input()时，Python将用户输入解读为字符串，如何输入的数字需要进行后续的计算时，可使用函数int()，它让Python将输入视为数值。</p><p>函数int()将数字的字符串表示转换为数值表示。</p><p><strong>求模运算符</strong></p><p>处理数值信息时，求模运算符（%）是一个很有用的工具，它将两个数相除并返回余数。</p><p>求模运算符不会指出一个数是另一个数的多少倍，而只指出余数是多少。</p><h3 id="7-2while循环"><a href="#7-2while循环" class="headerlink" title="7.2while循环"></a>7.2while循环</h3><p>for循环用于针对集合中的每个元素都执行一个代码块，而while循环不断地运行，直到指定的条件不满足为止。</p><p>在要求很多条件都满足才继续运行的程序中，可定义一个变量，用于判断整个程序是否处于</p><p>活动状态。这个变量被称为标志，充当了程序的交通信号灯。你可让程序在标志为True时继续运行，并在任何事件导致标志的值为False时让程序停止运行。这样，在while语句中就只需检查一个条件——标志的当前值是否为True，并将所有测试（是否发生了应将标志设置为False的事件）都放在其他地方，从而让程序变得更为整洁。</p><p><strong>使用break退出循环</strong></p><p>要立即退出while循环，不再运行循环中余下的代码，也不管条件测试的结果如何，可使用break语句。break语句用于控制程序流程，可使用它来控制哪些代码行将执行，哪些代码行不执行，从而让程序按你的要求执行你要执行的代码。</p><p><strong>注意</strong> 在任何Python循环中都可使用break语句。例如，可使用break语句来退出遍历列表或字典的for循环。</p><p><strong>在循环中使用 continue</strong></p><p>要返回到循环开头，并根据条件测试结果决定是否继续执行循环，可使用continue语句，它不像break语句那样不再执行余下的代码并退出整个循环，而是退出当前循环，并继续执行下一个循环</p><p><strong>避免无限循环</strong></p><p>每个while循环都必须有停止运行的途径，这样才不会没完没了地执行下去</p><h3 id="7-3使用while循环来处理列表和字典"><a href="#7-3使用while循环来处理列表和字典" class="headerlink" title="7.3使用while循环来处理列表和字典"></a>7.3使用while循环来处理列表和字典</h3><p>for循环是一种遍历列表的有效方式，但在for循环中不应修改列表，否则将导致Python难以跟踪其中的元素。要在遍历列表的同时对其进行修改，可使用while循环。通过将while循环同列表和字典结合起来使用，可收集、存储并组织大量输入，供以后查看和显示。</p><p><strong>在列表之间移动元素</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 首先，创建一个待验证用户列表</span><br><span class="hljs-comment"># 和一个用于存储已验证用户的空列表</span><br>unconfirmed_users = [<span class="hljs-string">&#x27;alice&#x27;</span>, <span class="hljs-string">&#x27;brian&#x27;</span>, <span class="hljs-string">&#x27;candace&#x27;</span>] <br>confirmed_users = [] <br><span class="hljs-comment"># 验证每个用户，直到没有未验证用户为止</span><br><span class="hljs-comment"># 将每个经过验证的列表都移到已验证用户列表中</span><br><span class="hljs-keyword">while</span> unconfirmed_users: <br>current_user = unconfirmed_users.pop()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Verifying user: &quot;</span> + current_user.title()) <br>confirmed_users.append(current_user) <br><span class="hljs-comment"># 显示所有已验证的用户</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nThe following users have been confirmed:&quot;</span>) <br><span class="hljs-keyword">for</span> confirmed_user <span class="hljs-keyword">in</span> confirmed_users: <br><span class="hljs-built_in">print</span>(confirmed_user.title())<br></code></pre></td></tr></table></figure><p><strong>删除包含特定值的所有列表元素</strong></p><p>我们使用函数remove()来删除列表中的特定值，这之所以可行，是因为要删除的值在列表中只出现了一次。如果要删除列表中所有包含特定值的元素，该怎么办呢？</p><p>假设你有一个宠物列表，其中包含多个值为’cat’的元素。要删除所有这些元素，可不断运行一个while循环，直到列表中不再包含值’cat’，如下所示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">pets = [<span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;goldfish&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;rabbit&#x27;</span>, <span class="hljs-string">&#x27;cat&#x27;</span>] <br><span class="hljs-built_in">print</span>(pets) <br><span class="hljs-keyword">while</span> <span class="hljs-string">&#x27;cat&#x27;</span> <span class="hljs-keyword">in</span> pets: <br>    pets.remove(<span class="hljs-string">&#x27;cat&#x27;</span>) <br> <br><span class="hljs-built_in">print</span>(pets)<br></code></pre></td></tr></table></figure><p><strong>使用用户输入来填充字典</strong></p><p>看范例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">responses = &#123;&#125; <br><span class="hljs-comment"># 设置一个标志，指出调查是否继续</span><br>polling_active = <span class="hljs-literal">True</span> <br><span class="hljs-keyword">while</span> polling_active: <br> <span class="hljs-comment"># 提示输入被调查者的名字和回答</span><br>    name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\nWhat is your name? &quot;</span>) <br>    response = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Which mountain would you like to climb someday? &quot;</span>) <br> <br> <span class="hljs-comment"># 将答卷存储在字典中</span><br>    responses[name] = response <br> <br> <span class="hljs-comment"># 看看是否还有人要参与调查</span><br>    repeat = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Would you like to let another person respond? (yes/ no) &quot;</span>) <br>    <span class="hljs-keyword">if</span> repeat == <span class="hljs-string">&#x27;no&#x27;</span>: <br>        polling_active = <span class="hljs-literal">False</span> <br> <br><span class="hljs-comment"># 调查结束，显示结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n--- Poll Results ---&quot;</span>) <br><span class="hljs-keyword">for</span> name, response <span class="hljs-keyword">in</span> responses.items(): <br>    <span class="hljs-built_in">print</span>(name + <span class="hljs-string">&quot; would like to climb &quot;</span> + response + <span class="hljs-string">&quot;.&quot;</span>)<br></code></pre></td></tr></table></figure><p>这个程序首先定义了一个空字典（responses），并设置了一个标志（polling_active），用于指出调查是否继续。只要polling_active为True，Python就运行while循环中的代码。</p><h2 id="8-函数"><a href="#8-函数" class="headerlink" title="8.函数"></a>8.函数</h2><p>函数让你能够将程序分成多个很小的部分，其中每部分都负责完成一项具体任务。你可以根据需要调用同一个函数任意次，还可将函数存储在独立的文件中。</p><p>使用函数可让你编写的代码效率更高，更容易维护和排除故障，还可在众多不同的程序中重用。</p><h3 id="8-1定义函数"><a href="#8-1定义函数" class="headerlink" title="8.1定义函数"></a>8.1定义函数</h3><p>文档字符串用三引号括起（”””这是函数的说明”””），Python使用它们来生成有关程序中函数的文档。</p><ul><li>形参——函数完成其工作所需的一项信息</li><li>实参——是调用函数时传递给函数的信息</li></ul><h3 id="8-2传递参数"><a href="#8-2传递参数" class="headerlink" title="8.2传递参数"></a>8.2传递参数</h3><p>鉴于函数定义中可能包含多个形参，因此函数调用中也可能包含多个实参。向函数传递实参的方式很多，可使用位置实参，这要求实参的顺序与形参的顺序相同；也可使用关键字实参，其中每个实参都由变量名和值组成；还可使用列表和字典。</p><p><strong>位置实参</strong></p><p>你调用函数时，Python必须将函数调用中的每个实参都关联到函数定义中的一个形参。为此，最简单的关联方式是基于实参的顺序。这种关联方式被称为位置实参。</p><p><strong>关键字实参</strong></p><p>关键字实参是传递给函数的名称—值对。你直接在实参中将名称和值关联起来了，因此向函数传递实参时不会混淆（不会得到名为Hamster的harry这样的结果）。关键字实参让你无需考虑函数调用中的实参顺序，还清楚地指出了函数调用中各个值的用途。</p><p>关键字实参的顺序无关紧要，因为Python知道各个值该存储到哪个形参中。</p><p><strong>默认值</strong></p><p>编写函数时，可给每个形参指定默认值。在调用函数中给形参提供了实参时，Python将使用指定的实参值；否则，将使用形参的默认值。因此，给形参指定默认值后，可在函数调用中省略相应的实参。使用默认值可简化函数调用，还可清楚地指出函数的典型用法。</p><h3 id="8-3返回值"><a href="#8-3返回值" class="headerlink" title="8.3返回值"></a>8.3返回值</h3><p>函数并非总是直接显示输出，相反，它可以处理一些数据，并返回一个或一组值。函数返回的值被称为返回值。</p><p>在函数中，可使用return语句将值返回到调用函数的代码行。返回值让你能够将程序的大部分繁重工作移到函数中去完成，从而简化主程序。</p><p>有时候，需要让实参变成可选的，这样使用函数的人就只需在必要时才提供额外的信息。可使用默认值来让实参变成可选的。</p><p>函数可返回任何类型的值，包括列表和字典等较复杂的数据结构。</p><h3 id="8-4传递列表"><a href="#8-4传递列表" class="headerlink" title="8.4传递列表"></a>8.4传递列表</h3><p>向函数传递列表很有用，这种列表包含的可能是名字、数字或更复杂的对象（如字典）。将列表传递给函数后，函数就能直接访问其内容。</p><p><strong>在函数中修改列表</strong></p><p>将列表传递给函数后，函数就可对其进行修改。在函数中对这个列表所做的任何修改都是永久性的，这让你能够高效地处理大量的数据。</p><ul><li><strong>每个函数都应只负责一项具体的工作</strong></li></ul><p><strong>禁止函数修改列表</strong></p><p>可向函数传递列表的副本而不是原件；这样函数所做的任何修改都只影响副本，而丝毫不影响原件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">function_name(list_name[:])<br></code></pre></td></tr></table></figure><h3 id="8-5传递任意数量的实参"><a href="#8-5传递任意数量的实参" class="headerlink" title="8.5传递任意数量的实参"></a>8.5传递任意数量的实参</h3><p>有时候，你预先不知道函数需要接受多少个实参，好在Python允许函数从调用语句中收集任意数量的实参</p><p>用<code>*形参名</code>的形参表示可以接收任意数量的实参，并装到元组中。注意，Python将实参封装到一个元组中，即便函数只收到一个值也如此。范例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_pizza</span>(<span class="hljs-params">*toppings</span>): <br> <span class="hljs-string">&quot;&quot;&quot;概述要制作的比萨&quot;&quot;&quot;</span> <br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nMaking a pizza with the following toppings:&quot;</span>) <br>     <span class="hljs-keyword">for</span> topping <span class="hljs-keyword">in</span> toppings: <br>         <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;- &quot;</span> + topping) <br> <br>make_pizza(<span class="hljs-string">&#x27;pepperoni&#x27;</span>) <br>make_pizza(<span class="hljs-string">&#x27;mushrooms&#x27;</span>, <span class="hljs-string">&#x27;green peppers&#x27;</span>, <span class="hljs-string">&#x27;extra cheese&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>如果要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后</strong>。Python先匹配位置实参和关键字实参，再将余下的实参都收集到最后一个形参中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_pizza</span>(<span class="hljs-params">size, *toppings</span>): <br> <span class="hljs-string">&quot;&quot;&quot;概述要制作的比萨&quot;&quot;&quot;</span> <br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nMaking a &quot;</span> + <span class="hljs-built_in">str</span>(size) + <br>         <span class="hljs-string">&quot;-inch pizza with the following toppings:&quot;</span>) <br>     <span class="hljs-keyword">for</span> topping <span class="hljs-keyword">in</span> toppings: <br>         <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;- &quot;</span> + topping) <br> <br>make_pizza(<span class="hljs-number">16</span>, <span class="hljs-string">&#x27;pepperoni&#x27;</span>) <br>make_pizza(<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;mushrooms&#x27;</span>, <span class="hljs-string">&#x27;green peppers&#x27;</span>, <span class="hljs-string">&#x27;extra cheese&#x27;</span>)<br></code></pre></td></tr></table></figure><p>有时候，需要接受任意数量的实参，但预先不知道传递给函数的会是什么样的信息。在这种情况下，可将函数编写成能够接受任意数量的键—值对——调用语句提供了多少就接受多少。</p><p><strong>用<code>**形参</code>接收任意数量的关键字实参</strong>,范例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_profile</span>(<span class="hljs-params">first, last, **user_info</span>): <br>    <span class="hljs-string">&quot;&quot;&quot;创建一个字典，其中包含我们知道的有关用户的一切&quot;&quot;&quot;</span> <br>    profile = &#123;&#125; <br>    profile[<span class="hljs-string">&#x27;first_name&#x27;</span>] = first <br>    profile[<span class="hljs-string">&#x27;last_name&#x27;</span>] = last <br>    <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> user_info.items():<br>        profile[key] = value <br>    <span class="hljs-keyword">return</span> profile <br>user_profile = build_profile(<span class="hljs-string">&#x27;albert&#x27;</span>, <span class="hljs-string">&#x27;einstein&#x27;</span>, location=<span class="hljs-string">&#x27;princeton&#x27;</span>, field=<span class="hljs-string">&#x27;physics&#x27;</span>) <br><span class="hljs-built_in">print</span>(user_profile)<br></code></pre></td></tr></table></figure><p>形参**user_info中的两个星号让Python创建一个名为user_info的空字典，并将收到的所有名称—值对都封装到这个字典中</p><h3 id="8-6将函数存储在模块中"><a href="#8-6将函数存储在模块中" class="headerlink" title="8.6将函数存储在模块中"></a>8.6将函数存储在模块中</h3><p>函数的优点之一是，使用它们可将代码块与主程序分离。通过给函数指定描述性名称，可让主程序容易理解得多。你还可以更进一步，将函数存储在被称为模块的独立文件中，再将模块导入到主程序中。import语句允许在当前运行的程序文件中使用模块中的代码。</p><p><strong>导入整体模块</strong></p><p>要让函数是可导入的，得先创建模块。模块是扩展名为.py的文件，包含要导入到程序中的代码。</p><p>只需编写一条import语句并在其中指定模块名，就可在程序中使用该模块中的所有函数。如果你使用这种import语句导入了名为module_name.py的整个模块，就可使用下面的语法来使用其中任何一个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">module_name.fuction_name()<br></code></pre></td></tr></table></figure><p><strong>导入特定的函数</strong></p><p>还可以导入模块中的特定函数，语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> module_name <span class="hljs-keyword">import</span> fuction_name<br></code></pre></td></tr></table></figure><p>若使用这种语法，调用函数时就无需使用句点，与使用主体程序中的函数是一样的用法。</p><p><strong>使用as给函数指定别名</strong></p><p>如果要导入的函数的名称可能与程序中现有的名称冲突，或者函数的名称太长，可指定简短而独一无二的别名——函数的另一个名称，类似于外号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> module_name <span class="hljs-keyword">import</span> fuction_name <span class="hljs-keyword">as</span> fn<br></code></pre></td></tr></table></figure><p><strong>使用as给模块指定别名</strong></p><p>还可以给模块指定别名。通过给模块指定简短的别名（如给模块pizza指定别名p），让你能够更轻松地调用模块中的函数。引用模块内的函数的名称还是没有变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> module_name <span class="hljs-keyword">as</span> mn<br></code></pre></td></tr></table></figure><p><strong>导入模块中的所有函数</strong></p><p>使用星号（*）运算符可让Python导入模块中的所有函数。</p><p>import语句中的星号让Python将模块pizza中的每个函数都复制到这个程序文件中。由于导入了每个函数，可通过名称来调用每个函数，而无需使用句点表示法。但是强烈不建议这么做。</p><p><em>最佳的做法是，要么只导入你需要使用的函数，要么导入整个模块并使用句点表示法</em></p><h3 id="8-7函数编写指南"><a href="#8-7函数编写指南" class="headerlink" title="8.7函数编写指南"></a>8.7函数编写指南</h3><ul><li>编写函数时，需要牢记几个细节。应给函数指定描述性名称，且只在其中使用小写字母和下划线。</li><li>每个函数都应包含简要地阐述其功能的注释，该注释应紧跟在函数定义后面，并采用文档字符串格式。</li><li>给形参指定默认值时，等号两边不要有空格。</li><li>如果程序或模块包含多个函数，可使用两个空行将相邻的函数分开，这样将更容易知道前一个函数在什么地方结束，下一个函数从什么地方开始。</li><li>所有的import语句都应放在文件开头，唯一例外的情形是，在文件开头使用了注释来描述整个程序。</li></ul><h2 id="9-类"><a href="#9-类" class="headerlink" title="9.类"></a>9.类</h2><p>Python 中的类（Class）是一种面向对象编程（Object-Oriented Programming，简称 OOP）的概念，它允许我们通过创建对象来组织和管理代码。类是一种抽象的数据类型，用于封装数据和行为。</p><p>类定义了一组属性和方法，描述了对象的特征和行为。对象是类的实例，通过实例化类可以创建具体的对象。</p><p>下面是一个简单的类的示例，以便更好地理解：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># 定义一个简单的类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-comment"># 类属性</span><br>    species = <span class="hljs-string">&#x27;Human&#x27;</span><br><br>    <span class="hljs-comment"># 初始化方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span>, name, age</span>):<br>        <span class="hljs-comment"># 实例属性</span><br>        <span class="hljs-variable language_">self</span>.name = name<br>        <span class="hljs-variable language_">self</span>.age = age<br><br>    <span class="hljs-comment"># 实例方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        print(f<span class="hljs-string">&quot;Hello, my name is &#123;self.name&#125; and I&#x27;m &#123;self.age&#125; years old.&quot;</span>)<br><br><span class="hljs-comment"># 创建对象</span><br>person1 = <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">25</span>)<br>person2 = <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">30</span>)<br><br><span class="hljs-comment"># 调用对象的方法</span><br>person1.greet()  <span class="hljs-comment"># 输出: Hello, my name is Alice and I&#x27;m 25 years old.</span><br>person2.greet()  <span class="hljs-comment"># 输出: Hello, my name is Bob and I&#x27;m 30 years old.</span><br></code></pre></td></tr></table></figure><p>在上面的示例中，我们定义了一个名为 <code>Person</code> 的类。它具有类属性 <code>species</code>，表示人类这个类别的物种。类还定义了一个初始化方法 <code>__init__()</code>，它在创建对象时被调用，用于设置对象的初始状态。<code>__init__()</code> 方法的第一个参数是 <code>self</code>，它表示类的实例本身。通过 <code>self</code> 可以访问和设置对象的属性。</p><p>类还定义了一个实例方法 <code>greet()</code>，用于打印个人信息。在调用实例方法时，不需要显式传递 <code>self</code> 参数，Python 会自动将对象实例作为第一个参数传递给方法。</p><p>通过创建类的实例，我们可以创建具体的对象。在上面的示例中，我们创建了两个 <code>Person</code> 类的对象 <code>person1</code> 和 <code>person2</code>。每个对象都具有自己的属性值，可以调用对象的方法来执行特定的操作。</p><p>类是面向对象编程中的核心概念之一，它提供了一种组织和封装代码的方式，使得代码更具可维护性、可扩展性和复用性。通过定义类和创建对象，我们可以按照面向对象的思想来编写更优雅和灵活的代码。</p><h3 id="9-1创建和使用类"><a href="#9-1创建和使用类" class="headerlink" title="9.1创建和使用类"></a>9.1创建和使用类</h3><ul><li>根据约定，在Python中，首字母大写的名称指的是类。</li><li>类中的函数称为方法；你前面学到的有关函数的一切都适用于方法，就目前而言，唯一重要的差别是调用方法的方式</li><li>_<em>init</em>_()是一个特殊的方法，创建新实例时，Python都会自动运行它</li><li>_<em>init</em>_()的形参self必不可少，还必须位于其他形参的前面</li><li>每个与类相关联的方法调用都自动传递实参self，它是一个指向实例本身的引用，让实例能够访问类中的属性和方法</li><li>以self为前缀的变量都可供类中的所有方法使用，我们还可以通过类的任何实例来访问这些变量</li><li>可将类视为有关如何创建实例的说明</li><li>首字母大写的名称指的是类，而小写的名称指的是根据类创建的实例</li></ul><h3 id="9-2使用类和实例"><a href="#9-2使用类和实例" class="headerlink" title="9.2使用类和实例"></a>9.2使用类和实例</h3><p>类中的每个属性都必须有初始值，哪怕这个值是0或空字符串。在有些情况下，如设置默认值时，在方法__init__()内指定这种初始值是可行的；如果你对某个属性这样做了，就无需包含为它提供初始值的形参。</p><p>可以以三种不同的方式修改属性的值：直接通过实例进行修改；通过方法进行设置；通过方法进行递增（增加特定的值）。</p><p><strong>直接修改属性的值</strong></p><p>要修改属性的值，最简单的方式是通过实例直接访问它。</p><p><strong>通过方法修改属性的值</strong></p><p><strong>通过方法对属性的值进行递增</strong></p><p>有时候需要将属性值递增特定的量，而不是将其设置为全新的值</p><h3 id="9-3继承"><a href="#9-3继承" class="headerlink" title="9.3继承"></a>9.3继承</h3><p>编写类时，并非总是要从空白开始。如果你要编写的类是另一个现成类的特殊版本，可使用继承。一个类继承另一个类时，它将自动获得另一个类的所有属性和方法；原有的类称为父类，而新类称为子类。子类继承了其父类的所有属性和方法，同时还可以定义自己的属性和方法。</p><p><strong>子类的方法_<em>init</em>_()</strong></p><p>创建子类的实例时，Python首先需要完成的任务是给父类的所有属性赋值。为此，子类的方法__init__()需要父类施以援手。</p><p>看下面这个范例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        self.make = make<br>        self.model = model<br>        self.year = year<br>        self.odometer_reading = <span class="hljs-number">0</span><br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_descriptive_name</span>(<span class="hljs-params">self</span>):<br>        long_name = <span class="hljs-built_in">str</span>(self.year) + <span class="hljs-string">&#x27; &#x27;</span> + self.make + <span class="hljs-string">&#x27; &#x27;</span> + self.model<br>        <span class="hljs-keyword">return</span> long_name.title()<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_odometer</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This car has &quot;</span> + <span class="hljs-built_in">str</span>(self.odometer_reading) + <span class="hljs-string">&quot; miles on it.&quot;</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_odometer</span>(<span class="hljs-params">self, mileage</span>):<br>        <span class="hljs-keyword">if</span> mileage &gt;= self.odometer_reading:<br>            self.odometer_reading = mileage<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">increment_odometer</span>(<span class="hljs-params">self, miles</span>):<br>        self.odometer_reading += miles<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElectricCar</span>(<span class="hljs-title class_ inherited__">Car</span>): <br>    <span class="hljs-string">&quot;&quot;&quot;电动汽车的独特之处&quot;&quot;&quot;</span> <br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>): <br>        <span class="hljs-string">&quot;&quot;&quot;初始化父类的属性&quot;&quot;&quot;</span> <br>        <span class="hljs-built_in">super</span>().__init__(make, model, year)<br></code></pre></td></tr></table></figure><ul><li>创建子类时，父类必须包含在当前文件中，且位于子类前面</li><li>定义子类时，必须在括号内指定父类的名称</li><li>方法__init__()接受创建Car实例所需的信息</li><li>super()是一个特殊函数，帮助Python将父类和子类关联起来。这行代码让Python调用ElectricCar的父类的方法__init__()，让ElectricCar实例包含父类的所有属性。父类也称为超类（superclass），名称super因此而得名</li></ul><p><strong>给子类定义属性和方法</strong></p><p>让一个类继承另一个类后，可添加区分子类和父类所需的新属性和方法。</p><p><strong>重写父类的方法</strong></p><p>对于父类的方法，只要它不符合子类模拟的实物的行为，都可对其进行重写。为此，可在子类中定义一个这样的方法，即它与要重写的父类方法同名。这样，Python将不会考虑这个父类方法，而只关注你在子类中定义的相应方法。</p><p><em>使用继承时，可让子类保留从父类那里继承而来的精华，并剔除不需要的糟粕</em></p><p><strong>将实例用作属性</strong></p><p>使用代码模拟实物时，你可能会发现自己给类添加的细节越来越多：属性和方法清单以及文件都越来越长。在这种情况下，可能需要将类的一部分作为一个独立的类提取出来。你可以将大型类拆分成多个协同工作的小类。</p><p>例如，不断给ElectricCar类添加细节时，我们可能会发现其中包含很多专门针对汽车电瓶的属性和方法。在这种情况下，我们可将这些属性和方法提取出来，放到另一个名为Battery的类中，并将一个Battery实例用作ElectricCar类的一个属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>):<br>        self.make = make<br>        self.model = model<br>        self.year = year<br>        self.odometer_reading = <span class="hljs-number">0</span><br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_descriptive_name</span>(<span class="hljs-params">self</span>):<br>        long_name = <span class="hljs-built_in">str</span>(self.year) + <span class="hljs-string">&#x27; &#x27;</span> + self.make + <span class="hljs-string">&#x27; &#x27;</span> + self.model<br>        <span class="hljs-keyword">return</span> long_name.title()<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_odometer</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This car has &quot;</span> + <span class="hljs-built_in">str</span>(self.odometer_reading) + <span class="hljs-string">&quot; miles on it.&quot;</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_odometer</span>(<span class="hljs-params">self, mileage</span>):<br>        <span class="hljs-keyword">if</span> mileage &gt;= self.odometer_reading:<br>            self.odometer_reading = mileage<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">increment_odometer</span>(<span class="hljs-params">self, miles</span>):<br>        self.odometer_reading += miles<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Battery</span>(): <br>    <span class="hljs-string">&quot;&quot;&quot;一次模拟电动汽车电瓶的简单尝试&quot;&quot;&quot;</span> <br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, battery_size=<span class="hljs-number">70</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;初始化电瓶的属性&quot;&quot;&quot;</span> <br>        self.battery_size = battery_size <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">describe_battery</span>(<span class="hljs-params">self</span>): <br>        <span class="hljs-string">&quot;&quot;&quot;打印一条描述电瓶容量的消息&quot;&quot;&quot;</span> <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This car has a &quot;</span> + <span class="hljs-built_in">str</span>(self.battery_size) + <span class="hljs-string">&quot;-kWh battery.&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ElectricCar</span>(<span class="hljs-title class_ inherited__">Car</span>): <br>    <span class="hljs-string">&quot;&quot;&quot;电动汽车的独特之处&quot;&quot;&quot;</span> <br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, make, model, year</span>): <br>        <span class="hljs-string">&quot;&quot;&quot;初始化父类的属性&quot;&quot;&quot;</span> <br>        <span class="hljs-built_in">super</span>().__init__(make, model, year)<br>        self.battery = Battery()<br><br>my_tesla = ElectricCar(<span class="hljs-string">&#x27;tesla&#x27;</span>, <span class="hljs-string">&#x27;model s&#x27;</span>, <span class="hljs-number">2016</span>) <br><span class="hljs-built_in">print</span>(my_tesla.get_descriptive_name()) <br>my_tesla.battery.describe_battery()<br></code></pre></td></tr></table></figure><ul><li>我们定义了一个名为Battery的新类，它没有继承任何类</li><li>法__init__()除self外，还有另一个形参battery_size</li><li>方法describe_battery()也移到了这个类中</li><li>在ElectricCar类中，我们添加了一个名为self.battery的属性。这行代码让Python创建一个新的Battery实例（由于没有指定尺寸，因此为默认值70），并将该实例存储在属性self.battery中</li></ul><h3 id="9-4导入类"><a href="#9-4导入类" class="headerlink" title="9.4导入类"></a>9.4导入类</h3><p>Python允许你将类存储在模块中，然后在主程序中导入所需的模块。</p><ul><li>导入单个类；<code>import module_name import class_name</code></li><li>在一个模块中存储多个类</li><li>从一个模块中导入多个类，从一个模块中导入多个类时，用逗号分隔了各个类;<code>import module_name import class_name1,class_name2</code></li><li>还可以导入整个模块，再使用句点表示法访问需要的类；使用语法<em>module_name.class_name</em>访问需要的类<code>import module_name</code></li><li>导入模块中的所有类；<code>from module_name import *</code> ，强烈不推荐使用这种方式导入类</li><li>在一个模块中导入另一个模块</li></ul><h3 id="9-5Python标准库"><a href="#9-5Python标准库" class="headerlink" title="9.5Python标准库"></a>9.5Python标准库</h3><p>Python标准库是一组模块，安装的Python都包含它。</p><p>可使用标准库中的任何函数和类，为此只需在程序开头包含一条简单的import语句</p><h2 id="10-文件和异常"><a href="#10-文件和异常" class="headerlink" title="10.文件和异常"></a>10.文件和异常</h2><p>学习处理文件和保存数据可让你的程序使用起来更容易：用户将能够选择输入什么样的数据，以及在什么时候输入；用户使用你的程序做一些工作后，可将程序关闭，以后再接着往下做。</p><p>学习处理异常可帮助你应对文件不存在的情形，以及处理其他可能导致程序崩溃的问题。这让你的程序在面对错误的数据时更健壮——不管这些错误数据源自无意的错误，还是源自破坏程序的恶意企图。</p><p>打开文件时，可指定读取模式（’r’）、写入模式（’w’）、附加模式（’a’）或让你能够读取和写入文件的模式（’r+’）。如果你省略了模式实参，Python将以默认的只读模式打开文件。</p><h3 id="10-1从文件中读取数据"><a href="#10-1从文件中读取数据" class="headerlink" title="10.1从文件中读取数据"></a>10.1从文件中读取数据</h3><p><strong>读取整个文件</strong></p><p>函数open()接受一个参数：要打开的文件的名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;pi_digits.txt&#x27;</span>) <span class="hljs-keyword">as</span> file_object: <br>contents = file_object.read() <br><span class="hljs-built_in">print</span>(contents)<br></code></pre></td></tr></table></figure><p>关键字with在不再需要访问文件后将其关闭。在这个程序中，注意到我们调用了open()，但没有调用close()；你也可以调用open()和close()来打开和关闭文件，但这样做时，如果程序存在bug，导致close()语句未执行，文件将不会关闭。</p><p>read()到达文件末尾时返回一个空字符串，而将这个空字符串显示出来时就是一个空行。要删除多出来的空行，可在print语句中使用rstrip()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;pi_digits.txt&#x27;</span>) <span class="hljs-keyword">as</span> file_object: <br>contents = file_object.read() <br><span class="hljs-built_in">print</span>(contents.rstrip())<br></code></pre></td></tr></table></figure><p>要让Python打开不与程序文件位于同一个目录中的文件，需要提供文件路径，它让Python到系统的特定位置去查找。</p><p><strong>逐行读取</strong></p><p>要以每次一行的方式检查文件，可对文件对象使用for循环:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">filename = <span class="hljs-string">&#x27;pi_digits.txt&#x27;</span> <br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> file_object: <br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file_object: <br>            <span class="hljs-built_in">print</span>(line)<br></code></pre></td></tr></table></figure><p>使用关键字with时，open()返回的文件对象只在with代码块内可用。如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行存储在一个列表中，并在with代码块外使用该列表：你可以立即处理文件的各个部分，也可推迟到程序后面再处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">filename = <span class="hljs-string">&#x27;pi_digits.txt&#x27;</span> <br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> file_object: <br>     lines = file_object.readlines() <br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines: <br>     <span class="hljs-built_in">print</span>(line.rstrip())<br></code></pre></td></tr></table></figure><p><strong>使用文件的内容</strong></p><p>strip()可以删除空格</p><p>读取文本文件时，Python将其中的所有文本都解读为字符串。如果你读取的是数字，并要将其作为数值使用，就必须使用函数int()将其转换为整数，或使用函数float()将其转换为浮点数。</p><p>对于你可处理的数据量，Python没有任何限制；只要系统的内存足够多，你想处理多少数据都可以</p><h3 id="10-2写入文件"><a href="#10-2写入文件" class="headerlink" title="10.2写入文件"></a>10.2写入文件</h3><p>保存数据的最简单的方式之一是将其写入到文件中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">filename = <span class="hljs-string">&#x27;programming.txt&#x27;</span> <br> <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file_object: <br> file_object.write(<span class="hljs-string">&quot;I love programming.&quot;</span>)<br></code></pre></td></tr></table></figure><p>如果你要写入的文件不存在，函数open()将自动创建它。然而，以写入（’w’）模式打开文件时千万要小心，因为如果指定的文件已经存在，Python将在返回文件对象前清空该文件。</p><p>函数write()不会在你写入的文本末尾添加换行符，因此如果你写入多行时没有指定换行符，像显示到终端的输出一样，还可以使用空格、制表符和空行来设置这些输出的格式</p><p>如果你要给文件添加内容，而不是覆盖原有的内容，可以附加模式打开文件。你以附加模式打开文件时，Python不会在返回文件对象前清空文件，而你写入到文件的行都将添加到文件末尾。如果指定的文件不存在，Python将为你创建一个空文件。</p><h3 id="10-3异常"><a href="#10-3异常" class="headerlink" title="10.3异常"></a>10.3异常</h3><p>Python使用被称为异常的特殊对象来管理程序执行期间发生的错误。每当发生让Python不知所措的错误时，它都会创建一个异常对象。如果你编写了处理该异常的代码，程序将继续运行；如果你未对异常进行处理，程序将停止，并显示一个traceback，其中包含有关异常的报告。</p><p>异常是使用try-except代码块处理的。try-except代码块让Python执行指定的操作，同时告诉Python发生异常时怎么办。使用了try-except代码块时，即便出现异常，程序也将继续运行：显示你编写的友好的错误消息，而不是令用户迷惑的traceback。</p><p>通过将可能引发错误的代码放在try-except代码块中，可提高这个程序抵御错误的能力</p><p>try-except-else代码块的工作原理大致如下：Python尝试执行try代码块中的代码；只有可能引发异常的代码才需要放在try语句中。有时候，有一些仅在try代码块成功执行时才需要运行的代码；这些代码应放在else代码块中。except代码块告诉Python，如果它尝试运行try代码块中的代码时引发了指定的异常，该怎么办。</p><p><strong>处理 FileNotFoundError 异常</strong></p><p>使用文件时，一种常见的问题是找不到文件：你要查找的文件可能在其他地方、文件名可能不正确或者这个文件根本就不存在。对于所有这些情形，都可使用try-except代码块以直观的方式进行处理。</p><p><strong>分析文本</strong></p><p>使用try-except代码块提供了两个重要的优点：避免让用户看到traceback；让程序能够继续分析能够找到的其他文件。</p><p><strong>失败时一声不吭</strong></p><p>有时候你希望程序在发生异常时一声不吭，就像什么都没有发生一样继续运行。要让程序在失败时一声不吭，可像通常那样编写try代码块，但在except代码块中明确地告诉Python什么都不要做。Python有一个pass语句，可在代码块中使用它来让Python什么都不要做。</p><p>pass语句还充当了占位符，它提醒你在程序的某个地方什么都没有做，并且以后也许要在这里做些什么</p><p>编写得很好且经过详尽测试的代码不容易出现内部错误，如语法或逻辑错误，但只要程序依赖于外部因素，如用户输入、存在指定的文件、有网络链接，就有可能出现异常。凭借经验可判断该在程序的什么地方包含异常处理块，以及出现错误时该向用户提供多少相关的信息。</p><h3 id="10-4存储数据"><a href="#10-4存储数据" class="headerlink" title="10.4存储数据"></a>10.4存储数据</h3><p>模块json让你能够将简单的Python数据结构转储到文件中，并在程序再次运行时加载该文件中的数据。你还可以使用json在Python程序之间分享数据。更重要的是，JSON数据格式并非Python专用的，这让你能够将以JSON格式存储的数据与使用其他编程语言的人分享。这是一种轻便格式，很有用，也易于学习。</p><p><strong>使用json.dump()和json.load()</strong></p><p>函数json.dump()接受两个实参：要存储的数据以及可用于存储数据的文件对象。</p><p><strong>重构</strong></p><p>你经常会遇到这样的情况：代码能够正确地运行，但可做进一步的改进——将代码划分为一系列完成具体工作的函数。这样的过程被称为重构。重构让代码更清晰、更易于理解、更容易扩展。</p><h2 id="11-测试"><a href="#11-测试" class="headerlink" title="11.测试"></a>11.测试</h2><h3 id="11-1测试函数"><a href="#11-1测试函数" class="headerlink" title="11.1测试函数"></a>11.1测试函数</h3><p>编写函数或类时，还可为其编写测试。通过测试，可确定代码面对各种输入都能够按要求的那样工作。</p><ul><li><p>Python标准库中的模块unittest提供了代码测试工具。单元测试用于核实函数的某个方面没有问题；</p></li><li><p>测试用例是一组单元测试，这些单元测试一起核实函数在各种情形下的行为都符合要求。</p></li><li><p>全覆盖式测试用例包含一整套单元测试，涵盖了各种可能的函数使用方式。</p></li><li><p>创建测试用例的语法需要一段时间才能习惯，但测试用例创建后，再添加针对函数的单元测试就很简单了</p></li><li><p>要为函数编写测试用例，可先导入模块unittest以及要测试的函数，再创建一个继承unittest.TestCase的类，并编写一系列方法对函数行为的不同方面进行测试</p></li><li><p>使用unittest类最有用的功能之一：一个断言方法。断言方法用来核实得到的结果是否与期望的结果一致</p></li><li><p>测试未通过时，不要修改测试，而应修复导致测试不能通过的代码：检查刚对函数所做的修改，找出导致函数行为不符合预期的修改</p></li></ul><p>范例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> unittest <br><span class="hljs-keyword">from</span> name_function <span class="hljs-keyword">import</span> get_formatted_name<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NamesTestCase</span>(unittest.TestCase): <br>     <span class="hljs-string">&quot;&quot;&quot;测试name_function.py&quot;&quot;&quot;</span> <br> <br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_first_last_name</span>(<span class="hljs-params">self</span>): <br>         <span class="hljs-string">&quot;&quot;&quot;能够正确地处理像Janis Joplin这样的姓名吗？&quot;&quot;&quot;</span> <br>         formatted_name = get_formatted_name(<span class="hljs-string">&#x27;janis&#x27;</span>, <span class="hljs-string">&#x27;joplin&#x27;</span>) <br>         self.assertEqual(formatted_name, <span class="hljs-string">&#x27;Janis Joplin&#x27;</span>) <br>        <br>unittest.main()<br></code></pre></td></tr></table></figure><p>Python在unittest.TestCase类中提供了很多断言方法:</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>assertEqual(a, b)</td><td>核实a &#x3D;&#x3D; b</td></tr><tr><td>assertNotEqual(a, b)</td><td>核实a !&#x3D; b</td></tr><tr><td>assertTrue(x)</td><td>核实x为True</td></tr><tr><td>assertFalse(x)</td><td>核实x为False</td></tr><tr><td>assertIn(item, list)</td><td>核实item在list中</td></tr><tr><td>assertNotIn(item, list)</td><td>核实item不在list中</td></tr></tbody></table><h3 id="11-2测试类"><a href="#11-2测试类" class="headerlink" title="11.2测试类"></a>11.2测试类</h3><p>类的测试与函数的测试相似——你所做的大部分工作都是测试类中方法的行为</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黑群晖显示真实CPU信息</title>
    <link href="/2023/05/31/%E9%BB%91%E7%BE%A4%E6%99%96%E6%98%BE%E7%A4%BA%E7%9C%9F%E5%AE%9ECPU%E4%BF%A1%E6%81%AF/"/>
    <url>/2023/05/31/%E9%BB%91%E7%BE%A4%E6%99%96%E6%98%BE%E7%A4%BA%E7%9C%9F%E5%AE%9ECPU%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<p><strong>黑群晖信息中心显示的CPU信息不正确，例如918+对应的CPU为J3455，而不是本机真实的CPU信息，逼死强迫症，可以通过打补丁让其显示真实的CPU信息，操作方法如下：</strong></p><h2 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h2><ol><li><p>通过ssh登录到群晖后台</p></li><li><p>切换到root账号下，并切换到期望存放补丁文件的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -i<br>cd /volumue5/download<br></code></pre></td></tr></table></figure></li><li><p>通过wget命令下载补丁文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://github.com/FOXBI/ch_cpuinfo/releases/download/ch_cpuinfo/ch_cpuinfo.tar<br></code></pre></td></tr></table></figure></li><li><p>解压补丁包文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar xvf ch_cpuinfo.tar<br>chmod +x ch_cpuinfo<br></code></pre></td></tr></table></figure></li><li><p>执行补丁文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./ch_cpuinfo<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305311942781.webp" alt="输入1为首次执行"></p><p>&gt;输入1表示首次执行</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305311942949.webp" alt="输入2为重新执行"></p><p>&gt;输入2表示重新安装</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305311943165.webp" alt="输入3为恢复默认"></p><p>&gt;输入3表示恢复默认</p></li><li><p>执行完毕后，退出账号并重新登录，刷新页面就会看到信息中心已经显示了正确的CPU信息了</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305311955386.webp"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>群晖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>群晖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黑群晖918+ CPU不自动变频</title>
    <link href="/2023/05/30/%E9%BB%91%E7%BE%A4%E6%99%96CPU%E4%B8%8D%E8%87%AA%E5%8A%A8%E5%8F%98%E9%A2%91/"/>
    <url>/2023/05/30/%E9%BB%91%E7%BE%A4%E6%99%96CPU%E4%B8%8D%E8%87%AA%E5%8A%A8%E5%8F%98%E9%A2%91/</url>
    
    <content type="html"><![CDATA[<p><strong>硬件配置：</strong></p><ul><li>CPU：i3-8100</li><li>主板：昂达B365SD4-ITX</li><li>内存：12G</li></ul><p><strong>系统版本：</strong>918+ 7.1.1-42962</p><p>安装黑群晖系统后，发现CPU一直处于最高频率在运行，不会自动变频，并且available cpufreq governors只有<code>powersave</code>,<code>performance</code>, <code>userspace</code>这三个，而不通常的performance 、power save 、user<em>space</em>、conservative 和 ondemand 五种。</p><p>偶然的机会在<a href="https://xpenology.com/forum/topic/19846-cpu-frequency-scaling-for-ds918/">CPU Frequency scaling for DS918+ - Software Modding - XPEnology Community</a>看到了解决方案。</p><blockquote><p>项目地址：<a href="https://github.com/Trauma/cpufreq-userspace-scaler">https://github.com/Trauma/cpufreq-userspace-scaler</a></p><h1 id="cpufreq-userspace-scaler"><a href="#cpufreq-userspace-scaler" class="headerlink" title="cpufreq-userspace-scaler"></a>cpufreq-userspace-scaler</h1><h5 id="Cpu-frequency-scaling-script-for-cpufreq-userspace-governor"><a href="#Cpu-frequency-scaling-script-for-cpufreq-userspace-governor" class="headerlink" title="Cpu frequency scaling script for cpufreq userspace governor"></a>Cpu frequency scaling script for cpufreq userspace governor</h5><h2 id="If-you’re-missing-ondemand-or-conservative-governors-this-script-is-for-you"><a href="#If-you’re-missing-ondemand-or-conservative-governors-this-script-is-for-you" class="headerlink" title="If you’re missing ondemand or conservative governors, this script is for you."></a>If you’re missing ondemand or conservative governors, this script is for you.</h2><p>This script is scaling cpu frequency according to current average load. You can set 2 frequency steps : low, mid. This 2 thresholds will automatically set cpu frequency accordingly :</p><ul><li>the threshold will set the cpu to his minimal frequency, unless you force it to <code>lowload</code> <code>scalingminfreq</code></li><li>the threshold will set the cpu to approximate mid range cpu frequency, if load goes higher it will scale to max <code>midload</code> <code>scalingmaxfreq</code></li></ul><p>If you set and&#x2F;or the cpu will never override those values.<code>scalingmaxfreq</code> <code>scalingminfreq</code></p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage :"></a>Usage :</h3><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters :"></a>Parameters :</h3><table><thead><tr><th>Variable name</th><th>Default</th><th>Type</th><th>Comments</th></tr></thead><tbody><tr><td>lowload</td><td>auto &#x2F; 30%</td><td>integer between 000 and 999</td><td>050 &#x3D; load average : 0.50</td></tr><tr><td>midload</td><td>auto &#x2F; 60%</td><td>integer between 000 and 999</td><td>065 &#x3D; load average : 0.65</td></tr><tr><td>scalingminfreq</td><td>auto</td><td>integer in hertz</td><td>800000 &#x3D; 800 Mhz</td></tr><tr><td>scalingmaxfreq</td><td>auto</td><td>integer in hertz</td><td>2500000 &#x3D; 2,5 Ghz</td></tr></tbody></table><h3 id="Default-commande-line"><a href="#Default-commande-line" class="headerlink" title="Default commande line :"></a>Default commande line :</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">./scaling.sh &amp;</span><br></code></pre></td></tr></table></figure><h3 id="Custom-command-line-example"><a href="#Custom-command-line-example" class="headerlink" title="Custom command line example :"></a>Custom command line example :</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&gt;<span class="hljs-attribute">lowload</span>=100 <span class="hljs-attribute">midload</span>=200 <span class="hljs-attribute">scalingmaxfreq</span>=2000000 <span class="hljs-attribute">scalingminfreq</span>=1500000 ./scaling.sh &amp;<br></code></pre></td></tr></table></figure><h3 id="Systemd-service-installer"><a href="#Systemd-service-installer" class="headerlink" title="Systemd service installer"></a>Systemd service installer</h3><p><em>for DSM 7.0 and above</em></p><ol><li>If needed, set desired lowload and midload values in <code>cpufreq-userspace-scaler.service</code></li><li>Launch the installer <code>./install.sh</code></li></ol></blockquote><p>使用方法：</p><p>1、将上述项目中的三个文件下载到群晖里</p><p>2、SSH登录到服务器</p><p>3、执行.&#x2F;install.sh</p>]]></content>
    
    
    <categories>
      
      <category>群晖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>群晖</tag>
      
      <tag>分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黑群晖引导自动编译</title>
    <link href="/2023/05/30/%E9%BB%91%E7%BE%A4%E6%99%96%E5%BC%95%E5%AF%BC%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91/"/>
    <url>/2023/05/30/%E9%BB%91%E7%BE%A4%E6%99%96%E5%BC%95%E5%AF%BC%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<p>黑群晖的引导盘制作原来一直是个挺复杂的事情，但是自从有了下面这些项目，引导的制作变得非常简单，感谢大神们！</p><ul><li><a href="https://github.com/pocopico/tinycore-redpill">pocopico&#x2F;tinycore-redpill</a></li><li><a href="https://github.com/fbelavenuto/arpl">fbelavenuto&#x2F;arpl: Automated Redpill Loader</a></li><li><a href="https://github.com/wjz304/arpl-i18n">wjz304&#x2F;arpl-i18n: Automated Redpill Loader(i18n)</a> arpl i18n (多语言优化版)</li></ul><h2 id="arpl自动制作引导盘"><a href="#arpl自动制作引导盘" class="headerlink" title="arpl自动制作引导盘"></a>arpl自动制作引导盘</h2><p>下面是基于arpl的操作步骤：</p><p>1、准备一个2G以上的U盘</p><p>2、下载镜像文件</p><p>​原版：<a href="https://github.com/fbelavenuto/arpl/releases">Releases · fbelavenuto&#x2F;arpl</a></p><p>​多语言版：<a href="https://github.com/wjz304/arpl-i18n/releases">Releases · wjz304&#x2F;arpl-i18n</a></p><p>3、通过写盘工具（如<a href="https://etcher.balena.io/">balenaEtcher </a>等）写入到U盘中</p><p>4、将U盘插入到黑群晖机器上，开机设置从U盘启动</p><p>5、启动完成后会在进入如下页面：</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305301944686.webp"></p><p>6、可以通过下面两种方式登录到系统：</p><ul><li>从另一台机器进入同一网络，在浏览器中输入屏幕上提供的地址<code>http://&lt;ip&gt;:7681</code></li><li>从另一台机器进入同一网络，使用ssh客户端，用户名： <code>root</code> 和密码： <code>Redp1lL-1s-4weSomE</code></li></ul><p>7、登录系统后输入<code>munu.sh</code>回车进入配置页面：</p><ul><li>选择型号</li></ul><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305301949724.webp"></p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305301951276.webp"></p><ul><li>选择系统版本</li></ul><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305301951831.webp"></p><ul><li>进入“Serial”菜单，选择“Generate a random Serial number”，也可以选择手动输入。</li><li>选择“Build”选项，等待加载器生成</li></ul><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305301954764.webp"></p><ul><li>选择“Boot”选项，等待DSM启动:</li></ul><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305301956866.webp"></p><p>8、通过以上步骤就完成一个引导盘的制作了。</p><h2 id="wjz304版本的一些命令"><a href="#wjz304版本的一些命令" class="headerlink" title="wjz304版本的一些命令"></a>wjz304版本的一些命令</h2><ul><li><p>arpl各版本间切换(手动方式, 全量) (Any version):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在 shell 中下载需要的版本或者手动上传到/opt/arpl/下</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Download the required version <span class="hljs-keyword">in</span> the shell or manually upload it to/opt/arpl/</span><br>curl -kL -o /opt/arpl/arpl.zip https://github.com/wjz304/arpl-i18n/releases/download/23.4.5/arpl-i18n-23.4.5.img.zip<br><span class="hljs-meta prompt_"># </span><span class="language-bash">卸载挂载的引导盘</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Uninstalling the mounted boot disk</span><br>umount /mnt/p1 /mnt/p2 /mnt/p3<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压 并写入到引导盘</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Decompress and write to the boot disk</span><br>unzip -p arpl.zip | dd of=`blkid | grep &#x27;LABEL=&quot;ARPL3&quot;&#x27; | cut -d3 -f1` bs=1M conv=fsync<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启 reboot</span><br>reboot<br></code></pre></td></tr></table></figure></li><li><p>arpl各版本间切换(菜单更新, 增量)(arpl &#x2F; arpl-zh_CN &#x2F; arpl-i18n(ver &lt; 23.4.5)):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">shell 下输入以下命令修改更新 repo.</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果要切换原版修改第二条命令中的 wjz304/arpl-i18n 为 fbelavenuto/arpl</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果切换中文版修改第二条命令中的 wjz304/arpl-i18n 为 wjz304/arpl-zh_CN</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Enter the following <span class="hljs-built_in">command</span> under the shell to modify and update repo</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">If you want to switch the original version and modify wjz304/arpl-i18n to fbelavenuto/arpl <span class="hljs-keyword">in</span> the second <span class="hljs-built_in">command</span>.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">If you switch to the Chinese version and modify the wjz304/arpl-i18n to wjz304/arpl_zh_CN <span class="hljs-keyword">in</span> the second <span class="hljs-built_in">command</span>.</span><br>CURREPO=`grep &quot;github.com.*update&quot; menu.sh | sed -r &#x27;s/.*com\/(.*)\/releases.*/\1/&#x27;`<br>sed -i &quot;s|$&#123;CURREPO&#125;|wjz304/arpl-i18n|g&quot; /opt/arpl/menu.sh<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入设置菜单执行更新arpl操作即可. 更新后请重启.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Simply enter the main menu and perform the update arpl operation. Please restart after the update.</span><br></code></pre></td></tr></table></figure></li><li><p>arpl 备份 (Any version):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">备份为 disk.img.gz, 自行导出.</span><br>dd if=`blkid | grep &#x27;LABEL=&quot;ARPL3&quot;&#x27; | cut -d3 -f1` | gzip &gt; disk.img.gz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">结合 transfer.sh 直接导出链接</span><br>curl -skL --insecure -w &#x27;\n&#x27; --upload-file disk.img.gz https://transfer.sh<br></code></pre></td></tr></table></figure></li><li><p>arpl 持久化 &#x2F;opt&#x2F;arpl 目录的修改 (Any version):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">RDXZ_PATH=/tmp/rdxz_tmp<br>mkdir -p &quot;$&#123;RDXZ_PATH&#125;&quot;<br>(cd &quot;$&#123;RDXZ_PATH&#125;&quot;; xz -dc &lt; &quot;/mnt/p3/initrd-arpl&quot; | cpio -idm) &gt;/dev/null 2&gt;&amp;1 || true<br>rm -rf &quot;$&#123;RDXZ_PATH&#125;/opt/arpl&quot;<br>cp -rf &quot;/opt/arpl&quot; &quot;$&#123;RDXZ_PATH&#125;/opt&quot;<br>(cd &quot;$&#123;RDXZ_PATH&#125;&quot;; find . 2&gt;/dev/null | cpio -o -H newc -R root:root | xz --check=crc32 &gt; &quot;/mnt/p3/initrd-arpl&quot;) || true<br>rm -rf &quot;$&#123;RDXZ_PATH&#125;&quot;<br></code></pre></td></tr></table></figure></li><li><p>arpl 修改所有的pat下载源 (Any version):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -i &#x27;s/global.synologydownload.com/cndl.synology.cn/g&#x27; /opt/arpl/menu.sh `find /opt/arpl/model-configs/ -type f&#x27;`<br>sed -i &#x27;s/global.download.synology.com/cndl.synology.cn/g&#x27; /opt/arpl/menu.sh `find /opt/arpl/model-configs/ -type f&#x27;`<br></code></pre></td></tr></table></figure></li><li><p>arpl 更新慢的解决办法 (arpl-zh_CN &#x2F; arpl):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -i &#x27;s|https://.*/https://|https://|g&#x27; /opt/arpl/menu.sh <br>sed -i &#x27;s|https://github.com|https://ghproxy.homeboyc.cn/&amp;|g&#x27; /opt/arpl/menu.sh <br>sed -i &#x27;s|https://api.github.com|http://ghproxy.homeboyc.cn/&amp;|g&#x27; /opt/arpl/menu.sh<br></code></pre></td></tr></table></figure></li><li><p>arpl 去掉pat的hash校验 (Any version):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -i &#x27;s/HASH&#125;&quot; ]/&amp; \&amp;\&amp; false/g&#x27; /opt/arpl/menu.sh<br></code></pre></td></tr></table></figure></li><li><p>arpl 下获取网卡驱动 (Any version):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">for i in `ls /sys/class/net | grep -v &#x27;lo&#x27;`; do echo $i -- `ethtool -i $i | grep driver`; done<br></code></pre></td></tr></table></figure></li><li><p>arpl 使用自定义的dts文件 (arpl(ver &gt; v1.1-beta2a &#x2F; arpl-zh_CN):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将dts文件放到/mnt/p1下,并重命名为model.dts. <span class="hljs-string">&quot;/mnt/p1/model.dts&quot;</span></span><br>sed -i &#x27;/^.*\/addons\/disks.sh.*$/a [ -f &quot;\/mnt\/p1\/model.dts&quot; ] \&amp;\&amp; cp &quot;\/mnt\/p1\/model.dts&quot; &quot;$&#123;RAMDISK_PATH&#125;\/addons\/model.dts&quot;&#x27; /opt/arpl/ramdisk-patch.sh<br></code></pre></td></tr></table></figure></li><li><p>arpl 离线安装 (arpl_zh_CN(ver &gt; ++-v1.3) &#x2F; arpl-i18n):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">1. arpl 下<br><span class="hljs-meta prompt_"># </span><span class="language-bash">arpl下获取型号版本的pat下载地址 (替换以下命令中的 版本号和型号部分)</span><br>yq eval &#x27;.builds.42218.pat.url&#x27; &quot;/opt/arpl/model-configs/DS3622xs+.yml&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将pat重命名为&lt;型号&gt;-&lt;版本&gt;.pat, 放入 /mnt/p3/dl/ 下</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">例: /mnt/p3/dl/DS3622xs+-42218.pat</span><br><br>2. pc 下<br><span class="hljs-meta prompt_"># </span><span class="language-bash">通过 DG等其他软件打开arpl.img, 将pat重命名为&lt;型号&gt;-&lt;版本&gt;.pat, 放入 第3个分区的 /dl/ 下.</span><br></code></pre></td></tr></table></figure></li><li><p>arpl 增删驱动 (Any version):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1.首先你要有对应平台的驱动 比如 SA6400 7.1.1 增加 r8125</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">略</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">2.解包</span><br>mkdir -p /mnt/p3/modules/epyc7002-5.10.55<br>gzip -dc /mnt/p3/modules/epyc7002-5.10.55.tgz | tar xf - -C /mnt/p3/modules/epyc7002-5.10.55<br><span class="hljs-meta prompt_"># </span><span class="language-bash">3.放入或删除驱动</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">略</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">4.打包</span><br>tar -cf /mnt/p3/modules/epyc7002-5.10.55.tar -C /mnt/p3/modules/epyc7002-5.10.55 .<br>gzip -c /mnt/p3/modules/epyc7002-5.10.55.tar &gt; /mnt/p3/modules/epyc7002-5.10.55.tgz<br>rm -rf /mnt/p3/modules/epyc7002-5.10.55.tar /mnt/p3/modules/epyc7002-5.10.55<br></code></pre></td></tr></table></figure></li></ul><h2 id="一些有用的群晖命令"><a href="#一些有用的群晖命令" class="headerlink" title="一些有用的群晖命令"></a>一些有用的群晖命令</h2><ul><li><p>ssh 开启 root 权限:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -i<br>sed -i &#x27;s/^.*PermitRootLogin.*$/PermitRootLogin yes/&#x27; /etc/ssh/sshd_config  <br>synouser --setpw root xxxxxx  # xxxxxx 为你要设置的密码<br>systemctl restart sshd<br></code></pre></td></tr></table></figure></li><li><p>dsm下挂载引导盘:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -i<br>echo 1 &gt; /proc/sys/kernel/syno_install_flag<br>ls /dev/synoboot*    # 正常会有 /dev/synoboot  /dev/synoboot1  /dev/synoboot2  /dev/synoboot3<br><span class="hljs-meta prompt_"># </span><span class="language-bash">挂载第1个分区</span><br>mkdir -p /tmp/synoboot1 <br>mount /dev/synoboot1 /tmp/synoboot1 <br>ls /tmp/synoboot1/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">挂载第2个分区</span><br>mkdir -p /tmp/synoboot2<br>mount /dev/synoboot2 /tmp/synoboot2<br>ls /tmp/synoboot2/<br></code></pre></td></tr></table></figure></li><li><p>dsm下重启到arpl(免键盘) (Any version):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -i  # 输入密码<br>/usr/bin/arpl-reboot.sh &quot;config&quot;<br></code></pre></td></tr></table></figure></li><li><p>dsm下修改sn (Any version):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -i  # 输入密码<br>SN=xxxxxxxxxx   # 输入你要设置的SN<br>echo 1 &gt; /proc/sys/kernel/syno_install_flag<br>[ -b &quot;/dev/synoboot1&quot; ] &amp;&amp; (mkdir -p /tmp/synoboot1; mount /dev/synoboot1 /tmp/synoboot1)<br>[ -f &quot;/tmp/synoboot1/user-config.yml&quot; ] &amp;&amp; OLD_SN=`grep &#x27;^sn:&#x27; /tmp/synoboot1/user-config.yml | sed -r &#x27;s/sn:(.*)/\1/; s/[\&quot; ]//g&#x27;`<br>[ -n &quot;$&#123;OLD_SN&#125;&quot; ] &amp;&amp; sed -i &quot;s/$&#123;OLD_SN&#125;/$&#123;SN&#125;/g&quot; /tmp/synoboot1/user-config.yml<br>reboot<br></code></pre></td></tr></table></figure></li><li><p>群晖 opkg 包管理:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget -O - http://bin.entware.net/x64-k3.2/installer/generic.sh | /bin/sh<br>/opt/bin/opkg update<br>/opt/bin/opkg install rename<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>群晖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分享</tag>
      
      <tag>黑群晖</tag>
      
      <tag>引导</tag>
      
      <tag>arpl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>群晖自动切换壁纸</title>
    <link href="/2023/05/30/%E7%BE%A4%E6%99%96%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E5%A3%81%E7%BA%B8/"/>
    <url>/2023/05/30/%E7%BE%A4%E6%99%96%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E5%A3%81%E7%BA%B8/</url>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>每日定时自动获取Bing的每日壁纸图片，自动更换登录界面的背景为bing今日美图，并且替换欢迎信息为美图简介。</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305301718741.webp"></p><h2 id="获取脚本"><a href="#获取脚本" class="headerlink" title="获取脚本"></a>获取脚本</h2><p>原始脚本在<a href="https://github.com/kkkgo/DSM_Login_BingWallpaper">kkkgo&#x2F;DSM_Login_BingWallpaper: 群晖登录壁纸自动换 (github.com)</a>，做了下简单修改，设置为壁纸的图片分辨率为1920x1080，保存的为高清的版本。</p><p>下面是修改过的脚本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">设置你的语言</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">set</span> your language(en-US,zh-CN...)</span><br>lang=&quot;zh-CN&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如需收集保存壁纸,请去掉下面注释,设置保存文件夹路径</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">在FileStation里面右键文件夹属性可以看到路径</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">If you want to collect and save Wallpapers,</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">please remove the comment below and <span class="hljs-built_in">set</span> the savepath.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Right click the folder property <span class="hljs-keyword">in</span> FileStation to see the path.</span><br><br>savepath=&quot;/volume5/Download/BingPicture/wallpaper_uhd&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如需下载4k分辨率,请设置res=4k</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如需下载体积更大的4k以上分辨率的原始图片,请设置res=raw</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">To download 4K resolution, <span class="hljs-built_in">set</span> res=4K</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">To download a larger original picture, <span class="hljs-built_in">set</span> res=raw</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">res=4k</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改用户桌面壁纸,注释后会替换系统的wallpaper1</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">你需要清空浏览器缓存查看效果，仅在DSM7.x上测试.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Modify user desktop wallpaper.Only <span class="hljs-built_in">test</span> <span class="hljs-keyword">for</span> DMS7.x.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">System <span class="hljs-string">&quot;Wallpaper1&quot;</span> will replaced by remove the comment.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">You need to clear the browser cache to see the effect.</span><br><br>desktop=yes<br><br>echo &quot;[x]Collecting information...&quot;<br>pic=&quot;https://www.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1&quot;<br>if [ &quot;$res&quot; != &quot;&quot; ]<br>then pic=&quot;https://www.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1&amp;uhd=1&amp;uhdwidth=3840&amp;uhdheight=2160&quot;<br>fi<br>pic=$(wget -t 5 --no-check-certificate -qO- $pic --header=&quot;cookie:_EDGE_S=mkt=$lang&quot;)<br>echo $pic|grep -q enddate||exit<br>link=$(echo https://www.bing.com$(echo $pic|sed &#x27;s/.\+&quot;url&quot;[:&quot; ]\+//g&#x27;|sed &#x27;s/&quot;.\+//g&#x27;))<br>if [ &quot;$savepath&quot; != &quot;&quot; ]<br>then linkd=$(echo https://www.bing.com$(echo $pic|sed &#x27;s/.\+&quot;url&quot;[:&quot; ]\+//g&#x27;|sed &#x27;s/&quot;.\+//g&#x27;|sed &#x27;s/1920x1080/UHD/g&#x27;))<br>fi<br>date=$(echo $pic|grep -Eo &#x27;&quot;enddate&quot;:&quot;[0-9]+&#x27;|grep -Eo &#x27;[0-9]+&#x27;|head -1)<br>if [ &quot;$date&quot; == &quot;&quot; ]<br>then date=$(date +%Y%m%d)<br>fi<br>title=$(echo $pic|sed &#x27;s/.\+&quot;title&quot;:&quot;//g&#x27;|sed &#x27;s/&quot;.\+//g&#x27;)<br>copyright=$(echo $pic|sed &#x27;s/.\+&quot;copyright[:&quot; ]\+//g&#x27;|sed &#x27;s/&quot;.\+//g&#x27;)<br>keyword=$(echo $copyright|sed &#x27;s/, /-/g&#x27;|cut -d&quot; &quot; -f1|grep -Eo &#x27;[^()\\/:*?&quot;&lt;&gt;]+&#x27;|head -1)<br>filename=$date&quot;@&quot;$title&quot;-&quot;$keyword&quot;.jpg&quot;<br>echo &quot;Link:&quot;$link<br>echo &quot;Linkd:&quot;$linkd<br>echo &quot;Date:&quot;$date<br>echo &quot;Title:&quot;$title<br>echo &quot;Copyright:&quot;$copyright<br>echo &quot;Keyword:&quot;$keyword<br>echo &quot;Filename:&quot;$filename<br><br>echo &quot;[x]Downloading wallpaper...&quot;<br>tmpfile=/tmp/$filename<br>wget -t 5 --no-check-certificate  $link -qO $tmpfile<br>ls -lah $tmpfile||exit<br><br>echo &quot;[x]Copying wallpaper...&quot;<br>if [ &quot;$savepath&quot; != &quot;&quot; ]<br>then wget -t 5 --no-check-certificate  $linkd -qO $savepath/$filename<br>echo &quot;Save:&quot;$savepath<br>ls -lah &quot;$savepath&quot;|grep $date<br>cd &quot;$savepath&quot;<br>chmod 777 $filename<br>else echo &quot;savepath is not set, skip copy.&quot;<br>fi<br><br>echo &quot;[x]Setting welcome msg...&quot;<br>sed -i s/login_welcome_title=.*//g /etc/synoinfo.conf<br>echo &quot;login_welcome_title=\&quot;$title\&quot;&quot;&gt;&gt;/etc/synoinfo.conf<br>sed -i s/login_welcome_msg=.*//g /etc/synoinfo.conf<br>echo &quot;login_welcome_msg=\&quot;$copyright\&quot;&quot;&gt;&gt;/etc/synoinfo.conf<br><br>echo &quot;[x]Applying login wallpaper...&quot;<br>sed -i s/login_background_customize=.*//g /etc/synoinfo.conf<br>echo &quot;login_background_customize=\&quot;yes\&quot;&quot;&gt;&gt;/etc/synoinfo.conf<br>sed -i s/login_background_type=.*//g /etc/synoinfo.conf<br>echo &quot;login_background_type=\&quot;fromDS\&quot;&quot;&gt;&gt;/etc/synoinfo.conf<br>rm -rf /usr/syno/etc/login_background*.jpg<br>cp -f $tmpfile /usr/syno/etc/login_background.jpg<br>ln -sf /usr/syno/etc/login_background.jpg /usr/syno/etc/login_background_hd.jpg<br><br>echo &quot;[x]Clean...&quot;<br>rm -f /tmp/bing_*.jpg<br><br>if [ &quot;$desktop&quot; == &quot;yes&quot; ]<br>then echo &quot;[x]Applying user desktop wallpaper...&quot;<br>mkdir -p /usr/syno/synoman/webman/resources/images/2x/default_wallpaper/<br>mkdir -p /usr/syno/synoman/webman/resources/images/1x/default_wallpaper/<br>mkdir -p /usr/syno/synoman/webman/resources/images/default/1x/default_wallpaper/<br>mkdir -p /usr/syno/synoman/webman/resources/images/default_wallpaper/<br><span class="hljs-meta prompt_">#</span><span class="language-bash">7.0</span><br>cp -f /usr/syno/etc/login_background.jpg /usr/syno/synoman/webman/resources/images/2x/default_wallpaper/dsm7_01.jpg<br>ln -sf /usr/syno/synoman/webman/resources/images/2x/default_wallpaper/dsm7_01.jpg /usr/syno/synoman/webman/resources/images/1x/default_wallpaper/dsm7_01.jpg<br><span class="hljs-meta prompt_">#</span><span class="language-bash">6.0</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ln</span> -sf /usr/syno/synoman/webman/resources/images/2x/default_wallpaper/dsm7_01.jpg /usr/syno/synoman/webman/resources/images/default/1x/default_wallpaper/default_wallpaper.jpg</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ln</span> -sf /usr/syno/synoman/webman/resources/images/2x/default_wallpaper/dsm7_01.jpg /usr/syno/synoman/webman/resources/images/default/1x/default_wallpaper/dsm6_01.jpg</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ln</span> -sf /usr/syno/synoman/webman/resources/images/2x/default_wallpaper/dsm7_01.jpg /usr/syno/synoman/webman/resources/images/default/1x/default_wallpaper/dsm6_02.jpg</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-comment">#5.2</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ln</span> -sf /usr/syno/synoman/webman/resources/images/2x/default_wallpaper/dsm7_01.jpg /usr/syno/synoman/webman/resources/images/default_wallpaper/default_wallpaper.jpg</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-comment">#5.1</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ln</span> -sf /usr/syno/synoman/webman/resources/images/2x/default_wallpaper/dsm7_01.jpg /usr/syno/synoman/webman/resources/images/default_wallpaper/01.jpg</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ln</span> -sf /usr/syno/synoman/webman/resources/images/2x/default_wallpaper/dsm7_01.jpg /usr/syno/synoman/webman/resources/images/default_wallpaper/02.jpg</span><br>fi<br></code></pre></td></tr></table></figure><h2 id="设置定时任务"><a href="#设置定时任务" class="headerlink" title="设置定时任务"></a>设置定时任务</h2><ol><li>控制面板-任务计划-新增：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305301711860.webp" alt="新增任务"></p><p>​用户账号记得选择root</p><ol start="2"><li>计划里设置每天跑脚本的时间</li></ol><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305301713391.webp" alt="执行时间"></p><ol start="3"><li>任务设置里输入执行脚本的命令</li></ol><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305301715084.webp" alt="任务内容"></p><ol start="4"><li><p>确定就完成任务的设置了，如果想马上看到效果可以选择手动立即执行，然后退出登录账号并<code>Ctrl+F5</code>刷新浏览器即可看到效果了 </p></li><li><p>可以看到图片也保存到设置的目录了，并且保存下来的是高分辨率的</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305301720910.webp"></p>]]></content>
    
    
    <categories>
      
      <category>群晖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>群晖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>群晖系统Synology DSM安装ipkg包管理</title>
    <link href="/2023/05/29/%E7%BE%A4%E6%99%96%E7%B3%BB%E7%BB%9FSynology-DSM%E5%AE%89%E8%A3%85ipkg%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    <url>/2023/05/29/%E7%BE%A4%E6%99%96%E7%B3%BB%E7%BB%9FSynology-DSM%E5%AE%89%E8%A3%85ipkg%E5%8C%85%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="SSH登录"><a href="#SSH登录" class="headerlink" title="SSH登录"></a>SSH登录</h2><p>打开终端，我使用的是xshell，使用群晖的管理员账号和密码登录，登录成功后，可使用下面命令切换到root账号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -i<br></code></pre></td></tr></table></figure><p>之后输入密码（与管理员的密码相同）</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载bootstrap并执行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget http://ipkg.nslu2-linux.org/feeds/optware/syno-i686/cross/unstable/syno-i686-bootstrap_1.2-7_i686.xsh<br>chmod +x syno-i686-bootstrap_1.2-7_i686.xsh<br>sh syno-i686-bootstrap_1.2-7_i686.xsh<br></code></pre></td></tr></table></figure><p>终端返回：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">Optware Bootstrap for syno-i686.<br>Extracting archive... please wait<br>bootstrap/<br>bootstrap/bootstrap.sh<br>bootstrap/ipkg-opt.ipk<br>bootstrap/ipkg.sh<br>1216+1 records in<br>1216+1 records out<br>bootstrap/optware-bootstrap.ipk<br>bootstrap/wget.ipk<br>249302 bytes (249 kB) copied, 0.00421063 s, 59.2 MB/s<br>Creating temporary ipkg repository...<br>Installing optware-bootstrap package...<br>Unpacking optware-bootstrap.ipk...Done.<br>Configuring optware-bootstrap.ipk...Modifying /etc/rc.local<br>Done.<br>Installing ipkg...<br>Unpacking ipkg-opt.ipk...Done.<br>Configuring ipkg-opt.ipk...Done.<br>Removing temporary ipkg repository...<br>Installing wget...<br>Installing wget (1.12-2) to root...<br>Configuring wget<br>Successfully terminated.<br>Creating /opt/etc/ipkg/cross-feed.conf...<br>Setup complete.<br></code></pre></td></tr></table></figure><p>安装完成，建议重启，不过我没重启也没问题，可以使用。 之后执行更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ipkg update<br></code></pre></td></tr></table></figure><p>如果执行ipkg失败，提示没有找到该命令（- ash : ipkg : command not found），需要添加一下环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/syno/sbin:/usr/syno/bin:/usr/local/sbin:/usr/local/bin</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">export</span> PATH</span><br></code></pre></td></tr></table></figure><p>我们来安装个Screen试一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@DiskStation:~# ipkg install screen<br>Installing screen (4.0.3-2) to root...<br>Downloading http://ipkg.nslu2-linux.org/feeds/optware/syno-i686/cross/unstable/screen_4.0.3-2_i686.ipk<br>Installing termcap (1.3.1-2) to root...<br>Downloading http://ipkg.nslu2-linux.org/feeds/optware/syno-i686/cross/unstable/t ermcap_1.3.1-2_i686.ipk<br>Configuring screen<br>Configuring termcap<br>Successfully terminated.<br></code></pre></td></tr></table></figure><p>没问题。</p><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>如果需要卸载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm syno-i686-bootstrap_1.2-7_i686.xsh<br></code></pre></td></tr></table></figure><h2 id="修复wget-https错误问题"><a href="#修复wget-https错误问题" class="headerlink" title="修复wget https错误问题"></a>修复wget https错误问题</h2><p>安装了包管理后，如果出现wget https的问题，只要删除&#x2F;opt&#x2F;bin&#x2F;wget后将&#x2F;usr&#x2F;bin&#x2F;wget软链接到&#x2F;opt&#x2F;bin目录即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -s /usr/bin/wget /opt/bin/wget<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>群晖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>群晖</tag>
      
      <tag>DSM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自建Emby验证服务器</title>
    <link href="/2023/05/29/%E8%87%AA%E5%BB%BAEmby%E9%AA%8C%E8%AF%81%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2023/05/29/%E8%87%AA%E5%BB%BAEmby%E9%AA%8C%E8%AF%81%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="自建Emby验证服务器（实现白嫖）"><a href="#自建Emby验证服务器（实现白嫖）" class="headerlink" title="自建Emby验证服务器（实现白嫖）"></a>自建Emby验证服务器（实现白嫖）</h1><p>群晖默认自带nginx服务，通过增加nginx反代配置，实现将Emby的验证劫持到本地，骗过emby服务器，从而解锁硬解功能，实现视频播放硬件解码，降低服务器CPU压力。</p><p>注：我的Emby服务器是DOCKER部署。</p><h3 id="1-配置nginx"><a href="#1-配置nginx" class="headerlink" title="1.配置nginx"></a>1.配置nginx</h3><p>新建一个nginx配置文件，命名随意（例如emby.conf），在配置文件中写入下面的配置信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs conf">server &#123;<br> listen 443 ssl;<br> server_name mb3admin.com;<br> ssl_certificate /volume6/web/mb3admin.com/mb3admin.com.cert.pem;<br> ssl_certificate_key /volume6/web/mb3admin.com/mb3admin.com.key.pem;<br> ssl_session_timeout 5m;<br> ssl_protocols TLSv1 TLSv1.1 TLSv1.2;<br> ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<br> ssl_prefer_server_ciphers on;<br> location = /webdefault/images/logo.jpg &#123;<br> alias /usr/syno/share/nginx/logo.jpg;<br> &#125;<br><br> location @error_page &#123;<br> root /usr/syno/share/nginx;<br> rewrite (.*) /error.html break;<br> &#125;<br><br> location ^~ /.well-known/acme-challenge &#123;<br> root /var/lib/letsencrypt;<br> default_type text/plain;<br> &#125;<br><br> location / &#123;<br> rewrite ^ / redirect;<br> &#125;<br><br> location ~ ^/$ &#123;<br> rewrite / https://$host:5001/ redirect;<br> &#125;<br><br> add_header Access-Control-Allow-Origin *;<br> add_header Access-Control-Allow-Headers *;<br> add_header Access-Control-Allow-Method *;<br> add_header Access-Control-Allow-Credentials true;<br> location /admin/service/registration/validateDevice &#123;<br> default_type application/json;<br> return 200 &#x27;&#123;&quot;cacheExpirationDays&quot;: 7,&quot;message&quot;: &quot;Device Valid&quot;,&quot;resultCode&quot;: &quot;GOOD&quot;&#125;&#x27;;<br> &#125;<br><br> location /admin/service/registration/validate &#123;<br> default_type application/json;<br> return 200 &#x27;&#123;&quot;featId&quot;:&quot;&quot;,&quot;registered&quot;:true,&quot;expDate&quot;:&quot;2099-01-01&quot;,&quot;key&quot;:&quot;&quot;&#125;&#x27;;<br> &#125;<br><br> location /admin/service/registration/getStatus &#123;<br> default_type application/json;<br> return 200 &#x27;&#123;&quot;deviceStatus&quot;:&quot;&quot;,&quot;planType&quot;:&quot;&quot;,&quot;subscriptions&quot;:&#123;&#125;&#125;&#x27;;<br> &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>将文件保存到指定位置，通过软链接到&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -s /volume/XX/XX/emby.conf /etc/nginx/conf.d/emby.conf<br></code></pre></td></tr></table></figure><h3 id="2-申请证书"><a href="#2-申请证书" class="headerlink" title="2.申请证书"></a>2.申请证书</h3><p>到<a href="https://www.gmcert.org/subForm">https://www.gmcert.org/subForm</a>这个网站申请申请签发证书，参考下面填写：</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305292103557.webp"></p><p>一个是加密算法选 RSA, 密钥长度至少选 2048, 然后除主题名称为<code>mb3admin.com</code>之外其他的按照规则随意填写。点开高级选项：</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305292105504.webp"></p><p>然后勾选 <code>自动包含CA证书链</code> ，最后是证书有效天数，写 <code>824</code> 天即可。下载生成的证书，同时也将CA证书下载起来：</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305292126065.webp"></p><p>将 <code>mb3admin.com.key.pem</code> 和 <code>mb3admin.com.cert.pem</code>文件上传到第一步配置文件中目录位置，我这里是&#x2F;volume6&#x2F;web&#x2F;mb3admin.com&#x2F;。</p><h3 id="3-重启nginx服务"><a href="#3-重启nginx服务" class="headerlink" title="3.重启nginx服务"></a>3.重启nginx服务</h3><p>测试nginx配置文件是否正常</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -t<br></code></pre></td></tr></table></figure><p>重载nginx配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -s reload<br></code></pre></td></tr></table></figure><h3 id="4-将证书文件追加到Emby服务器"><a href="#4-将证书文件追加到Emby服务器" class="headerlink" title="4.将证书文件追加到Emby服务器"></a>4.将证书文件追加到Emby服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat xx/mb3admin.com.cert.pem &gt;&gt; /etc/ssl/certs/ca-certificates.crt<br></code></pre></td></tr></table></figure><h3 id="5-修改DNS或者HOSTS文件"><a href="#5-修改DNS或者HOSTS文件" class="headerlink" title="5.修改DNS或者HOSTS文件"></a>5.修改DNS或者HOSTS文件</h3><p>可以在本地电脑中修改HOSTS文件，将mb3admin.com指向群晖IP地址，也可以直接在路由器中直接进行域名劫持，将mb3admin.com指向群晖IP</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305292124432.webp"></p><h3 id="6-浏览器添加CA证书"><a href="#6-浏览器添加CA证书" class="headerlink" title="6.浏览器添加CA证书"></a>6.浏览器添加CA证书</h3><p>将CA证书添加到本地电脑：</p><p>将GMCert_RSACA01.cert.pem 文件名改为GMCert_RSACA01.cer，双击安装</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305292131273.webp"></p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305292132905.webp"></p><p>然后在浏览器中打开下面两个浏览器，验证是否成功：</p><p><a href="https://mb3admin.com/admin/service/registration/validateDevice">https://mb3admin.com/admin/service/registration/validateDevice</a></p><p><a href="https://mb3admin.com/admin/service/registration/validateDevice/666">https://mb3admin.com/admin/service/registration/validateDevice/666</a></p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305292133083.webp"></p><h3 id="7-在Emby服务器中输入秘钥"><a href="#7-在Emby服务器中输入秘钥" class="headerlink" title="7.在Emby服务器中输入秘钥"></a>7.在Emby服务器中输入秘钥</h3><p>管理Emby Server-Emby Premiere中随便输入一个秘钥，见证奇迹：</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305292136890.webp"></p><p>结束！</p>]]></content>
    
    
    <categories>
      
      <category>分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>群晖</tag>
      
      <tag>分享</tag>
      
      <tag>Emby</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于fluid主题的hexo博客搭建</title>
    <link href="/2023/05/28/%E5%9F%BA%E4%BA%8Efluid%E4%B8%BB%E9%A2%98%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/05/28/%E5%9F%BA%E4%BA%8Efluid%E4%B8%BB%E9%A2%98%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h3><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300822499.webp"></p><p>周末闲着无聊花了一天时间，搭建了一个hexo个人网站，使用的是了fluid主题，感谢作者的无私付出（<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid-dev&#x2F;hexo-theme-fluid: 一款 Material Design 风格的 Hexo 主题)</a>）。</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><p><a href="https://hexo.io/zh-cn/">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo支持 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h4 id="1-1-环境准备"><a href="#1-1-环境准备" class="headerlink" title="1.1 环境准备"></a>1.1 环境准备</h4><p>安装Hexo其实非常简单，但是需要先在本地电脑中安装好下面几个软件，另外我还安装了Visual Studio Code及Typora，推荐Typora+picgo作为文章写作软件，支持自动上传图片到图床。</p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li><li><a href="https://www.npmjs.com/">nmp</a></li><li><a href="https://code.visualstudio.com/">Visual Studio Code</a></li><li><a href="https://typora.io/">Typora</a></li></ul><h4 id="1-2安装"><a href="#1-2安装" class="headerlink" title="1.2安装"></a>1.2安装</h4><p>安装好前三个软件后，即可使用npm安装Hexo了，打开一个PowerShell窗口，执行下面命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install <span class="hljs-literal">-g</span> hexo<span class="hljs-literal">-cli</span><br></code></pre></td></tr></table></figure><p>安装以后，可以使用以下两种方式执行 Hexo：</p><ol><li><code>npx hexo</code></li><li>将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用： <code>hexo</code></li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27;</span> &gt;&gt; ~/.profile<br></code></pre></td></tr></table></figure><h4 id="1-3升级"><a href="#1-3升级" class="headerlink" title="1.3升级"></a>1.3升级</h4><p>如果后期需要升级的话，进入博客的目录，先检查更新:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">E:\Blog\hexo&gt; npm outdated<br>Package  Current  Wanted     Latest  Location           Depended by<br>hexo       6.3.0   6.3.0  7.0.0-rc1  node_modules/hexo  hexo<br></code></pre></td></tr></table></figure><p>修改 <code>package.json</code> 文件，基于 <code>Latest</code> 列内容更新版本号，然后更新并检查版本号：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install <span class="hljs-literal">--save</span><br></code></pre></td></tr></table></figure><h3 id="2-建站"><a href="#2-建站" class="headerlink" title="2.建站"></a>2.建站</h3><h4 id="2-1初始化目录"><a href="#2-1初始化目录" class="headerlink" title="2.1初始化目录"></a>2.1初始化目录</h4><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo init &lt;目标文件夹&gt;<br><span class="hljs-built_in">cd</span> &lt;目标文件夹&gt;<br>npm install <br></code></pre></td></tr></table></figure><h4 id="2-2启动网页服务"><a href="#2-2启动网页服务" class="headerlink" title="2.2启动网页服务"></a>2.2启动网页服务</h4><p>等初始化执行完成后，通过<code>hexo s</code>命令即可在本地启动博客站点：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">&gt;hexo s<br>INFO  <span class="hljs-built_in">Start</span> processing<br>INFO  Hexo is running at http://localhost:<span class="hljs-number">4000</span> . Press Ctrl+C to stop.<br></code></pre></td></tr></table></figure><p>浏览器访问<a href="http://localhost:4000就可以看到下面这页面了：">http://localhost:4000就可以看到下面这页面了：</a></p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300845356.webp"></p><h3 id="3-更换主题"><a href="#3-更换主题" class="headerlink" title="3.更换主题"></a>3.更换主题</h3><h4 id="3-1安装主题"><a href="#3-1安装主题" class="headerlink" title="3.1安装主题"></a>3.1安装主题</h4><p><strong>方式一</strong></p><p>Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml (opens new window)</a>内容复制过去。</p><p><strong>方式二</strong></p><p>下载 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">最新 release 版本 (opens new window)</a>解压到 themes 目录，并将解压出的文件夹重命名为 <code>fluid</code>。</p><h4 id="3-2指定主题"><a href="#3-2指定主题" class="headerlink" title="3.2指定主题"></a>3.2指定主题</h4><p>如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><h4 id="3-3创建「关于页」"><a href="#3-3创建「关于页」" class="headerlink" title="3.3创建「关于页」"></a>3.3创建「关于页」</h4><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里写关于页的正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span><br></code></pre></td></tr></table></figure><blockquote><p><em><strong>注意</strong></em></p><p><code>layout: about</code> 必须存在，并且不能修改成其他值，否则不会显示头像等样式。</p></blockquote><p>完了执行下面两条命令，就可以看到新主题的样式了：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo clean<br>hexo s<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300846684.webp"></p><h4 id="3-4更新主题"><a href="#3-4更新主题" class="headerlink" title="3.4更新主题"></a>3.4更新主题</h4><p><strong>方式一</strong></p><blockquote><p>适用于通过 Npm 安装主题。</p></blockquote><p>在博客目录下执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm update --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p><strong>方式二</strong></p><blockquote><p>适用于通过 Release 压缩包安装主题，且没有自行修改任何代码的情况。</p></blockquote><ol><li>先将原文件夹重命名为别的名称，例如 <code>fluid-bkp</code>，用于升级失败进行回退；</li><li>按照安装步骤，重新下载 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">release (opens new window)</a>并解压重命名为 <code>fluid</code>；</li><li>如果某些配置发生了变化（改名或弃用），release 的说明里会特别提示，同步修改原配置文件即可。</li></ol><p><strong>方式三</strong></p><blockquote><p>适用于自定义了一些代码，或想体验其他分支的情况，以 dev 分支为例。</p></blockquote><ol><li>确定自己的 fluid 目录已经开启 git，并且所有改动都已 commit；</li><li>把 fluid 仓库的 develop 分支拉取到自己当前的分支上（也可新建一个分支再拉取）：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull https://github.com/fluid-dev/hexo-theme-fluid.git develop<br></code></pre></td></tr></table></figure><ol start="3"><li>解决代码冲突，保留自己修改的部分（如何解决冲突可自行搜索）</li></ol><h4 id="3-5更多主题配置"><a href="#3-5更多主题配置" class="headerlink" title="3.5更多主题配置"></a>3.5更多主题配置</h4><p>更多的主题配置请参考官方配置指南：</p><p><a href="https://hexo.fluid-dev.com/docs/guide/">配置指南 | Hexo Fluid 用户手册 (fluid-dev.com)</a></p><h3 id="4-部署到Github"><a href="#4-部署到Github" class="headerlink" title="4.部署到Github"></a>4.部署到Github</h3><p>通过 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a> 插件可以实现一键将博客部署到github提供的 pages 服务。</p><h4 id="4-1新建存储库"><a href="#4-1新建存储库" class="headerlink" title="4.1新建存储库"></a>4.1新建存储库</h4><p>建立名为 <code>&lt;repository的名字&gt;.github.io</code> 的储存库，这样你的博客网址为 <code>&lt;你的 GitHub 用户名&gt;.github.io</code>，例如下面这样：</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300846389.webp"></p><h4 id="4-1安装hexo-deployer-git"><a href="#4-1安装hexo-deployer-git" class="headerlink" title="4.1安装hexo-deployer-git"></a>4.1安装hexo-deployer-git</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install hexo<span class="hljs-literal">-deployer-git</span> <br></code></pre></td></tr></table></figure><h4 id="4-2修改-config-yml文件"><a href="#4-2修改-config-yml文件" class="headerlink" title="4.2修改_config.yml文件"></a>4.2修改<code>_config.yml</code>文件</h4><p>在配置文件中追加下面的内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/conscloud/conscloud.github.io</span><br>  <span class="hljs-comment"># example, https://github.com/hexojs/hexojs.github.io</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span><br>  <span class="hljs-attr">ignore_hidden:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h4 id="4-3部署发布"><a href="#4-3部署发布" class="headerlink" title="4.3部署发布"></a>4.3部署发布</h4><p>Commit 并 push 到默认分支上，当部署完成后，在 <code>gh-pages</code> 分支可以找到生成的网页，并在 GitHub 储存库中，前往 <code>Settings &gt; Pages &gt; Source</code>，并将 branch 改为 <code>gh-pages</code>。</p><p>部署执行下面的命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">hexo clean &amp;&amp; hexo deploy<br></code></pre></td></tr></table></figure><p>前往 <code>https://&lt;你的 GitHub 用户名&gt;.github.io/</code> 查看网站。</p><h3 id="5-部署到vercel"><a href="#5-部署到vercel" class="headerlink" title="5.部署到vercel"></a>5.部署到vercel</h3><p>部署到github一个是速度不够快，另一个是国内的网络环境有时可能无法访问，推荐部署到<a href="https://vercel.com/">Vercel</a>,配合自定义域名，可以提高访问速度。</p><h4 id="5-1新建工程"><a href="#5-1新建工程" class="headerlink" title="5.1新建工程"></a>5.1新建工程</h4><p>首先先注册一个vercel账号后，在页面中点击<code>New Project</code>，创建工程。</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300846837.webp"></p><p>然后通过绑定的 <code>github</code> 或者导入需要部署的项目。</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300846729.webp"></p><p>因为导入的项目是打包好的静态页，<code>FRAMEWORK PRESET</code> 选择 <code>Other</code> 。</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300847718.webp"></p><p>点击 <code>deployed</code> 进行部署，如果部署失败可以查看报错信息是不是上一步的某些选项没有覆盖。部署成功后会进入如图所示的界面：</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300847721.webp"></p><h4 id="5-2自定义域名"><a href="#5-2自定义域名" class="headerlink" title="5.2自定义域名"></a>5.2自定义域名</h4><p><strong>域名可以购买或者去<a href="https://www.freenom.com/zh/index.html?lang=zh">Freenom</a>申请免费的域名，但是Freenom域名听说有可能存在被收回的风险。</strong></p><ul><li>默认情况下部署成功后 <code>vercel</code> 会给你生成一个默认的域名，如果想要修改成自己的域名可将域名名称修改成自己的。</li><li>当选择修改成自己的域名名称后，<code>vercel</code> 会检查域名指向的 <code>DNS</code> 对不对，如果不对的话会提示你域名的 DNS 应该如何配置，按照 <code>vercel</code> 提示的 <code>DNS</code> 信息</li></ul><p>在自己的域名的 <code>DNS</code> 配置中进行配置，如图在 setting 中配置自定义域名：</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300848352.webp"></p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300848160.webp"></p><p>待生效后，就可以用自定义的域名访问了。</p><h4 id="5-4修改Vrecel服务器区域"><a href="#5-4修改Vrecel服务器区域" class="headerlink" title="5.4修改Vrecel服务器区域"></a>5.4修改Vrecel服务器区域</h4><p>在Settings-Functions中修改区域为香港。</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300848122.webp"></p><p>我用的是freenom的免费域名，通过cloudfare管理，服务器区域修改为香港后，在晚上高峰期测试的延迟情况：</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300849770.webp"></p><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h3><p>好像就是这样就完事了。</p><p>哦！感谢下列文章作者：</p><p><a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a></p><p><a href="https://hexo.fluid-dev.com/docs/guide/">配置指南 | Hexo Fluid 用户手册 (fluid-dev.com)</a></p><p><a href="https://blog.17lai.site/posts/40300608/#!">三万字教程]基于Hexo的matery主题搭建博客并深度优化一站式完全教程 | 夜法之书 (17lai.site)</a></p><p><a href="https://hexo.fluid-dev.com/posts/hexo-vercel/#">Vercel部署高级用法教程 - Hexo Theme Fluid (fluid-dev.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
      <tag>HEXO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>群晖无法启用防火墙问题修复</title>
    <link href="/2023/05/28/%E7%BE%A4%E6%99%96%E6%97%A0%E6%B3%95%E5%90%AF%E7%94%A8%E9%98%B2%E7%81%AB%E5%A2%99%E9%97%AE%E9%A2%98%E4%BF%AE%E5%A4%8D/"/>
    <url>/2023/05/28/%E7%BE%A4%E6%99%96%E6%97%A0%E6%B3%95%E5%90%AF%E7%94%A8%E9%98%B2%E7%81%AB%E5%A2%99%E9%97%AE%E9%A2%98%E4%BF%AE%E5%A4%8D/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300957269.webp"></p><p><strong>现象</strong>：系统版本DSM7.1，当选择启用防火墙时，编辑规则会报“无法加载配置文件数据”，也无法在防火墙配置规则中进行下拉选择。</p><h3 id="启用SSH服务登录到群晖后台"><a href="#启用SSH服务登录到群晖后台" class="headerlink" title="启用SSH服务登录到群晖后台"></a>启用SSH服务登录到群晖后台</h3><p>如果不知道如何开启SSH服务，请参考：<a href="https://www.okko.tk/2023/05/28/%E7%BE%A4%E6%99%96%E5%BC%80%E5%90%AFSSH%E5%8F%8A%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E9%85%8D%E7%BD%AE">群晖开启SSH及免密码登录配置 - ZhJy的随笔</a></p><h3 id="修复防火墙配置文件"><a href="#修复防火墙配置文件" class="headerlink" title="修复防火墙配置文件"></a>修复防火墙配置文件</h3><ol><li>分别查看<code>/usr/syno/etc/firewall.d/</code>及<code>/usr/syno/etc.defaults/firewall.d</code>两个目录下是否至少有三个json文件，我这分别为1.json、2.json及firewall_settings.json三个文件</li></ol><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300957310.webp"></p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300958132.webp"></p><ol><li>使用cat命令分别查看1.json及2.json文件内容是否为空，或者json格式不正确，我这里是在&#x2F;usr&#x2F;syno&#x2F;etc&#x2F;firewall.d&#x2F;这个目录下的两个数字开头的文件内容为空，而etc.defaults&#x2F;firewall.d&#x2F;下面同名的文件是有内容的。</li><li>将&#x2F;usr&#x2F;syno&#x2F;etc.defaults&#x2F;firewall.d&#x2F;下的1.json、2.json复制到&#x2F;usr&#x2F;syno&#x2F;etc&#x2F;firewall.d&#x2F;目录下。</li><li>回到页面验证，现在已经可以开户防火墙，并配置相关规则了</li></ol><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300958438.webp"></p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>That is all!</p>]]></content>
    
    
    <categories>
      
      <category>群晖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>群晖</tag>
      
      <tag>DSM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>群晖开启SSH及免密码登录配置</title>
    <link href="/2023/05/28/%E7%BE%A4%E6%99%96%E5%BC%80%E5%90%AFSSH%E5%8F%8A%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/05/28/%E7%BE%A4%E6%99%96%E5%BC%80%E5%90%AFSSH%E5%8F%8A%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300820463.webp"></p><p>群晖开启root账户免密登录与linux服务器的操作大致相同。 </p><p>我的群晖DSM版本是7.1.1</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300956813.webp"></p><h3 id="1-开启SSH服务"><a href="#1-开启SSH服务" class="headerlink" title="1.开启SSH服务"></a>1.开启SSH服务</h3><p>群晖从7开始默认关闭了“admin”账户，并禁用最大权限的系统账户“root”登录网页控制台。</p><p>先使用群晖安装时建立的普通管理员账户（加入了administrators用户组的用户）登录web控制台后，依次点击“控制面板”-“终端机和SNMP”，勾选“启用SSH功能”，再点击右下角的“应用”按钮即完成开启SSH服务。<strong>建议修改默认端口号。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300956733.webp"></p><h3 id="2-允许ROOT账号登录"><a href="#2-允许ROOT账号登录" class="headerlink" title="2.允许ROOT账号登录"></a>2.允许ROOT账号登录</h3><p>通过普通管理员账户进行ssh登录，输入sudo - i 回车后再次输入管理员密码，就能切换到root账户。</p><p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300954437.webp"></p><p>给root账户设置密码,其中xxx为你想要设置的密码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">synouser --setpw root xxx<br></code></pre></td></tr></table></figure><p>修改sshd_config文件的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">PermitRootLogin <span class="hljs-built_in">yes</span><span class="hljs-comment">#允许root登录</span><br>PasswordAuthentication <span class="hljs-built_in">yes</span>          <span class="hljs-comment">#开启密码认证</span><br>ChallengeResponseAuthentication no<br>UsePAM <span class="hljs-built_in">yes</span>    <span class="hljs-comment">#开户密码认证</span><br></code></pre></td></tr></table></figure><p>修改完后，别忘记保存。</p><h3 id="3-开启密钥登录"><a href="#3-开启密钥登录" class="headerlink" title="3.开启密钥登录"></a>3.开启密钥登录</h3><p>确认在root用户下，输入“ssh-keygen”命令创建密钥，id_rsa是新生成的私钥，id_rsa.pub是对应的公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -b 2048 -C &quot;root_rsa_key&quot;<br></code></pre></td></tr></table></figure><p>将id_rsa.pub文件内容追加到“&#x2F;root&#x2F;.ssh&#x2F;authorized_keys”文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys<br></code></pre></td></tr></table></figure><p><em>注意authorized_keys权限至少是root账户有rw（否则执行以下2条命令“chmod 700 ~&#x2F;.ssh”、“ chmod 600 ~&#x2F;.ssh&#x2F;authorized_keys”）</em></p><p>将id_rsa文件复制到本地，重启ssh服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">synosystemctl reload sshd<br>synosystemctl restart sshd<br></code></pre></td></tr></table></figure><p>在本地就可以通过工具（如xshell等）免密码连接到群晖了。</p><p>最后可以修改sshd_config文件，禁止使用密码认证登录，提高安全性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">PasswordAuthentication no          <span class="hljs-comment">#关闭密码认证</span><br></code></pre></td></tr></table></figure><p><strong>最后，如果修改sshd_config文件导致ssh功能无法使用而其他功能正常，群晖可以正常登录网页控制台，可以开启telnet,把错误的sshd_config改回去！</strong></p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p><strong>群晖353条syno命令:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br></pre></td><td class="code"><pre><code class="hljs bash">syno-abuser-blocklist-checker<br>syno-dump-core.sh<br>syno-init-disk-health-db<br>syno-letsencrypt<br>syno8021Xtool<br>synoRTCTime<br>syno_adv_test<br>syno_bios_bootperf_record<br>syno_disk_config_check<br>syno_disk_ctl<br>syno_disk_data_collector<br>syno_disk_db_update<br>syno_disk_dsl<br>syno_disk_dump<br>syno_disk_firm_status_update<br>syno_disk_health_predict<br>syno_disk_health_record<br>syno_disk_latency_collector<br>syno_disk_log_convert<br>syno_disk_log_import_from_xml<br>syno_disk_performance_cache_update<br>syno_disk_performance_delete_record<br>syno_disk_performance_monitor<br>syno_disk_schedule_test<br>syno_disk_smart_mail_send<br>syno_disk_sysfs_get<br>syno_disk_sysfs_set<br>syno_disk_test_log_import_from_xml<br>syno_disk_test_scheduler_set<br>syno_disk_testlog_convert<br>syno_disk_wcache_config_init<br>syno_disk_wdda<br>syno_drive_bundle<br>syno_ew_check.sh<br>syno_expansion<br>syno_fan_debug<br>syno_hdd_util<br>syno_hibernation_debug<br>syno_hook_trgr<br>syno_hw_video_transcoding.sh<br>syno_ip_conflict_detect<br>syno_iptables_common<br>syno_led_brightness<br>syno_led_mask_on<br>syno_mem_check<br>syno_mem_single_channel_action<br>syno_mib_disk_mapping<br>syno_mib_disk_tool<br>syno_microp_control<br>syno_predict_disk_health<br>syno_pstore_collect<br>syno_scemd_connector<br>syno_sched_poweroff<br>syno_smart_result_collect<br>syno_smart_test<br>syno_spectre_meltdown_tool<br>syno_ssd_trim<br>syno_ssd_trim_schedule<br>syno_storage_bkgrd_task<br>syno_swap_ctl<br>syno_syslog_check_ctl<br>syno_system_dump<br>syno_update_disk_log_information<br>syno_user_info<br>syno_volume_analyze<br>synoabnormalloginmail<br>synoabnormalloginnotify<br>synoacltool<br>synoafp<br>synoagentregisterd<br>synoagentregistertool<br>synoappbkp<br>synoappconfigcache<br>synoappnotify<br>synoapppriv_updater<br>synoarchive<br>synoarchivetool<br>synoauth<br>synoautoblock<br>synoautonano<br>synobackgroundtask<br>synobackup<br>synobackupd<br>synobandwidth<br>synobios_uninit<br>synobootseq<br>synobootupcheck<br>synobtrfssnap<br>synobtrfssnapusage<br>synocacheadvisor<br>synocacheadvisord<br>synocacheclient<br>synocachepinfiled<br>synocachepinfiletool<br>synocachepinfiletool-status<br>synocachepinfiletool.sh<br>synocfgen<br>synocgid<br>synocgitool<br>synocheckgroup<br>synocheckhotspare<br>synocheckinfo<br>synocheckiscsitrg<br>synochecknetworkcfg<br>synocheckshare<br>synocheckuser<br>synocleaner<br>synocloudserviceauth<br>synocmsclient<br>synocodectool<br>synoconfbkp<br>synoconfd<br>synocontentextract<br>synocontentextractd<br>synocontentsearchutils<br>synocopy<br>synocredential<br>synocrond<br>synocrtchecksum<br>synocrtregister<br>synocrtunregister<br>synocsp<br>synodatacollect<br>synodataverifier<br>synodate<br>synodbudconfig<br>synodbudd<br>synodbudgetinfo<br>synodbudinfo<br>synodbudisrunning<br>synodbudupdate<br>synodbudvcdiff<br>synodbudvolume<br>synodctest<br>synodd<br>synoddnsinfo<br>synodisk<br>synodiskdatacollect<br>synodiskfind<br>synodisklatencyd<br>synodiskmanagertool<br>synodiskpathparse<br>synodiskport<br>synodiskstat<br>synodiskwddad<br>synodsdefault<br>synodsinfo<br>synodsmloginhealthcheck<br>synodsmnotify<br>synoethinfo<br>synoexternal<br>synoextractjep<br>synofanconfig<br>synofilehandle<br>synofilehandlecleancache<br>synofileutil<br>synofirewall<br>synofirewallUpdater<br>synoflashcache<br>synoflashcachechecknotifymissing<br>synoflashcacheshareapplytool<br>synoflvconv<br>synofsbdctl<br>synofstool<br>synoftpchecker<br>synogear<br>synogetkeyvalue<br>synogetstate.sh<br>synogpoclientd<br>synogrinst<br>synogroup<br>synohacore<br>synohtmlhandler<br>synohwctl<br>synoindex<br>synoindex-bin-scheduler<br>synoindex-bin-sdk-hook-db-tool<br>synoindex_mgr<br>synoindex_package.sh<br>synoindexd<br>synoindexnotifyd<br>synoindexplugind<br>synoindexscand<br>synoindexworkerd<br>synoinsid<br>synoiscsiep<br>synoiscsitop<br>synoiscsiwebapi<br>synokerneltz<br>synolanstatus<br>synoldapclient<br>synoldapclientd<br>synolegalnotifier<br>synolog-linker<br>synologaccd<br>synologand<br>synologanutil<br>synologconfgen<br>synologconvert<br>synologrotated<br>synologset<br>synologset1<br>synomediaparser<br>synomediaparserd<br>synomibclient-event<br>synomibtool<br>synomigratewallpaper<br>synomkflv<br>synomkflvd<br>synomkthumb<br>synomkthumbd<br>synomoduletool<br>synomount<br>synomustache<br>synomyds<br>synonclient_send<br>synonet<br>synonetd<br>synonetdtool<br>synoneteventd<br>synonetseqadj<br>synonfs<br>synonfstest<br>synonfstop<br>synonode<br>synonotify<br>synonotifyconvert<br>synonotifydbtransfer<br>synonvme<br>synootp<br>synoovstool<br>synopartition<br>synopasswordmail<br>synopayment<br>synoperfeventd<br>synoperformancediagnose<br>synopersonalupdater<br>synopftest<br>synopingpong<br>synopkg<br>synopkgctl<br>synopkghelper<br>synopkicompatsync<br>synoplatform<br>synoportforward<br>synopostgres<br>synopoweroff<br>synopppoe<br>synopreferencedir<br>synoprint<br>synopsql<br>synopyntlmd<br>synoquota<br>synoraid5stat<br>synoraidtool<br>synorbdctl<br>synorecycle<br>synorelayd<br>synorenewdefaultcert<br>synoretainer<br>synoretentionconf<br>synoretentiontest<br>synoretentiontestutil.sh<br>synorollinggroupid<br>synorouterportfwd<br>synoroutertool<br>synorsyncdtool<br>synosavetime<br>synoscgi<br>synoscgi-socket-get-memory.js<br>synoscgi________________________________________________________<br>synoscgi_socket.js<br>synoschedmulti<br>synoschedmultirun<br>synoschedtask<br>synoschedtool<br>synoscheduled<br>synosdutils<br>synosearch<br>synosearchagent<br>synoselfcheck<br>synoselfcheck-min<br>synoservicemigrate<br>synosetkeyvalue<br>synosetnoatime<br>synoshare<br>synosharequota<br>synosharesnapshot<br>synosharesnaptool<br>synosharesnaptree<br>synosharesnaptree_reconstruct.sh<br>synosharingbackup<br>synosharingchecker<br>synosharingcron<br>synosharingurl<br>synoshortcutmigrate.min.js<br>synoshutdown<br>synosmartblock<br>synosnapschedtask.sh<br>synosnmp_communicator<br>synosnmpcd<br>synosnmpcd_db_updater<br>synosocket<br>synospace<br>synospace.sh<br>synossdbundlehotplug<br>synossdbundlemonitor<br>synosshdutils<br>synostgdisk<br>synostgpool<br>synostgreclaim<br>synostgsysraid<br>synostgtask<br>synostgvolume<br>synostorage<br>synostoragecore<br>synostoraged<br>synosubvoltype<br>synosupportchannelchecker<br>synosyncdctime<br>synosyslogcheck<br>synosyslogmail<br>synosystemctl<br>synotaskmgr<br>synotc<br>synotc_common<br>synothumb<br>synotifyd<br>synotifydutil<br>synotimecontrol<br>synotlstool<br>synotokenmgr<br>synotune<br>synoupgrade<br>synoupgradepreserve<br>synoupnp<br>synoups<br>synoups_battery_notify.sh<br>synoupscommon<br>synousb<br>synousbdisk<br>synouser<br>synouserdir<br>synouserhome<br>synovolumesnapshot<br>synovpnc<br>synovspace<br>synovspace_wrapper<br>synow3<br>synow3tool<br>synowebapi<br>synowedjat-exec<br>synowin<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>群晖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>群晖</tag>
      
      <tag>DSM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Openwrt状态信息推送到HA的两种实现方法</title>
    <link href="/2023/05/28/Openwrt%E7%8A%B6%E6%80%81%E4%BF%A1%E6%81%AF%E6%8E%A8%E9%80%81%E5%88%B0HA%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/"/>
    <url>/2023/05/28/Openwrt%E7%8A%B6%E6%80%81%E4%BF%A1%E6%81%AF%E6%8E%A8%E9%80%81%E5%88%B0HA%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/conscloud/picgotemp/imgplus/202305300953810.webp"></p><p>家里目前使用x86平台软路由作为主路由拨号，在群晖vmm虚拟机中安装了HAOS智能家居系统，HA中基于upnp的集成组件对路由器的监控项目不是很全，因此想将一些路由器的状态信息接入到HA中进行实时监控展示。这里介绍两种方法：</p><h3 id="一、通过http模式推送"><a href="#一、通过http模式推送" class="headerlink" title="一、通过http模式推送"></a>一、通过http模式推送</h3><p>1、在进入HA系统-用户-长期访问令牌-创建令牌，新建一个长期访问令牌</p><p>2、写一个shell脚本openwrt_post.sh，获取路由器的状态信息，我这里取了CPU频率、温度、使用率、内存使用率、科学上网及开机时长。脚本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>cpu_freq=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq|awk &#x27;&#123;print ($1)/1000&#125;&#x27;)<br><br>temp_cpu=$(sensors|grep °C|sed -nr &#x27;s#^Core.*:.*\+(.*)°C .*#\1#gp&#x27;|sort -nr|head -n1&#x27;&#x27;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">cpu_freq=$(<span class="hljs-built_in">cat</span> /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq|awk <span class="hljs-string">&#x27;&#123;print ($1)/1000&#125;&#x27;</span>)</span><br><br>function getcpu()&#123;<br><br>local AT=$(cat /proc/stat|grep &quot;^cpu &quot;|awk &#x27;&#123;print $2+$3+$4+$5+$6+$7+$8 &quot; &quot; $2+$3+$4+$7+$8&#125;&#x27;)<br><br>sleep 1<br><br>local BT=$(cat /proc/stat|grep &quot;^cpu &quot;|awk &#x27;&#123;print $2+$3+$4+$5+$6+$7+$8 &quot; &quot; $2+$3+$4+$7+$8&#125;&#x27;)<br><br>printf &quot;%.01f&quot; $(echo $&#123;AT&#125; $&#123;BT&#125;|awk &#x27;&#123;print (($4-$2)/($3-$1))*100&#125;&#x27;)<br><br>&#125;<br><br>cpu_used=$(getcpu)<br><br>mem_used=$(free -m|sed -n &#x27;2p&#x27;|awk &#x27;&#123;print&quot;&quot;($3/$2)*100&#125;&#x27;)<br><br>ssr_server=`cat /etc/config/shadowsocksr |grep global_server|awk -F\&#x27; &#x27;&#123;print $2&#125;&#x27;`<br><br>up_times=$(cat /proc/uptime| awk -F. &#x27;&#123;run_days=$1 / 86400;run_hour=($1 % 86400)/3600;run_minute=($1 % 3600)/60;run_second=$1 % 60;printf(&quot;%d天%d时%d分%d秒\n&quot;,run_days,run_hour,run_minute,run_second)&#125;&#x27;)<br><br>post_data=&quot;&#123;\&quot;state\&quot;:\&quot;$temp_cpu\&quot;, \&quot;attributes\&quot;:&#123;\&quot;temp_cpu\&quot;:\&quot;$temp_cpu\&quot;, \&quot;cpu_freq\&quot;:\&quot;$cpu_freq\&quot;, \&quot;cpu_used\&quot;:\&quot;$cpu_used\&quot;,\&quot;mem_used\&quot;:\&quot;$mem_used\&quot;,\&quot;ssr_server\&quot;:\&quot;$ssr_server\&quot;,\&quot;up_times\&quot;:\&quot;$up_times\&quot;&#125;&#125;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$post_data</span></span><br><br>curl -X POST -H &quot;Authorization: Bearer 第一步建的长期访问令牌&quot; -H &quot;Content-Type: application/json&quot; -d &quot;$post_data&quot; http://192.168.XX.XX:8123/api/states/input_number.openwrtinfo<br></code></pre></td></tr></table></figure><p>3、通过crontab任务调度或者写一个watch脚本循环调用，即可通过post形式将采集到的信息推送到HA。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>while :<br>do<br>        if ! ps | grep -w openwrt_post.sh | grep -v grep<br>        then                                    <br>                /opt/openwrt_post.sh<br>        sleep 60#60秒取一次，可自行修改间隔<br>        fi                       <br>done<br></code></pre></td></tr></table></figure><p>4、在HA中添加配置文件，将获取到的信息转为实体</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">sensor:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">platform:</span> <span class="hljs-string">template</span><br>    <span class="hljs-attr">sensors:</span><br>      <span class="hljs-attr">openwrtinfo_temp_cpu:</span><br>        <span class="hljs-attr">unit_of_measurement:</span> <span class="hljs-string">°C</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; states.input_number.openwrtinfo.attributes.temp_cpu &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">openwrtinfo_cpu_freq:</span><br>        <span class="hljs-attr">unit_of_measurement:</span> <span class="hljs-string">MHz</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; states.input_number.openwrtinfo.attributes.cpu_freq &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">openwrtinfo_cpu_used:</span><br>        <span class="hljs-attr">unit_of_measurement:</span> <span class="hljs-string">&quot;%&quot;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; states.input_number.openwrtinfo.attributes.cpu_used &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">openwrtinfo_mem_used:</span><br>        <span class="hljs-attr">unit_of_measurement:</span> <span class="hljs-string">&quot;%&quot;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; states.input_number.openwrtinfo.attributes.mem_used &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">openwrtinfo_wan_sent:</span><br>        <span class="hljs-attr">unit_of_measurement:</span> <span class="hljs-string">GB</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrtinfo_wan_sent</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; states.sensor.openwrt_router_b_sent.state | multiply(1/1024/1024/1024) | round(2) &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">openwrtinfo_wan_received:</span><br>        <span class="hljs-attr">unit_of_measurement:</span> <span class="hljs-string">GB</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrtinfo_wan_received</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; states.sensor.openwrt_router_b_received.state | multiply(1/1024/1024/1024) | round(2) &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">openwrtinfo_ssr_server:</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; states.input_number.openwrtinfo.attributes.ssr_server &#125;&#125;</span>&quot;</span><br>      <span class="hljs-attr">openwrtinfo_up_times:</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; states.input_number.openwrtinfo.attributes.up_times &#125;&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><h3 id="二、通过mqtt推送"><a href="#二、通过mqtt推送" class="headerlink" title="二、通过mqtt推送"></a>二、通过mqtt推送</h3><p>1、先在openwrt中安装好mqtt，<code>mosquitto-client-nosll、libmosquitto-nossl</code>这两个包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">opkg update<br>opkg install mosquitto-client-nossl libmosquitto-nossl<br></code></pre></td></tr></table></figure><p>2、内网已经部署了MQTT服务器。</p><p>3、监控脚本与方法一大部分相同，将最后一步的发送命令修改如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mosquitto_pub -r -L mqtt://mqtt:mqtt@192.168.XX.XX:1883/openwrtinfo -m &quot;$post_data&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">mqtt:mqtt前面一个为mqtt用户名：mqtt密码</span><br></code></pre></td></tr></table></figure><p>​完整脚本如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>cpu1_freq=$(cat /sys/devices/system/cpu/cpufreq/policy0/scaling_cur_freq|awk &#x27;&#123;print ($1)/1000&#125;&#x27;)<br>cpu2_freq=$(cat /sys/devices/system/cpu/cpufreq/policy1/scaling_cur_freq|awk &#x27;&#123;print ($1)/1000&#125;&#x27;)<br>temp_cpu=$(sensors|grep °C|sed -nr &#x27;s#^Core.*:.*\+(.*)°C .*#\1#gp&#x27;|sort -nr|head -n1&#x27;&#x27;)<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">getcpu</span></span>()&#123;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">local</span> AT=$(<span class="hljs-built_in">cat</span> /proc/stat|grep <span class="hljs-string">&quot;^cpu &quot;</span>|awk <span class="hljs-string">&#x27;&#123;print $2+$3+$4+$5+$6+$7+$8 &quot; &quot; $2+$3+$4+$7+$8&#125;&#x27;</span>)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">sleep</span> 1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">local</span> BT=$(<span class="hljs-built_in">cat</span> /proc/stat|grep <span class="hljs-string">&quot;^cpu &quot;</span>|awk <span class="hljs-string">&#x27;&#123;print $2+$3+$4+$5+$6+$7+$8 &quot; &quot; $2+$3+$4+$7+$8&#125;&#x27;</span>)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%.01f&quot;</span> $(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;AT&#125;</span> <span class="hljs-variable">$&#123;BT&#125;</span>|awk <span class="hljs-string">&#x27;&#123;print (($4-$2)/($3-$1))*100&#125;&#x27;</span>)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">&#125;</span><br>cpu_used=$(top -b -n 1|awk &#x27;NR==2&#123;print$8&#125;&#x27;|awk &#x27;&#123;print 100-$1&#125;&#x27;)<br>mem_used=$(free -m|sed -n &#x27;2p&#x27;|awk &#x27;&#123;printf &quot;%.2f&quot;,($3/$2)*100&#125;&#x27;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">ip=$(curl -s https://api.ipify.org)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">for</span>((y=<span class="hljs-number">0</span>;y&lt;<span class="hljs-variable">$&#123;#array[*]&#125;</span>;y++))</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">do</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;<span class="hljs-variable">$ip</span>&quot;</span> = <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;array[y]&#125;</span>&quot;</span> ]];<span class="hljs-keyword">then</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> ssr_server=<span class="hljs-variable">$&#123;array[y+1]&#125;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"> <span class="hljs-keyword">fi</span></span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">done</span></span><br>ssr_server=$(awk &#x27;/^&#x27;$(curl -s https://api.ipify.org)&#x27;/ &#123;print $2&#125;&#x27; /opt/myscripts/ssrserver)<br>hostname=$(cat /etc/config/system |grep hostname |awk -F\&#x27; &#x27;&#123;print $2&#125;&#x27;)<br>cpu_brand=$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq)<br>cpu_arch=$(uname -m)<br>kernel=$(uname -r)<br>releases=$(echo &quot;$(cat /etc/openwrt_release |sed -n &#x27;1p&#x27;|awk -F\&#x27; &#x27;&#123;print $2&#125;&#x27;) $(cat /etc/openwrt_release |sed -n &#x27;6p&#x27;|awk -F\&#x27; &#x27;&#123;print $2&#125;&#x27;) $(cat /etc/openwrt_version)&quot;)<br>boot_time=$(date -d &quot;@$(( $(date +%s) - $(awk -F. &#x27;&#123;print $1&#125;&#x27; /proc/uptime) ))&quot; +&quot;%Y-%m-%d %H:%M:%S&quot;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">ssr_server=`<span class="hljs-built_in">cat</span> /etc/config/shadowsocksr |grep global_server|awk -F\<span class="hljs-string">&#x27; &#x27;</span>&#123;<span class="hljs-built_in">print</span> <span class="hljs-variable">$2</span>&#125;<span class="hljs-string">&#x27;`</span></span><br>up_times=$(cat /proc/uptime| awk -F. &#x27;&#123;run_days=$1 / 86400;run_hour=($1 % 86400)/3600;run_minute=($1 % 3600)/60;run_second=$1 % 60;printf(&quot;%d天%d时%d分%d秒\n&quot;,run_days,run_hour,run_minute,run_second)&#125;&#x27;)<br><br>post_data=&quot;&#123;\&quot;temp_cpu\&quot;:\&quot;$temp_cpu\&quot;, \&quot;cpu1_freq\&quot;:\&quot;$cpu1_freq\&quot;,\&quot;cpu2_freq\&quot;:\&quot;$cpu2_freq\&quot;, \&quot;cpu_used\&quot;:\&quot;$cpu_used\&quot;,\&quot;mem_used\&quot;:\&quot;$mem_used\&quot;,\&quot;ssr_server\&quot;:\&quot;$ssr_server\&quot;,\&quot;up_times\&quot;:\&quot;$up_times\&quot;,\&quot;hostname\&quot;:\&quot;$hostname\&quot;, \&quot;cpu_brand\&quot;:\&quot;$cpu_brand\&quot;, \&quot;cpu_arch\&quot;:\&quot;$cpu_arch\&quot;,\&quot;kernel\&quot;:\&quot;$kernel\&quot;, \&quot;releases\&quot;:\&quot;$releases\&quot;, \&quot;boot_time\&quot;:\&quot;$boot_time\&quot;&#125;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">echo $post_data</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">ssr_server=`cat /etc/config/shadowsocksr |grep global_server|awk -F\&#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br>mosquitto_pub -r -L mqtt://mqtt:mqtt@mqtt.local:1883/openwrtinfo -m &quot;$post_data&quot;<br></code></pre></td></tr></table></figure><p>4、在HA中增加配置文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mqtt:</span><br>  <span class="hljs-attr">sensor:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_cpu_tem&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_cpu_tem</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br>        <span class="hljs-attr">unit_of_measurement:</span> <span class="hljs-string">&#x27;°C&#x27;</span><br>        <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;mdi:thermometer&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.temp_cpu &#125;&#125;</span>&#x27;</span>        <br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_cpu1_freq&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_cpu1_freq</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br>        <span class="hljs-attr">unit_of_measurement:</span> <span class="hljs-string">&#x27;MHz&#x27;</span><br>        <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;mdi:pulse&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.cpu1_freq &#125;&#125;</span>&#x27;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_cpu2_freq&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_cpu2_freq</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br>        <span class="hljs-attr">unit_of_measurement:</span> <span class="hljs-string">&#x27;MHz&#x27;</span><br>        <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;mdi:pulse&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.cpu2_freq &#125;&#125;</span>&#x27;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_cpu_used&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_cpu_used</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br>        <span class="hljs-attr">unit_of_measurement:</span> <span class="hljs-string">&#x27;%&#x27;</span><br>        <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;mdi:cpu-64-bit&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.cpu_used &#125;&#125;</span>&#x27;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_mem_used&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_mem_used</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br>        <span class="hljs-attr">unit_of_measurement:</span> <span class="hljs-string">&#x27;%&#x27;</span><br>        <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;mdi:memory&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.mem_used &#125;&#125;</span>&#x27;</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">platform:</span> <span class="hljs-string">mqtt</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_ssr_server&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_ssr_server</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br><br>        <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;mdi:vpn&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.ssr_server &#125;&#125;</span>&#x27;</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-attr">platform:</span> <span class="hljs-string">mqtt</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_up_times&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_up_times</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br><br>        <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;mdi:clock-time-four-outline&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.up_times &#125;&#125;</span>&#x27;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_name&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_name</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.hostname &#125;&#125;</span>&#x27;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_cpu_brand&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_cpu_brand</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.cpu_brand &#125;&#125;</span>&#x27;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_cpu_arch&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_cpu_arch</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.cpu_arch &#125;&#125;</span>&#x27;</span><br>        <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_kernel&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_kernel</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.kernel &#125;&#125;</span>&#x27;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_releases&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_releases</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.releases &#125;&#125;</span>&#x27;</span><br>        <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;openwrt_boottime&#x27;</span><br>        <span class="hljs-attr">unique_id:</span> <span class="hljs-string">openwrt_boottime</span><br>        <span class="hljs-attr">state_topic:</span> <span class="hljs-string">&#x27;openwrtinfo&#x27;</span><br>        <span class="hljs-attr">value_template:</span> <span class="hljs-string">&#x27;<span class="hljs-template-variable">&#123;&#123; value_json.boot_time &#125;&#125;</span>&#x27;</span><br><br></code></pre></td></tr></table></figure><p>5、通过crontab任务调度或者写一个watch脚本循环调用，即可通过mqtt形式将采集到的信息推送到HA。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>while :<br>do<br>        if ! ps | grep -w openwrt_mqtt.sh | grep -v grep<br>        then                                    <br>                /opt/openwrt_mqtt.sh<br>        sleep 60#60秒取一次，可自行修改间隔<br>        fi                       <br>done<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>智能家居</category>
      
    </categories>
    
    
    <tags>
      
      <tag>openwrt</tag>
      
      <tag>HomeAssistant</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用群晖自带的 Nginx 做反向代理实现Aria2 Https访问</title>
    <link href="/2022/10/28/%E5%88%A9%E7%94%A8%E7%BE%A4%E6%99%96%E8%87%AA%E5%B8%A6%E7%9A%84-Nginx-%E5%81%9A%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0Aria2-Https%E8%AE%BF%E9%97%AE/"/>
    <url>/2022/10/28/%E5%88%A9%E7%94%A8%E7%BE%A4%E6%99%96%E8%87%AA%E5%B8%A6%E7%9A%84-Nginx-%E5%81%9A%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0Aria2-Https%E8%AE%BF%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h3><p>给Aria2服务器所用的SSL证书往往不支持Aria2所使用的6800端口，为此就需要用Nginx来实现同时提供HTTP和Aria2 JSONRPC服务了。但是群晖 <code>UI</code> 界面的反代没有办法编辑配置。</p><h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><p>想到的解决方案有两个，第一是通过 <code>Docker</code> 再装一个 <code>Nginx</code> 来做反代，第二是通过群晖自身的 <code>Nginx</code> 来做反代；最后选择了通过自身 <code>Nginx</code> 来做反代</p><h3 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><p><code>/usr/syno/etc/certificate/system/default/</code> 为群晖<code>安全性-&gt;证书</code>上传的默认证书的存储位置</p><p><code>5001</code> 端口为 <code>群晖</code> 的默认SSL访问端口，<code>6880、6800</code>为aria2 跟rpc的docker在用端口</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">5001</span> ssl http2;<br>    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">5001</span> ssl http2;<br>    <span class="hljs-attribute">server_name</span> dl.zjylyf.fun;<br>    <span class="hljs-attribute">ssl_certificate</span> /usr/syno/etc/certificate/system/default/fullchain.pem;<br>    <span class="hljs-attribute">ssl_certificate_key</span> /usr/syno/etc/certificate/system/default/privkey.pem;<br>    <span class="hljs-comment">#ssl_session_cache   shared:SSL:50m;</span><br>    <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">4h</span>;<br>    <span class="hljs-attribute">ssl_protocols</span> TLSv1.<span class="hljs-number">2</span> TLSv1.<span class="hljs-number">3</span>;<br>    <span class="hljs-attribute">ssl_buffer_size</span> <span class="hljs-number">4k</span>;<br><br>    <span class="hljs-attribute">if</span> (<span class="hljs-variable">$scheme</span> = http) &#123;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://<span class="hljs-variable">$host</span><span class="hljs-variable">$request_uri</span>;<br>    &#125;<br><br>  <br><br>    <span class="hljs-section">location</span> / &#123;<br><br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:6880;<br><br>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>:<span class="hljs-variable">$server_port</span>;<br><br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br><br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br><br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br><br>        <span class="hljs-attribute">proxy_redirect</span> http:// https://;<br><br>    &#125;<br> <br><br>    <span class="hljs-section">location</span> /jsonrpc &#123;<br><br>    <span class="hljs-attribute">proxy_pass</span> http://localhost:6800/jsonrpc;<br><br>    <span class="hljs-attribute">proxy_redirect</span> <span class="hljs-literal">off</span>;<br><br>    <span class="hljs-attribute">proxy_set_header</span>        X-Real-IP       <span class="hljs-variable">$remote_addr</span>;<br><br>    <span class="hljs-attribute">proxy_set_header</span>        X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br><br>    <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br><br>    <span class="hljs-comment">#以下代码使支持WebSocket</span><br><br>    <span class="hljs-attribute">proxy_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;<br><br>    <span class="hljs-attribute">proxy_set_header</span> Upgrade <span class="hljs-variable">$http_upgrade</span>;<br><br>    <span class="hljs-attribute">proxy_set_header</span> Connection <span class="hljs-string">&quot;upgrade&quot;</span>;<br><br>    &#125;<br><br><br><br>    <span class="hljs-attribute">error_page</span> <span class="hljs-number">403</span> <span class="hljs-number">404</span> <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span> <span class="hljs-variable">@error_page</span>;<br><br>  <br><br>    <span class="hljs-section">location</span> <span class="hljs-variable">@error_page</span> &#123;<br><br>        <span class="hljs-attribute">root</span> /usr/syno/share/nginx;<br><br>        <span class="hljs-attribute">rewrite</span> (.*) /<span class="hljs-literal">error</span>.html <span class="hljs-literal">break</span>;<br><br>        <span class="hljs-attribute">allow</span> all;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链接配置"><a href="#链接配置" class="headerlink" title="链接配置"></a>链接配置</h3><p>将配置文件链接到 <code>/etc/nginx/sites-enabled/</code> </p><p><code>ln -s /xx/xx/xxx.com.conf /etc/nginx/sites-enabled/</code></p><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><p><del>最后只需要重启 <code>Nginx</code> 即可</del></p><p><del><code>sudo systemctl --restart nginx</code></del><br>重载入nginx配置即可，无需重启nginx<br><code>nginx -s reload</code></p>]]></content>
    
    
    <categories>
      
      <category>群晖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>群晖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows平台双网卡添加静态路由</title>
    <link href="/2022/07/29/Windows%E5%B9%B3%E5%8F%B0%E5%8F%8C%E7%BD%91%E5%8D%A1%E6%B7%BB%E5%8A%A0%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1/"/>
    <url>/2022/07/29/Windows%E5%B9%B3%E5%8F%B0%E5%8F%8C%E7%BD%91%E5%8D%A1%E6%B7%BB%E5%8A%A0%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<h2 id="双网卡下添加静态路由"><a href="#双网卡下添加静态路由" class="headerlink" title="双网卡下添加静态路由"></a>双网卡下添加静态路由</h2><p><strong>系统平台：</strong> WIN10</p><p><strong>情况描述：</strong> 电脑上安装了2个网卡，一个连接外网（自动分配IP，路由地址为192.168.0.x），</p><p>一个连接内网（网卡静态IP为10.10.130.130，网关10.10.130.254，子网掩码255.255.255.0，内网网段10.37.0.0）</p><p><strong>任务目标：</strong> 按需访问内外网</p><p><strong>操作方法：</strong> 用管理员权限打开CMD,</p><ol><li><p>删除默认路由：输入 route delete 0.0.0.0 （ 0.0.0.0是指所有地址）</p></li><li><p>添加静态路由</p><ul><li>添加内网静态路由：route add 10.37.0.0 mask 255.255.0.0 10.10.130.254 -p</li></ul><p>注：它表示访问10.37.0.0网段的所有数据都要经过网关10.10.130.254，-p表示Persistent（持久有效的意思，重启后依然生效）</p><ul><li>添加外网静态路由：route add 0.0.0.0 mask 0.0.0.0 192.168.0.1 -p</li></ul><p>注：它表示访问0.0.0.0网址和0.0.0.0网段，即任意网址任意网段，访问经过外网网关192.168.0.1。</p></li><li><p>设置完成后，输入route print 看一下路由表是否添加成功，再ping内外网的网址测试下是否有效。</p></li></ol><hr><p><strong>知识点：</strong></p><p>ROUTE路由命令简单解说</p><p>ROUTE命令格式如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">ROUTE [-<span class="hljs-type">f</span>] [-<span class="hljs-type">p</span>] [<span class="hljs-type">command</span> [<span class="hljs-type">destination</span>] [<span class="hljs-type">MASK</span> <span class="hljs-type">netmask</span>] [<span class="hljs-type">gateway</span>] [<span class="hljs-type">METRIC</span> <span class="hljs-type">metric</span>] [<span class="hljs-type">IF</span> <span class="hljs-built_in">int</span><span class="hljs-type">erface</span>]<br></code></pre></td></tr></table></figure><p>其中 –f 参数用于清除路由表，-p参数用于永久保留某条路由（即在系统重启时不会丢失路由）。</p><p>Command主要有PRINT（打印）、ADD（添加）、DELETE（删除）、CHANGE（修改）共4个命令。</p><p>Destination代表所要达到的目标IP地址。</p><p>MASK是子网掩码的关键字。Netmask代表具体的子网掩码，如果不加说明，默认是255.255.255.255（单机IP地址），因此键入掩码时候要特别小心，要确认添加的是某个IP地址还是IP网段。如果代表全部出口子网掩码可用0.0.0.0。</p><p>Gateway代表出口网关。</p><p>其他interface和metric分别代表特殊路由的接口数目和到达目标地址的代价，一般可不予理会。</p>]]></content>
    
    
    <categories>
      
      <category>分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分享</tag>
      
      <tag>Windwos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux Shell文本处理工具介绍</title>
    <link href="/2022/05/29/Linux-Shell%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/"/>
    <url>/2022/05/29/Linux-Shell%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="搞定-Linux-Shell-文本处理工具，看完这篇还不够"><a href="#搞定-Linux-Shell-文本处理工具，看完这篇还不够" class="headerlink" title="搞定 Linux Shell 文本处理工具，看完这篇还不够~"></a>搞定 Linux Shell 文本处理工具，看完这篇还不够~</h1><p>Linux Shell是一种基本功，由于怪异的语法加之较差的可读性，通常被Python等脚本代替。既然是基本功，那就需要掌握，毕竟学习Shell脚本的过程中，还是能了解到很多Linux系统的内容。</p><p>Linux 脚本大师不是人人都可以达到的，但是用一些简单的Shell实现一些常见的基本功能还是很有必要的。</p><p><strong>下面我介绍 Linux 下使用 Shell 处理文本时最常用的工具：</strong></p><p>find、grep、xargs、sort、uniq、tr、cut、paste、wc、sed、awk；</p><p>提供的例子和参数都是最常用和最为实用的；</p><p>我对shell脚本使用的原则是命令单行书写，尽量不要超过2行；</p><p>如果有更为复杂的任务需求，还是考虑python吧；</p><h3 id="1、find-文件查找"><a href="#1、find-文件查找" class="headerlink" title="1、find 文件查找"></a>1、find 文件查找</h3><p>查找txt和pdf文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . \( -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; \) -print<br></code></pre></td></tr></table></figure><p>正则方式查找.txt和pdf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -regex  &quot;.*\(\.txt|\.pdf\)$&quot;<br></code></pre></td></tr></table></figure><p><strong>-iregex： 忽略大小写的正则</strong></p><p>否定参数，查找所有非txt文本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . ! -name &quot;*.txt&quot; -print<br></code></pre></td></tr></table></figure><p>指定搜索深度<br>打印出当前目录的文件（深度为1）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -maxdepth 1 -type f<br></code></pre></td></tr></table></figure><p><strong>定制搜索</strong></p><p>按类型搜索：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -type d -print  //只列出所有目录<br></code></pre></td></tr></table></figure><p>-type f 文件 &#x2F; l 符号链接</p><p>按时间搜索：</p><ul><li>-atime 访问时间 (单位是天，分钟单位则是-amin，以下类似）</li><li>-mtime 修改时间 （内容被修改）</li><li>-ctime 变化时间 （元数据或权限变化）</li></ul><p>最近7天被访问过的所有文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -atime 7 -type f -print<br></code></pre></td></tr></table></figure><p>按大小搜索：<br>w字 k M G</p><p>寻找大于2k的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -type f -size +2k<br></code></pre></td></tr></table></figure><p>按权限查找：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -type f -perm 644 -print //找具有可执行权限的所有文件<br></code></pre></td></tr></table></figure><p>按用户查找：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -type f -user weber -print// 找用户weber所拥有的文件<br></code></pre></td></tr></table></figure><p>找到后的后续动作</p><p>删除：<br>删除当前目录下所有的swp文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -type f -name &quot;*.swp&quot; -delete<br></code></pre></td></tr></table></figure><p>执行动作（强大的exec）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -type f -user root -exec chown weber &#123;&#125; \; //将当前目录下的所有权变更为weber<br></code></pre></td></tr></table></figure><blockquote><p>注：{}是一个特殊的字符串，对于每一个匹配的文件，{}会被替换成相应的文件名；</p></blockquote><p>eg：将找到的文件全都copy到另一个目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -type f -mtime +10 -name &quot;*.txt&quot; -exec cp &#123;&#125; OLD \;<br></code></pre></td></tr></table></figure><p>结合多个命令<br>tips: 如果需要后续执行多个命令，可以将多个命令写成一个脚本。然后 -exec 调用时执行脚本即可；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-exec ./commands.sh &#123;&#125; \;<br></code></pre></td></tr></table></figure><p>-print的定界符</p><p>默认使用<code>&#39;\n&#39;</code>作为文件的定界符；<br>-print0 使用’\0’作为文件的定界符，这样就可以搜索包含空格的文件；</p><h3 id="2、grep-文本搜索"><a href="#2、grep-文本搜索" class="headerlink" title="2、grep 文本搜索"></a>2、grep 文本搜索</h3><p>grep match_patten file &#x2F;&#x2F; 默认访问匹配行</p><p><strong>常用参数</strong></p><ul><li>-o 只输出匹配的文本行 VS -v 只输出没有匹配的文本行</li><li>-c 统计文件中包含文本的次数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep -c &quot;text&quot; filename<br></code></pre></td></tr></table></figure><ul><li>-n 打印匹配的行号</li><li>-i 搜索时忽略大小写</li><li>-l 只打印文件名</li></ul><p>在多级目录中对文本递归搜索(程序员搜代码的最爱）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep &quot;class&quot; . -R -n<br></code></pre></td></tr></table></figure><p>匹配多个模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep -e &quot;class&quot; -e &quot;vitural&quot; file<br></code></pre></td></tr></table></figure><p>grep输出以\0作为结尾符的文件名：（-z）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">grep &quot;test&quot; file* -lZ| xargs -0 rm<br></code></pre></td></tr></table></figure><h3 id="3、xargs-命令行参数转换"><a href="#3、xargs-命令行参数转换" class="headerlink" title="3、xargs 命令行参数转换"></a>3、xargs 命令行参数转换</h3><p>xargs 能够将输入数据转化为特定命令的命令行参数；这样，可以配合很多命令来组合使用。比如 grep，比如 find；</p><p>将多行输出转化为单行输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat file.txt| xargs<br></code></pre></td></tr></table></figure><p><code>\n</code>是多行文本间的定界符</p><p>将单行转化为多行输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat single.txt | xargs -n 3<br></code></pre></td></tr></table></figure><p>-n：指定每行显示的字段数</p><p>xargs参数说明</p><ul><li>-d 定义定界符 （默认为空格 多行的定界符为 \n）</li><li>-n 指定输出为多行</li><li>-I {} 指定替换字符串，这个字符串在xargs扩展时会被替换掉,用于待执行的命令需要多个参数时</li></ul><p>eg：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat file.txt | xargs -I &#123;&#125; ./command.sh -p &#123;&#125; -1<br></code></pre></td></tr></table></figure><p>-0：指定\0为输入定界符<br>eg：统计程序行数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find source_dir/ -type f -name &quot;*.cpp&quot; -print0 |xargs -0 wc -l<br></code></pre></td></tr></table></figure><h3 id="4、sort-排序"><a href="#4、sort-排序" class="headerlink" title="4、sort 排序"></a>4、sort 排序</h3><p>字段说明：</p><p>-n 按数字进行排序 VS -d 按字典序进行排序<br>-r 逆序排序<br>-k N 指定按第N列排序</p><p>eg：</p><p>sort -nrk 1 data.txt<br>sort -bd data &#x2F;&#x2F; 忽略像空格之类的前导空白字符</p><h3 id="5、uniq-消除重复行"><a href="#5、uniq-消除重复行" class="headerlink" title="5、uniq 消除重复行"></a>5、uniq 消除重复行</h3><p>消除重复行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sort unsort.txt | uniq<br></code></pre></td></tr></table></figure><p>统计各行在文件中出现的次数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sort unsort.txt | uniq -c<br></code></pre></td></tr></table></figure><p>找出重复行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sort unsort.txt | uniq -d<br></code></pre></td></tr></table></figure><p>可指定每行中需要比较的重复内容：-s 开始位置 -w 比较字符数</p><h3 id="6、用tr进行转换"><a href="#6、用tr进行转换" class="headerlink" title="6、用tr进行转换"></a>6、用tr进行转换</h3><p>通用用法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo 12345 | tr &#x27;0-9&#x27; &#x27;9876543210&#x27; //加解密转换，替换对应字符cat text| tr &#x27;\t&#x27; &#x27; &#x27;  //制表符转空格<br></code></pre></td></tr></table></figure><p>tr删除字符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat file | tr -d &#x27;0-9&#x27; // 删除所有数字<br></code></pre></td></tr></table></figure><p>-c 求补集</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat file | tr -c &#x27;0-9&#x27; //获取文件中所有数字cat file | tr -d -c &#x27;0-9 \n&#x27;  //删除非数字数据<br></code></pre></td></tr></table></figure><p>tr压缩字符<br>tr -s 压缩文本中出现的重复字符；最常用于压缩多余的空格</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat file | tr -s &#x27; &#x27;<br></code></pre></td></tr></table></figure><p>字符类</p><ul><li>tr中可用各种字符类：</li><li>alnum：字母和数字</li><li>alpha：字母</li><li>digit：数字</li><li>space：空白字符</li><li>lower：小写</li><li>upper：大写</li><li>cntrl：控制（非可打印）字符</li><li>print：可打印字符</li></ul><p>使用方法：tr [:class:] [:class:]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">eg: tr &#x27;[:lower:]&#x27; &#x27;[:upper:]&#x27;<br></code></pre></td></tr></table></figure><h3 id="7、cut-按列切分文本"><a href="#7、cut-按列切分文本" class="headerlink" title="7、cut 按列切分文本"></a>7、cut 按列切分文本</h3><p>截取文件的第2列和第4列：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cut -f2,4 filename<br></code></pre></td></tr></table></figure><p>去文件除第3列的所有列：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cut -f3 --complement filename<br></code></pre></td></tr></table></figure><p>-d 指定定界符：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat -f2 -d&quot;;&quot; filename<br></code></pre></td></tr></table></figure><p>cut 取的范围</p><ul><li>N- 第N个字段到结尾</li><li>-M 第1个字段为M<br>N-M N到M个字段</li></ul><p>cut 取的单位</p><ul><li>-b 以字节为单位</li><li>-c 以字符为单位</li><li>-f 以字段为单位（使用定界符）</li></ul><p>eg：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cut -c1-5 file //打印第一到5个字符cut -c-2 file  //打印前2个字符<br></code></pre></td></tr></table></figure><h3 id="8、paste-按列拼接文本"><a href="#8、paste-按列拼接文本" class="headerlink" title="8、paste 按列拼接文本"></a>8、paste 按列拼接文本</h3><p>将两个文本按列拼接到一起;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat file112cat file2colinbook<br></code></pre></td></tr></table></figure><p>paste file1 file21 colin2 book<br>默认的定界符是制表符，可以用-d指明定界符<br>paste file1 file2 -d “,”<br>1,colin<br>2,book</p><h3 id="9、wc-统计行和字符的工具"><a href="#9、wc-统计行和字符的工具" class="headerlink" title="9、wc 统计行和字符的工具"></a>9、wc 统计行和字符的工具</h3><p>wc -l file &#x2F;&#x2F; 统计行数<br>wc -w file &#x2F;&#x2F; 统计单词数<br>wc -c file &#x2F;&#x2F; 统计字符数</p><h3 id="10、sed-文本替换利器"><a href="#10、sed-文本替换利器" class="headerlink" title="10、sed 文本替换利器"></a>10、sed 文本替换利器</h3><p>首处替换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed &#x27;s/text/replace_text/&#x27; file   //替换每一行的第一处匹配的text<br></code></pre></td></tr></table></figure><p>全局替换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed &#x27;s/text/replace_text/g&#x27; file<br></code></pre></td></tr></table></figure><p>默认替换后，输出替换后的内容，如果需要直接替换原文件,使用-i：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -i &#x27;s/text/repalce_text/g&#x27; file<br></code></pre></td></tr></table></figure><p>移除空白行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed &#x27;/^$/d&#x27; file<br></code></pre></td></tr></table></figure><p>变量转换，已匹配的字符串通过标记&amp;来引用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo this is en example | sed &#x27;s/\w+/[&amp;]/g&#x27;$&gt;[this]  [is] [en] [example]<br>子串匹配标记<br>第一个匹配的括号内容使用标记 \1 来引用<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed &#x27;s/hello\([0-9]\)/\1/&#x27;<br></code></pre></td></tr></table></figure><p>双引号求值</p><p>sed 通常用单引号来引用；也可使用双引号，使用双引号后，双引号会对表达式求值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed &#x27;s/$var/HLLOE/&#x27;<br></code></pre></td></tr></table></figure><p>当使用双引号时，我们可以在sed样式和替换字符串中指定变量；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">eg:p=pattenr=replacedecho &quot;line con a patten&quot; | sed &quot;s/$p/$r/g&quot;$&gt;line con a replaced<br></code></pre></td></tr></table></figure><p>其它示例<br>字符串插入字符：将文本中每行内容（PEKSHA） 转换为 PEK&#x2F;SHA</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed &#x27;s/^.\&#123;3\&#125;/&amp;\//g&#x27; file<br></code></pre></td></tr></table></figure><h3 id="11、awk-数据流处理工具"><a href="#11、awk-数据流处理工具" class="headerlink" title="11、awk 数据流处理工具"></a>11、awk 数据流处理工具</h3><p>awk脚本结构<br>awk ‘ BEGIN{ statements } statements2 END{ statements } ‘</p><p>工作方式</p><ol><li>执行begin中语句块；</li><li>从文件或 stdin 中读入一行，然后执行 statements2，重复这个过程，直到文件全部被读取完毕；</li><li>执行end语句块；</li></ol><p>print 打印当前行</p><p>使用不带参数的print时，会打印当前行;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo -e &quot;line1\nline2&quot; | awk &#x27;BEGIN&#123;print &quot;start&quot;&#125; &#123;print &#125; END&#123; print &quot;End&quot; &#125;&#x27;<br></code></pre></td></tr></table></figure><p>print 以逗号分割时，参数以空格定界;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo | awk &#x27; &#123;var1 = &quot;v1&quot; ; var2 = &quot;V2&quot;; var3=&quot;v3&quot;; \print var1, var2 , var3; &#125;&#x27;$&gt;v1 V2 v3<br></code></pre></td></tr></table></figure><p>使用-拼接符的方式（””作为拼接符）;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo | awk &#x27; &#123;var1 = &quot;v1&quot; ; var2 = &quot;V2&quot;; var3=&quot;v3&quot;; \print var1&quot;-&quot;var2&quot;-&quot;var3; &#125;&#x27;$&gt;v1-V2-v3<br>特殊变量：NR NF $0 $1 $2<br></code></pre></td></tr></table></figure><p>NR:表示记录数量，在执行过程中对应当前行号；<br>NF:表示字段数量，在执行过程总对应当前行的字段数；<br>$0:这个变量包含执行过程中当前行的文本内容；<br>$1:第一个字段的文本内容；<br>$2:第二个字段的文本内容；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo -e “line1 f2 f3\n line2 \n line 3” | awk ‘&#123;print NR”:”1”-“$2&#125;’<br></code></pre></td></tr></table></figure><p>打印每一行的第二和第三个字段：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">awk &#x27;&#123;print $2, $3&#125;&#x27; file<br></code></pre></td></tr></table></figure><p>统计文件的行数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">awk &#x27; END &#123;print NR&#125;&#x27; file<br></code></pre></td></tr></table></figure><p>累加每一行的第一个字段：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo -e &quot;1\n 2\n 3\n 4\n&quot; | awk &#x27;BEGIN&#123;num = 0 ;print &quot;begin&quot;;&#125; &#123;sum += $1;&#125; END &#123;print &quot;==&quot;; print sum &#125;&#x27;<br></code></pre></td></tr></table></figure><p>传递外部变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">var=1000echo | awk &#x27;&#123;print vara&#125;&#x27; vara=$var #  输入来自stdinawk &#x27;&#123;print vara&#125;&#x27; vara=$var file # 输入来自文件用样式对awk处理的行进行过滤<br></code></pre></td></tr></table></figure><p>awk ‘NR &lt; 5’ #行号小于5<br>awk ‘NR&#x3D;&#x3D;1,NR&#x3D;&#x3D;4 {print}’ file #行号等于1和4的打印出来<br>awk ‘&#x2F;linux&#x2F;‘ #包含linux文本的行（可以用正则表达式来指定，超级强大）<br>awk ‘!&#x2F;linux&#x2F;‘ #不包含linux文本的行</p><p>设置定界符</p><p>使用-F来设置定界符（默认为空格）<br>awk -F: ‘{print $NF}’ &#x2F;etc&#x2F;passwd</p><p>读取命令输出</p><p>使用getline，将外部shell命令的输出读入到变量cmdout中；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo | awk &#x27;&#123;&quot;grep root /etc/passwd&quot; | getline cmdout; print cmdout &#125;&#x27;<br></code></pre></td></tr></table></figure><p>在awk中使用循环</p><p>for(i&#x3D;0;i&lt;10;i++){print $i;}<br>for(i in array){print array[i];}</p><p>eg:<br>以逆序的形式打印行：(tac命令的实现）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">seq 9| \awk &#x27;&#123;lifo[NR] = $0; lno=NR&#125; \END&#123; for(;lno&gt;-1;lno--)&#123;print lifo[lno];&#125;&#125; &#x27;<br></code></pre></td></tr></table></figure><p><strong>awk实现head、tail命令</strong></p><p>head:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">awk &#x27;NR&lt;=10&#123;print&#125;&#x27; filename<br></code></pre></td></tr></table></figure><p>tail：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">awk &#x27;&#123;buffer[NR%10] = $0;&#125; END&#123;for(i=0;i&lt;11;i++)&#123; \print buffer[i %10]&#125; &#125; &#x27; filename<br></code></pre></td></tr></table></figure><p>打印指定列</p><p>awk方式实现：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -lrt | awk &#x27;&#123;print $6&#125;&#x27;<br></code></pre></td></tr></table></figure><p>cut方式实现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls -lrt | cut -f6<br></code></pre></td></tr></table></figure><p>打印指定文本区域</p><p>确定行号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">seq 100| awk &#x27;NR==4,NR==6&#123;print&#125;&#x27;<br></code></pre></td></tr></table></figure><p>确定文本</p><p>打印处于start_pattern 和end_pattern之间的文本；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">awk &#x27;/start_pattern/, /end_pattern/&#x27; filename<br></code></pre></td></tr></table></figure><p>eg：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">seq 100 | awk &#x27;/13/,/15/&#x27;cat /etc/passwd| awk &#x27;/mai.*mail/,/news.*news/&#x27;<br></code></pre></td></tr></table></figure><p><strong>awk常用内建函数</strong></p><ul><li>index(string,search_string):返回search_string在string中出现的位置</li><li>sub(regex,replacement_str,string)：将正则匹配到的第一处内容替换为replacement_str;</li><li>match(regex,string):检查正则表达式是否能够匹配字符串；</li><li>length(string)：返回字符串长度</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo | awk &#x27;&#123;&quot;grep root /etc/passwd&quot; | getline cmdout; print length(cmdout) &#125;&#x27;<br></code></pre></td></tr></table></figure><p>printf 类似c语言中的printf，对输出进行格式化<br>eg：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">seq 10 | awk &#x27;&#123;printf &quot;-&gt;%4s\n&quot;, $1&#125;&#x27;<br></code></pre></td></tr></table></figure><h3 id="12、迭代文件中的行、单词和字符"><a href="#12、迭代文件中的行、单词和字符" class="headerlink" title="12、迭代文件中的行、单词和字符"></a>12、迭代文件中的行、单词和字符</h3><p><strong>1. 迭代文件中的每一行</strong></p><p>while 循环法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">while read line;doecho $line;done &lt; file.txt改成子shell:cat file.txt | (while read line;do echo $line;done)<br></code></pre></td></tr></table></figure><p>awk法：<br>cat file.txt| awk ‘{print}’</p><p><strong>2.迭代一行中的每一个单词</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">for word in $line;do echo $word;done<br></code></pre></td></tr></table></figure><p><strong>3. 迭代每一个字符</strong></p><p>从字符串中提取一个字符；(bash文本切片）</p><p>返回变量word的长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">for((i=0;i&lt;$&#123;#word&#125;;i++))<br>do<br>echo $&#123;word:i:1);<br>done<br></code></pre></td></tr></table></figure><hr><blockquote><p>来自：大CC<br>链接：<a href="http://www.cnblogs.com/me115/p/3427319.html">http://www.cnblogs.com/me115/p/3427319.html</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分享</tag>
      
      <tag>Linux</tag>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/1977/01/01/hello-world/"/>
    <url>/1977/01/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
